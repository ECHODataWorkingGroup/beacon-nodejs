{
  "components": {
    "parameters": {
      "alternateBases": {
        "in": "query",
        "name": "alternateBases",
        "schema": {
          "type": "string"
        }
      },
      "aminoacidChange": {
        "example": "V600E",
        "in": "query",
        "name": "aminoacidchange",
        "schema": {
          "type": "string"
        }
      },
      "assemblyId": {
        "in": "query",
        "name": "assemblyId",
        "schema": {
          "type": "string"
        }
      },
      "end": {
        "in": "query",
        "name": "end",
        "schema": {
          "items": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "maxItems": 2,
          "minItems": 0,
          "type": "array"
        }
      },
      "entryId": {
        "in": "path",
        "name": "id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "filters": {
        "in": "query",
        "name": "filters",
        "schema": {
          "examples": [
            [
              "EFO:0009655"
            ],
            [
              "NCIT:C48725",
              "NCIT:C28080"
            ]
          ],
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "geneId": {
        "example": "BRAF",
        "in": "query",
        "name": "geneid",
        "schema": {
          "type": "string"
        }
      },
      "genomicAlleleShortForm": {
        "example": "NM_004006.2:c.4375C>T",
        "in": "query",
        "name": "allele",
        "schema": {
          "type": "string"
        }
      },
      "includeResultsetResponses": {
        "default": "HIT",
        "description": "Indicator of whether responses from every Resultset should be included in the response to this request or just the ones with positive, negative results or no details at all. If null (not specified), the default value of 'HIT' is assumed. This parameter allows for returning boolean/counting results although the Beacon instance is capable to return record level details.",
        "enum": [
          "ALL",
          "HIT",
          "MISS",
          "NONE"
        ],
        "examples": [
          "ALL",
          "HIT",
          "MISS",
          "NONE"
        ],
        "type": "string"
      },
      "limit": {
        "in": "query",
        "name": "limit",
        "schema": {
          "default": 10,
          "description": "Size of the page. Use `0` to return all the results or the maximum allowed by the Beacon, if there is any.",
          "example": 10,
          "minimum": 0,
          "type": "integer"
        }
      },
      "referenceBases": {
        "in": "query",
        "name": "referenceBases",
        "schema": {
          "type": "string"
        }
      },
      "referenceName": {
        "in": "query",
        "name": "referenceName",
        "schema": {
          "type": "string"
        }
      },
      "requestedSchema": {
        "description": "Schema to be used to format the `result` field in the response. The response will use Beacon format.",
        "example": "ga4gh-service-info-v1.0",
        "in": "query",
        "name": "requestedSchema",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "skip": {
        "in": "query",
        "name": "skip",
        "schema": {
          "default": 0,
          "description": "* In the request: number of pages to skip * In the response: number of pages that has been skipped",
          "example": 0,
          "minimum": 0,
          "type": "integer"
        }
      },
      "start": {
        "in": "query",
        "name": "start",
        "schema": {
          "items": {
            "format": "int64",
            "minimum": 0,
            "type": "integer"
          },
          "maxItems": 2,
          "minItems": 1,
          "type": "array"
        }
      },
      "variantMaxLength": {
        "in": "query",
        "name": "variantMaxLength",
        "schema": {
          "format": "int64",
          "minimum": 0,
          "type": "integer"
        }
      },
      "variantMinLength": {
        "in": "query",
        "name": "variantMinLength",
        "schema": {
          "format": "int64",
          "minimum": 0,
          "type": "integer"
        }
      }
    },
    "responses": {
      "ResultsOKResponse": {
        "content": {
          "application/json": {
            "schema": {
              "oneOf": [
                {
                  "$schema": "https://json-schema.org/draft/2020-12/schema",
                  "description": "Complete definition for a minimal response that provides *only* a `Boolean` exists true|false answer.",
                  "properties": {
                    "beaconHandovers": {
                      "description": "List of handovers that apply to the whole response, not to any resultset or result in particular.",
                      "items": {
                        "description": "Requested schema to be used for individuals in the response.",
                        "properties": {
                          "handoverType": {
                            "description": "Handover type, as an Ontology_term object with CURIE syntax for the `id` value. Use `CUSTOM` for the `id` when no ontology is available.",
                            "examples": [
                              {
                                "id": "EFO:0004157",
                                "label": "BAM format"
                              },
                              {
                                "id": "CUSTOM",
                                "label": "download genomic variants in .pgxseg file format"
                              }
                            ],
                            "$schema": "https://json-schema.org/draft/2020-12/schema",
                            "additionalProperties": true,
                            "properties": {
                              "id": {
                                "description": "A CURIE identifier, e.g. as `id` for an ontology term.",
                                "examples": [
                                  "ga4gh:GA.01234abcde",
                                  "DUO:0000004",
                                  "orcid:0000-0003-3463-0775",
                                  "PMID:15254584"
                                ],
                                "pattern": "^\\w[^:]+:.+$",
                                "type": "string"
                              },
                              "label": {
                                "description": "The text that describes the term. By default it could be the preferred text of the term, but is it acceptable to customize it for a clearer description and understanding of the term in an specific context.",
                                "type": "string"
                              }
                            },
                            "required": [
                              "id"
                            ],
                            "title": "Ontology Term",
                            "type": "object"
                          },
                          "note": {
                            "description": "An optional text including considerations on the handover link provided.",
                            "example": "This handover link provides access to a summarized VCF.",
                            "type": "string"
                          },
                          "url": {
                            "description": "URL endpoint to where the handover process could progress, in RFC3986 format",
                            "example": "https://api.mygenomeservice.org/Handover/9dcc48d7-fc88-11e8-9110-b0c592dbf8c0/",
                            "format": "uri",
                            "type": "string"
                          }
                        },
                        "required": [
                          "handoverType",
                          "url"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "info": {
                      "description": "Additional details that could be of interest. Provided to clearly enclose any attribute that is not part of the Beacon specification.",
                      "type": "object"
                    },
                    "meta": {
                      "description": "Information about the response that could be relevant for the Beacon client in order to interpret the results.",
                      "$schema": "https://json-schema.org/draft/2020-12/schema",
                      "properties": {
                        "apiVersion": {
                          "description": "Version of the Beacon API.",
                          "example": "v2.0",
                          "type": "string"
                        },
                        "beaconId": {
                          "description": "Identifier of the beacon instance.",
                          "example": "org.example.beacon.v2",
                          "type": "string"
                        },
                        "receivedRequestSummary": {
                          "description": "Section of the response that summarize the request received as it has been interpreted by the Beacon server.",
                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                          "properties": {
                            "apiVersion": {
                              "description": "API version expected by the client to be supported by the server and used in the response format.",
                              "example": "v2.0",
                              "type": "string"
                            },
                            "filters": {
                              "description": "Filters as submitted in the request.",
                              "example": [
                                "BTO:0000199",
                                "PATO:0000383"
                              ],
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "includeResultsetResponses": {
                              "default": "HIT",
                              "description": "Indicator of whether responses from every Resultset should be included in the response to this request or just the ones with positive, negative results or no details at all. If null (not specified), the default value of 'HIT' is assumed. This parameter allows for returning boolean/counting results although the Beacon instance is capable to return record level details.",
                              "enum": [
                                "ALL",
                                "HIT",
                                "MISS",
                                "NONE"
                              ],
                              "examples": [
                                "ALL",
                                "HIT",
                                "MISS",
                                "NONE"
                              ],
                              "type": "string"
                            },
                            "pagination": {
                              "description": "Pagination as requested for the results.",
                              "properties": {
                                "currentPage": {
                                  "description": "Token of the returned page. To be used only in the response to allow the client to check if the returned page is the one requested.",
                                  "example": "ab0sc&fe1dd",
                                  "type": "string"
                                },
                                "limit": {
                                  "default": 10,
                                  "description": "Size of the page. Use `0` to return all the results or the maximum allowed by the Beacon, if there is any.",
                                  "example": 10,
                                  "minimum": 0,
                                  "type": "integer"
                                },
                                "nextPage": {
                                  "description": "Token of the next page. Used to navigate forward. If empty, it is assumed that no more pages are available",
                                  "example": "ab0sc&fe1dd",
                                  "type": "string"
                                },
                                "previousPage": {
                                  "description": "Token of the previous page. Used to navigate backwards. If empty, it is assumed that the current page is the first one.",
                                  "example": "ab0sc&fe1dd",
                                  "type": "string"
                                },
                                "skip": {
                                  "default": 0,
                                  "description": "* In the request: number of pages to skip * In the response: number of pages that has been skipped",
                                  "example": 0,
                                  "minimum": 0,
                                  "type": "integer"
                                }
                              },
                              "type": "object"
                            },
                            "requestParameters": {
                              "description": "Dictionary of request parameters received in the `RequestBody` or as part of a GET request.",
                              "$schema": "https://json-schema.org/draft/2020-12/schema",
                              "additionalProperties": {
                                "type": "object"
                              },
                              "properties": {
                                "$schema": {
                                  "description": "Added here to allow proper validation of the documents.",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "requestedGranularity": {
                              "description": "Requested granularity for the response which may differe from the response's actual granularity.",
                              "default": "boolean",
                              "enum": [
                                "boolean",
                                "count",
                                "aggregated",
                                "record"
                              ],
                              "type": "string"
                            },
                            "requestedSchemas": {
                              "$comment": "TODO: Add the format attribute as a uri.",
                              "description": "Set of schemas to be used in the response to a request. `minItems: 0` is used to confirm that an empty array is acceptable here.",
                              "minItems": 0,
                              "items": {
                                "description": "Schema to be used for the requested entry type in the response.",
                                "properties": {
                                  "entityType": {
                                    "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                                    "example": "Individual",
                                    "type": "string"
                                  },
                                  "schema": {
                                    "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                                    "examples": [
                                      "./ga4gh-beacon-dataset-v2.0.0",
                                      "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                                    ],
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "testMode": {
                              "description": "Used for indicating that a request was received in a test context.",
                              "default": false,
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "apiVersion",
                            "requestedSchemas",
                            "pagination",
                            "requestedGranularity"
                          ],
                          "type": "object"
                        },
                        "returnedGranularity": {
                          "description": "Granularity of the Beacon response. Targeted Beacon could respond or not with the requested granularity. E.g. record level granularity could be requested, but the Beacon could respond only with boolean or count results.",
                          "default": "boolean",
                          "enum": [
                            "boolean",
                            "count",
                            "aggregated",
                            "record"
                          ],
                          "type": "string"
                        },
                        "returnedSchemas": {
                          "description": "Set of schemas to be used in the response to a request.",
                          "items": {
                            "description": "Schema to be used for the requested entry type in the response.",
                            "properties": {
                              "entityType": {
                                "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                                "example": "Individual",
                                "type": "string"
                              },
                              "schema": {
                                "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                                "examples": [
                                  "./ga4gh-beacon-dataset-v2.0.0",
                                  "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                                ],
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "testMode": {
                          "description": "Used for indicating that a response is returned in a test context. Purposed for compliance testing. Information returned could be fake.",
                          "default": false,
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "beaconId",
                        "apiVersion",
                        "returnedSchemas",
                        "returnedGranularity",
                        "receivedRequestSummary"
                      ],
                      "type": "object"
                    },
                    "responseSummary": {
                      "description": "Boolean (true/false) response section.",
                      "$schema": "https://json-schema.org/draft/2020-12/schema",
                      "properties": {
                        "exists": {
                          "description": "Indicator of whether any entry was observed. This should be non-null, unless there was an error, in which case an error response is expected instead of this one.",
                          "examples": [
                            true
                          ],
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "exists"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "meta",
                    "responseSummary"
                  ],
                  "type": "object"
                },
                {
                  "$schema": "https://json-schema.org/draft/2020-12/schema",
                  "description": "Complete definition for a response that does not include record level details but provides `Boolean` and `count` information.",
                  "properties": {
                    "beaconHandovers": {
                      "description": "List of handovers that apply to the whole response, not to any resultset or result in particular.",
                      "items": {
                        "description": "Requested schema to be used for individuals in the response.",
                        "properties": {
                          "handoverType": {
                            "description": "Handover type, as an Ontology_term object with CURIE syntax for the `id` value. Use `CUSTOM` for the `id` when no ontology is available.",
                            "examples": [
                              {
                                "id": "EFO:0004157",
                                "label": "BAM format"
                              },
                              {
                                "id": "CUSTOM",
                                "label": "download genomic variants in .pgxseg file format"
                              }
                            ],
                            "$schema": "https://json-schema.org/draft/2020-12/schema",
                            "additionalProperties": true,
                            "properties": {
                              "id": {
                                "description": "A CURIE identifier, e.g. as `id` for an ontology term.",
                                "examples": [
                                  "ga4gh:GA.01234abcde",
                                  "DUO:0000004",
                                  "orcid:0000-0003-3463-0775",
                                  "PMID:15254584"
                                ],
                                "pattern": "^\\w[^:]+:.+$",
                                "type": "string"
                              },
                              "label": {
                                "description": "The text that describes the term. By default it could be the preferred text of the term, but is it acceptable to customize it for a clearer description and understanding of the term in an specific context.",
                                "type": "string"
                              }
                            },
                            "required": [
                              "id"
                            ],
                            "title": "Ontology Term",
                            "type": "object"
                          },
                          "note": {
                            "description": "An optional text including considerations on the handover link provided.",
                            "example": "This handover link provides access to a summarized VCF.",
                            "type": "string"
                          },
                          "url": {
                            "description": "URL endpoint to where the handover process could progress, in RFC3986 format",
                            "example": "https://api.mygenomeservice.org/Handover/9dcc48d7-fc88-11e8-9110-b0c592dbf8c0/",
                            "format": "uri",
                            "type": "string"
                          }
                        },
                        "required": [
                          "handoverType",
                          "url"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "info": {
                      "description": "Additional details that could be of interest. Provided to clearly enclose any attribute that is not part of the Beacon specification.",
                      "type": "object"
                    },
                    "meta": {
                      "description": "Information about the response that could be relevant for the Beacon client in order to interpret the results.",
                      "$schema": "https://json-schema.org/draft/2020-12/schema",
                      "properties": {
                        "apiVersion": {
                          "description": "Version of the Beacon API.",
                          "example": "v2.0",
                          "type": "string"
                        },
                        "beaconId": {
                          "description": "Identifier of the beacon instance.",
                          "example": "org.example.beacon.v2",
                          "type": "string"
                        },
                        "receivedRequestSummary": {
                          "description": "Section of the response that summarize the request received as it has been interpreted by the Beacon server.",
                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                          "properties": {
                            "apiVersion": {
                              "description": "API version expected by the client to be supported by the server and used in the response format.",
                              "example": "v2.0",
                              "type": "string"
                            },
                            "filters": {
                              "description": "Filters as submitted in the request.",
                              "example": [
                                "BTO:0000199",
                                "PATO:0000383"
                              ],
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "includeResultsetResponses": {
                              "default": "HIT",
                              "description": "Indicator of whether responses from every Resultset should be included in the response to this request or just the ones with positive, negative results or no details at all. If null (not specified), the default value of 'HIT' is assumed. This parameter allows for returning boolean/counting results although the Beacon instance is capable to return record level details.",
                              "enum": [
                                "ALL",
                                "HIT",
                                "MISS",
                                "NONE"
                              ],
                              "examples": [
                                "ALL",
                                "HIT",
                                "MISS",
                                "NONE"
                              ],
                              "type": "string"
                            },
                            "pagination": {
                              "description": "Pagination as requested for the results.",
                              "properties": {
                                "currentPage": {
                                  "description": "Token of the returned page. To be used only in the response to allow the client to check if the returned page is the one requested.",
                                  "example": "ab0sc&fe1dd",
                                  "type": "string"
                                },
                                "limit": {
                                  "default": 10,
                                  "description": "Size of the page. Use `0` to return all the results or the maximum allowed by the Beacon, if there is any.",
                                  "example": 10,
                                  "minimum": 0,
                                  "type": "integer"
                                },
                                "nextPage": {
                                  "description": "Token of the next page. Used to navigate forward. If empty, it is assumed that no more pages are available",
                                  "example": "ab0sc&fe1dd",
                                  "type": "string"
                                },
                                "previousPage": {
                                  "description": "Token of the previous page. Used to navigate backwards. If empty, it is assumed that the current page is the first one.",
                                  "example": "ab0sc&fe1dd",
                                  "type": "string"
                                },
                                "skip": {
                                  "default": 0,
                                  "description": "* In the request: number of pages to skip * In the response: number of pages that has been skipped",
                                  "example": 0,
                                  "minimum": 0,
                                  "type": "integer"
                                }
                              },
                              "type": "object"
                            },
                            "requestParameters": {
                              "description": "Dictionary of request parameters received in the `RequestBody` or as part of a GET request.",
                              "$schema": "https://json-schema.org/draft/2020-12/schema",
                              "additionalProperties": {
                                "type": "object"
                              },
                              "properties": {
                                "$schema": {
                                  "description": "Added here to allow proper validation of the documents.",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "requestedGranularity": {
                              "description": "Requested granularity for the response which may differe from the response's actual granularity.",
                              "default": "boolean",
                              "enum": [
                                "boolean",
                                "count",
                                "aggregated",
                                "record"
                              ],
                              "type": "string"
                            },
                            "requestedSchemas": {
                              "$comment": "TODO: Add the format attribute as a uri.",
                              "description": "Set of schemas to be used in the response to a request. `minItems: 0` is used to confirm that an empty array is acceptable here.",
                              "minItems": 0,
                              "items": {
                                "description": "Schema to be used for the requested entry type in the response.",
                                "properties": {
                                  "entityType": {
                                    "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                                    "example": "Individual",
                                    "type": "string"
                                  },
                                  "schema": {
                                    "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                                    "examples": [
                                      "./ga4gh-beacon-dataset-v2.0.0",
                                      "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                                    ],
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "testMode": {
                              "description": "Used for indicating that a request was received in a test context.",
                              "default": false,
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "apiVersion",
                            "requestedSchemas",
                            "pagination",
                            "requestedGranularity"
                          ],
                          "type": "object"
                        },
                        "returnedGranularity": {
                          "description": "Granularity of the Beacon response. Targeted Beacon could respond or not with the requested granularity. E.g. record level granularity could be requested, but the Beacon could respond only with boolean or count results.",
                          "default": "boolean",
                          "enum": [
                            "boolean",
                            "count",
                            "aggregated",
                            "record"
                          ],
                          "type": "string"
                        },
                        "returnedSchemas": {
                          "description": "Set of schemas to be used in the response to a request.",
                          "items": {
                            "description": "Schema to be used for the requested entry type in the response.",
                            "properties": {
                              "entityType": {
                                "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                                "example": "Individual",
                                "type": "string"
                              },
                              "schema": {
                                "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                                "examples": [
                                  "./ga4gh-beacon-dataset-v2.0.0",
                                  "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                                ],
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "testMode": {
                          "description": "Used for indicating that a response is returned in a test context. Purposed for compliance testing. Information returned could be fake.",
                          "default": false,
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "beaconId",
                        "apiVersion",
                        "returnedSchemas",
                        "returnedGranularity",
                        "receivedRequestSummary"
                      ],
                      "type": "object"
                    },
                    "responseSummary": {
                      "description": "Response summary, including Boolean and optionally results count.",
                      "$schema": "https://json-schema.org/draft/2020-12/schema",
                      "properties": {
                        "exists": {
                          "description": "Indicator of whether any entry was observed. This should be non-null, unless there was an error, in which case a `beaconErrorResponse` is expected instead of this one.",
                          "examples": [
                            true
                          ],
                          "type": "boolean"
                        },
                        "numTotalResults": {
                          "description": "Total number of results.",
                          "examples": [
                            123
                          ],
                          "minimum": 0,
                          "type": "integer"
                        }
                      },
                      "required": [
                        "exists",
                        "numTotalResults"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "meta",
                    "responseSummary"
                  ],
                  "type": "object"
                },
                {
                  "$schema": "https://json-schema.org/draft/2020-12/schema",
                  "additionalProperties": true,
                  "description": "Beacon response that includes record level details, grouped in Resultsets.",
                  "properties": {
                    "beaconHandovers": {
                      "description": "List of handovers that apply to the whole response, not to any resultset or result in particular.",
                      "items": {
                        "description": "Requested schema to be used for individuals in the response.",
                        "properties": {
                          "handoverType": {
                            "description": "Handover type, as an Ontology_term object with CURIE syntax for the `id` value. Use `CUSTOM` for the `id` when no ontology is available.",
                            "examples": [
                              {
                                "id": "EFO:0004157",
                                "label": "BAM format"
                              },
                              {
                                "id": "CUSTOM",
                                "label": "download genomic variants in .pgxseg file format"
                              }
                            ],
                            "$schema": "https://json-schema.org/draft/2020-12/schema",
                            "additionalProperties": true,
                            "properties": {
                              "id": {
                                "description": "A CURIE identifier, e.g. as `id` for an ontology term.",
                                "examples": [
                                  "ga4gh:GA.01234abcde",
                                  "DUO:0000004",
                                  "orcid:0000-0003-3463-0775",
                                  "PMID:15254584"
                                ],
                                "pattern": "^\\w[^:]+:.+$",
                                "type": "string"
                              },
                              "label": {
                                "description": "The text that describes the term. By default it could be the preferred text of the term, but is it acceptable to customize it for a clearer description and understanding of the term in an specific context.",
                                "type": "string"
                              }
                            },
                            "required": [
                              "id"
                            ],
                            "title": "Ontology Term",
                            "type": "object"
                          },
                          "note": {
                            "description": "An optional text including considerations on the handover link provided.",
                            "example": "This handover link provides access to a summarized VCF.",
                            "type": "string"
                          },
                          "url": {
                            "description": "URL endpoint to where the handover process could progress, in RFC3986 format",
                            "example": "https://api.mygenomeservice.org/Handover/9dcc48d7-fc88-11e8-9110-b0c592dbf8c0/",
                            "format": "uri",
                            "type": "string"
                          }
                        },
                        "required": [
                          "handoverType",
                          "url"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "info": {
                      "description": "Additional details that could be of interest. Provided to clearly enclose any attribute that is not part of the Beacon specification.",
                      "type": "object"
                    },
                    "meta": {
                      "description": "Information about the response that could be relevant for the Beacon client in order to interpret the results.",
                      "$schema": "https://json-schema.org/draft/2020-12/schema",
                      "properties": {
                        "apiVersion": {
                          "description": "Version of the Beacon API.",
                          "example": "v2.0",
                          "type": "string"
                        },
                        "beaconId": {
                          "description": "Identifier of the beacon instance.",
                          "example": "org.example.beacon.v2",
                          "type": "string"
                        },
                        "receivedRequestSummary": {
                          "description": "Section of the response that summarize the request received as it has been interpreted by the Beacon server.",
                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                          "properties": {
                            "apiVersion": {
                              "description": "API version expected by the client to be supported by the server and used in the response format.",
                              "example": "v2.0",
                              "type": "string"
                            },
                            "filters": {
                              "description": "Filters as submitted in the request.",
                              "example": [
                                "BTO:0000199",
                                "PATO:0000383"
                              ],
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "includeResultsetResponses": {
                              "default": "HIT",
                              "description": "Indicator of whether responses from every Resultset should be included in the response to this request or just the ones with positive, negative results or no details at all. If null (not specified), the default value of 'HIT' is assumed. This parameter allows for returning boolean/counting results although the Beacon instance is capable to return record level details.",
                              "enum": [
                                "ALL",
                                "HIT",
                                "MISS",
                                "NONE"
                              ],
                              "examples": [
                                "ALL",
                                "HIT",
                                "MISS",
                                "NONE"
                              ],
                              "type": "string"
                            },
                            "pagination": {
                              "description": "Pagination as requested for the results.",
                              "properties": {
                                "currentPage": {
                                  "description": "Token of the returned page. To be used only in the response to allow the client to check if the returned page is the one requested.",
                                  "example": "ab0sc&fe1dd",
                                  "type": "string"
                                },
                                "limit": {
                                  "default": 10,
                                  "description": "Size of the page. Use `0` to return all the results or the maximum allowed by the Beacon, if there is any.",
                                  "example": 10,
                                  "minimum": 0,
                                  "type": "integer"
                                },
                                "nextPage": {
                                  "description": "Token of the next page. Used to navigate forward. If empty, it is assumed that no more pages are available",
                                  "example": "ab0sc&fe1dd",
                                  "type": "string"
                                },
                                "previousPage": {
                                  "description": "Token of the previous page. Used to navigate backwards. If empty, it is assumed that the current page is the first one.",
                                  "example": "ab0sc&fe1dd",
                                  "type": "string"
                                },
                                "skip": {
                                  "default": 0,
                                  "description": "* In the request: number of pages to skip * In the response: number of pages that has been skipped",
                                  "example": 0,
                                  "minimum": 0,
                                  "type": "integer"
                                }
                              },
                              "type": "object"
                            },
                            "requestParameters": {
                              "description": "Dictionary of request parameters received in the `RequestBody` or as part of a GET request.",
                              "$schema": "https://json-schema.org/draft/2020-12/schema",
                              "additionalProperties": {
                                "type": "object"
                              },
                              "properties": {
                                "$schema": {
                                  "description": "Added here to allow proper validation of the documents.",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "requestedGranularity": {
                              "description": "Requested granularity for the response which may differe from the response's actual granularity.",
                              "default": "boolean",
                              "enum": [
                                "boolean",
                                "count",
                                "aggregated",
                                "record"
                              ],
                              "type": "string"
                            },
                            "requestedSchemas": {
                              "$comment": "TODO: Add the format attribute as a uri.",
                              "description": "Set of schemas to be used in the response to a request. `minItems: 0` is used to confirm that an empty array is acceptable here.",
                              "minItems": 0,
                              "items": {
                                "description": "Schema to be used for the requested entry type in the response.",
                                "properties": {
                                  "entityType": {
                                    "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                                    "example": "Individual",
                                    "type": "string"
                                  },
                                  "schema": {
                                    "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                                    "examples": [
                                      "./ga4gh-beacon-dataset-v2.0.0",
                                      "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                                    ],
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "testMode": {
                              "description": "Used for indicating that a request was received in a test context.",
                              "default": false,
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "apiVersion",
                            "requestedSchemas",
                            "pagination",
                            "requestedGranularity"
                          ],
                          "type": "object"
                        },
                        "returnedGranularity": {
                          "description": "Granularity of the Beacon response. Targeted Beacon could respond or not with the requested granularity. E.g. record level granularity could be requested, but the Beacon could respond only with boolean or count results.",
                          "default": "boolean",
                          "enum": [
                            "boolean",
                            "count",
                            "aggregated",
                            "record"
                          ],
                          "type": "string"
                        },
                        "returnedSchemas": {
                          "description": "Set of schemas to be used in the response to a request.",
                          "items": {
                            "description": "Schema to be used for the requested entry type in the response.",
                            "properties": {
                              "entityType": {
                                "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                                "example": "Individual",
                                "type": "string"
                              },
                              "schema": {
                                "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                                "examples": [
                                  "./ga4gh-beacon-dataset-v2.0.0",
                                  "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                                ],
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "testMode": {
                          "description": "Used for indicating that a response is returned in a test context. Purposed for compliance testing. Information returned could be fake.",
                          "default": false,
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "beaconId",
                        "apiVersion",
                        "returnedSchemas",
                        "returnedGranularity",
                        "receivedRequestSummary"
                      ],
                      "type": "object"
                    },
                    "response": {
                      "description": "Response for queries that recovers any result.",
                      "$schema": "https://json-schema.org/draft/2020-12/schema",
                      "additionalProperties": true,
                      "definitions": {
                        "ResultsetInstance": {
                          "additionalProperties": true,
                          "properties": {
                            "exists": {
                              "type": "boolean"
                            },
                            "id": {
                              "description": "id of the resultset",
                              "example": "datasetA",
                              "type": "string"
                            },
                            "info": {
                              "description": "Additional details that could be of interest about the Resultset. Provided to clearly enclose any attribute that is not part of the Beacon specification.",
                              "type": "object"
                            },
                            "results": {
                              "items": {
                                "type": "object"
                              },
                              "minItems": 0,
                              "type": "array"
                            },
                            "resultsCount": {
                              "description": "Number of results in this Resultset.",
                              "type": "integer"
                            },
                            "resultsHandovers": {
                              "description": "List of handovers that apply to this resultset, not to the whole Beacon or to a result in particular.",
                              "items": {
                                "description": "Requested schema to be used for individuals in the response.",
                                "properties": {
                                  "handoverType": {
                                    "description": "Handover type, as an Ontology_term object with CURIE syntax for the `id` value. Use `CUSTOM` for the `id` when no ontology is available.",
                                    "examples": [
                                      {
                                        "id": "EFO:0004157",
                                        "label": "BAM format"
                                      },
                                      {
                                        "id": "CUSTOM",
                                        "label": "download genomic variants in .pgxseg file format"
                                      }
                                    ],
                                    "$schema": "https://json-schema.org/draft/2020-12/schema",
                                    "additionalProperties": true,
                                    "properties": {
                                      "id": {
                                        "description": "A CURIE identifier, e.g. as `id` for an ontology term.",
                                        "examples": [
                                          "ga4gh:GA.01234abcde",
                                          "DUO:0000004",
                                          "orcid:0000-0003-3463-0775",
                                          "PMID:15254584"
                                        ],
                                        "pattern": "^\\w[^:]+:.+$",
                                        "type": "string"
                                      },
                                      "label": {
                                        "description": "The text that describes the term. By default it could be the preferred text of the term, but is it acceptable to customize it for a clearer description and understanding of the term in an specific context.",
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "id"
                                    ],
                                    "title": "Ontology Term",
                                    "type": "object"
                                  },
                                  "note": {
                                    "description": "An optional text including considerations on the handover link provided.",
                                    "example": "This handover link provides access to a summarized VCF.",
                                    "type": "string"
                                  },
                                  "url": {
                                    "description": "URL endpoint to where the handover process could progress, in RFC3986 format",
                                    "example": "https://api.mygenomeservice.org/Handover/9dcc48d7-fc88-11e8-9110-b0c592dbf8c0/",
                                    "format": "uri",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "handoverType",
                                  "url"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "setType": {
                              "default": "dataset",
                              "description": "Entry type of resultSet. It SHOULD MATCH an entry type declared as collection in the Beacon configuration.",
                              "type": "string"
                            }
                          },
                          "required": [
                            "id",
                            "setType",
                            "exists",
                            "resultsCount",
                            "results"
                          ]
                        }
                      },
                      "properties": {
                        "$schema": {
                          "$comment": "TO REVIEW: adding a `format` or `regex` attribute that validates correctly against a file path (relative).",
                          "description": "Refers to the JSON Schema which describes the set of valid attributes for this particular document type. This attribute is mostly used in schemas that should be tested in Beacon implementations.",
                          "type": "string"
                        },
                        "resultSets": {
                          "items": {
                            "additionalProperties": true,
                            "properties": {
                              "exists": {
                                "type": "boolean"
                              },
                              "id": {
                                "description": "id of the resultset",
                                "example": "datasetA",
                                "type": "string"
                              },
                              "info": {
                                "description": "Additional details that could be of interest about the Resultset. Provided to clearly enclose any attribute that is not part of the Beacon specification.",
                                "type": "object"
                              },
                              "results": {
                                "items": {
                                  "type": "object"
                                },
                                "minItems": 0,
                                "type": "array"
                              },
                              "resultsCount": {
                                "description": "Number of results in this Resultset.",
                                "type": "integer"
                              },
                              "resultsHandovers": {
                                "description": "List of handovers that apply to this resultset, not to the whole Beacon or to a result in particular.",
                                "items": {
                                  "description": "Requested schema to be used for individuals in the response.",
                                  "properties": {
                                    "handoverType": {
                                      "description": "Handover type, as an Ontology_term object with CURIE syntax for the `id` value. Use `CUSTOM` for the `id` when no ontology is available.",
                                      "examples": [
                                        {
                                          "id": "EFO:0004157",
                                          "label": "BAM format"
                                        },
                                        {
                                          "id": "CUSTOM",
                                          "label": "download genomic variants in .pgxseg file format"
                                        }
                                      ],
                                      "$schema": "https://json-schema.org/draft/2020-12/schema",
                                      "additionalProperties": true,
                                      "properties": {
                                        "id": {
                                          "description": "A CURIE identifier, e.g. as `id` for an ontology term.",
                                          "examples": [
                                            "ga4gh:GA.01234abcde",
                                            "DUO:0000004",
                                            "orcid:0000-0003-3463-0775",
                                            "PMID:15254584"
                                          ],
                                          "pattern": "^\\w[^:]+:.+$",
                                          "type": "string"
                                        },
                                        "label": {
                                          "description": "The text that describes the term. By default it could be the preferred text of the term, but is it acceptable to customize it for a clearer description and understanding of the term in an specific context.",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "id"
                                      ],
                                      "title": "Ontology Term",
                                      "type": "object"
                                    },
                                    "note": {
                                      "description": "An optional text including considerations on the handover link provided.",
                                      "example": "This handover link provides access to a summarized VCF.",
                                      "type": "string"
                                    },
                                    "url": {
                                      "description": "URL endpoint to where the handover process could progress, in RFC3986 format",
                                      "example": "https://api.mygenomeservice.org/Handover/9dcc48d7-fc88-11e8-9110-b0c592dbf8c0/",
                                      "format": "uri",
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "handoverType",
                                    "url"
                                  ],
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "setType": {
                                "default": "dataset",
                                "description": "Entry type of resultSet. It SHOULD MATCH an entry type declared as collection in the Beacon configuration.",
                                "type": "string"
                              }
                            },
                            "required": [
                              "id",
                              "setType",
                              "exists",
                              "resultsCount",
                              "results"
                            ]
                          },
                          "minItems": 0,
                          "type": "array"
                        }
                      },
                      "required": [
                        "resultSets"
                      ],
                      "title": "Beacon ResultSet",
                      "type": "object"
                    },
                    "responseSummary": {
                      "description": "Response summary, including Boolean and optionally results count.",
                      "$schema": "https://json-schema.org/draft/2020-12/schema",
                      "properties": {
                        "exists": {
                          "description": "Indicator of whether any entry was observed. This should be non-null, unless there was an error, in which case an error response is expected instead of this one.",
                          "examples": [
                            true
                          ],
                          "type": "boolean"
                        },
                        "numTotalResults": {
                          "description": "Total number of results.",
                          "examples": [
                            123
                          ],
                          "minimum": 0,
                          "type": "integer"
                        }
                      },
                      "required": [
                        "exists"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "meta",
                    "responseSummary",
                    "response"
                  ],
                  "type": "object"
                }
              ]
            }
          }
        },
        "description": "Successful operation."
      }
    }
  },
  "info": {
    "contact": {
      "email": "beacon@ga4gh.org"
    },
    "description": "TBD",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "title": "GA4GH Beacon API Specification - Genomic Variations Endpoints",
    "version": "2.0.0"
  },
  "openapi": "3.0.2",
  "paths": {
    "/g_variants": {
      "get": {
        "description": "Get a list of example entries",
        "operationId": "getExampleEntries",
        "parameters": [
          {
            "description": "Schema to be used to format the `result` field in the response. The response will use Beacon format.",
            "example": "ga4gh-service-info-v1.0",
            "in": "query",
            "name": "requestedSchema",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "skip",
            "schema": {
              "default": 0,
              "description": "* In the request: number of pages to skip * In the response: number of pages that has been skipped",
              "example": 0,
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 10,
              "description": "Size of the page. Use `0` to return all the results or the maximum allowed by the Beacon, if there is any.",
              "example": 10,
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "default": "HIT",
            "description": "Indicator of whether responses from every Resultset should be included in the response to this request or just the ones with positive, negative results or no details at all. If null (not specified), the default value of 'HIT' is assumed. This parameter allows for returning boolean/counting results although the Beacon instance is capable to return record level details.",
            "enum": [
              "ALL",
              "HIT",
              "MISS",
              "NONE"
            ],
            "examples": [
              "ALL",
              "HIT",
              "MISS",
              "NONE"
            ],
            "type": "string"
          },
          {
            "in": "query",
            "name": "start",
            "schema": {
              "items": {
                "format": "int64",
                "minimum": 0,
                "type": "integer"
              },
              "maxItems": 2,
              "minItems": 1,
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "end",
            "schema": {
              "items": {
                "format": "int64",
                "minimum": 0,
                "type": "integer"
              },
              "maxItems": 2,
              "minItems": 0,
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "assemblyId",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "referenceName",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "referenceBases",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "alternateBases",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "variantMinLength",
            "schema": {
              "format": "int64",
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "variantMaxLength",
            "schema": {
              "format": "int64",
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "example": "NM_004006.2:c.4375C>T",
            "in": "query",
            "name": "allele",
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "BRAF",
            "in": "query",
            "name": "geneid",
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "V600E",
            "in": "query",
            "name": "aminoacidchange",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filters",
            "schema": {
              "examples": [
                [
                  "EFO:0009655"
                ],
                [
                  "NCIT:C48725",
                  "NCIT:C28080"
                ]
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$schema": "https://json-schema.org/draft/2020-12/schema",
                      "description": "Complete definition for a minimal response that provides *only* a `Boolean` exists true|false answer.",
                      "properties": {
                        "beaconHandovers": {
                          "description": "List of handovers that apply to the whole response, not to any resultset or result in particular.",
                          "items": {
                            "description": "Requested schema to be used for individuals in the response.",
                            "properties": {
                              "handoverType": {
                                "description": "Handover type, as an Ontology_term object with CURIE syntax for the `id` value. Use `CUSTOM` for the `id` when no ontology is available.",
                                "examples": [
                                  {
                                    "id": "EFO:0004157",
                                    "label": "BAM format"
                                  },
                                  {
                                    "id": "CUSTOM",
                                    "label": "download genomic variants in .pgxseg file format"
                                  }
                                ],
                                "$schema": "https://json-schema.org/draft/2020-12/schema",
                                "additionalProperties": true,
                                "properties": {
                                  "id": {
                                    "description": "A CURIE identifier, e.g. as `id` for an ontology term.",
                                    "examples": [
                                      "ga4gh:GA.01234abcde",
                                      "DUO:0000004",
                                      "orcid:0000-0003-3463-0775",
                                      "PMID:15254584"
                                    ],
                                    "pattern": "^\\w[^:]+:.+$",
                                    "type": "string"
                                  },
                                  "label": {
                                    "description": "The text that describes the term. By default it could be the preferred text of the term, but is it acceptable to customize it for a clearer description and understanding of the term in an specific context.",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id"
                                ],
                                "title": "Ontology Term",
                                "type": "object"
                              },
                              "note": {
                                "description": "An optional text including considerations on the handover link provided.",
                                "example": "This handover link provides access to a summarized VCF.",
                                "type": "string"
                              },
                              "url": {
                                "description": "URL endpoint to where the handover process could progress, in RFC3986 format",
                                "example": "https://api.mygenomeservice.org/Handover/9dcc48d7-fc88-11e8-9110-b0c592dbf8c0/",
                                "format": "uri",
                                "type": "string"
                              }
                            },
                            "required": [
                              "handoverType",
                              "url"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "info": {
                          "description": "Additional details that could be of interest. Provided to clearly enclose any attribute that is not part of the Beacon specification.",
                          "type": "object"
                        },
                        "meta": {
                          "description": "Information about the response that could be relevant for the Beacon client in order to interpret the results.",
                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                          "properties": {
                            "apiVersion": {
                              "description": "Version of the Beacon API.",
                              "example": "v2.0",
                              "type": "string"
                            },
                            "beaconId": {
                              "description": "Identifier of the beacon instance.",
                              "example": "org.example.beacon.v2",
                              "type": "string"
                            },
                            "receivedRequestSummary": {
                              "description": "Section of the response that summarize the request received as it has been interpreted by the Beacon server.",
                              "$schema": "https://json-schema.org/draft/2020-12/schema",
                              "properties": {
                                "apiVersion": {
                                  "description": "API version expected by the client to be supported by the server and used in the response format.",
                                  "example": "v2.0",
                                  "type": "string"
                                },
                                "filters": {
                                  "description": "Filters as submitted in the request.",
                                  "example": [
                                    "BTO:0000199",
                                    "PATO:0000383"
                                  ],
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "includeResultsetResponses": {
                                  "default": "HIT",
                                  "description": "Indicator of whether responses from every Resultset should be included in the response to this request or just the ones with positive, negative results or no details at all. If null (not specified), the default value of 'HIT' is assumed. This parameter allows for returning boolean/counting results although the Beacon instance is capable to return record level details.",
                                  "enum": [
                                    "ALL",
                                    "HIT",
                                    "MISS",
                                    "NONE"
                                  ],
                                  "examples": [
                                    "ALL",
                                    "HIT",
                                    "MISS",
                                    "NONE"
                                  ],
                                  "type": "string"
                                },
                                "pagination": {
                                  "description": "Pagination as requested for the results.",
                                  "properties": {
                                    "currentPage": {
                                      "description": "Token of the returned page. To be used only in the response to allow the client to check if the returned page is the one requested.",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "limit": {
                                      "default": 10,
                                      "description": "Size of the page. Use `0` to return all the results or the maximum allowed by the Beacon, if there is any.",
                                      "example": 10,
                                      "minimum": 0,
                                      "type": "integer"
                                    },
                                    "nextPage": {
                                      "description": "Token of the next page. Used to navigate forward. If empty, it is assumed that no more pages are available",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "previousPage": {
                                      "description": "Token of the previous page. Used to navigate backwards. If empty, it is assumed that the current page is the first one.",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "skip": {
                                      "default": 0,
                                      "description": "* In the request: number of pages to skip * In the response: number of pages that has been skipped",
                                      "example": 0,
                                      "minimum": 0,
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "requestParameters": {
                                  "description": "Dictionary of request parameters received in the `RequestBody` or as part of a GET request.",
                                  "$schema": "https://json-schema.org/draft/2020-12/schema",
                                  "additionalProperties": {
                                    "type": "object"
                                  },
                                  "properties": {
                                    "$schema": {
                                      "description": "Added here to allow proper validation of the documents.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "requestedGranularity": {
                                  "description": "Requested granularity for the response which may differe from the response's actual granularity.",
                                  "default": "boolean",
                                  "enum": [
                                    "boolean",
                                    "count",
                                    "aggregated",
                                    "record"
                                  ],
                                  "type": "string"
                                },
                                "requestedSchemas": {
                                  "$comment": "TODO: Add the format attribute as a uri.",
                                  "description": "Set of schemas to be used in the response to a request. `minItems: 0` is used to confirm that an empty array is acceptable here.",
                                  "minItems": 0,
                                  "items": {
                                    "description": "Schema to be used for the requested entry type in the response.",
                                    "properties": {
                                      "entityType": {
                                        "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                                        "example": "Individual",
                                        "type": "string"
                                      },
                                      "schema": {
                                        "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                                        "examples": [
                                          "./ga4gh-beacon-dataset-v2.0.0",
                                          "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "testMode": {
                                  "description": "Used for indicating that a request was received in a test context.",
                                  "default": false,
                                  "type": "boolean"
                                }
                              },
                              "required": [
                                "apiVersion",
                                "requestedSchemas",
                                "pagination",
                                "requestedGranularity"
                              ],
                              "type": "object"
                            },
                            "returnedGranularity": {
                              "description": "Granularity of the Beacon response. Targeted Beacon could respond or not with the requested granularity. E.g. record level granularity could be requested, but the Beacon could respond only with boolean or count results.",
                              "default": "boolean",
                              "enum": [
                                "boolean",
                                "count",
                                "aggregated",
                                "record"
                              ],
                              "type": "string"
                            },
                            "returnedSchemas": {
                              "description": "Set of schemas to be used in the response to a request.",
                              "items": {
                                "description": "Schema to be used for the requested entry type in the response.",
                                "properties": {
                                  "entityType": {
                                    "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                                    "example": "Individual",
                                    "type": "string"
                                  },
                                  "schema": {
                                    "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                                    "examples": [
                                      "./ga4gh-beacon-dataset-v2.0.0",
                                      "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                                    ],
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "testMode": {
                              "description": "Used for indicating that a response is returned in a test context. Purposed for compliance testing. Information returned could be fake.",
                              "default": false,
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "beaconId",
                            "apiVersion",
                            "returnedSchemas",
                            "returnedGranularity",
                            "receivedRequestSummary"
                          ],
                          "type": "object"
                        },
                        "responseSummary": {
                          "description": "Boolean (true/false) response section.",
                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                          "properties": {
                            "exists": {
                              "description": "Indicator of whether any entry was observed. This should be non-null, unless there was an error, in which case an error response is expected instead of this one.",
                              "examples": [
                                true
                              ],
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "exists"
                          ],
                          "type": "object"
                        }
                      },
                      "required": [
                        "meta",
                        "responseSummary"
                      ],
                      "type": "object"
                    },
                    {
                      "$schema": "https://json-schema.org/draft/2020-12/schema",
                      "description": "Complete definition for a response that does not include record level details but provides `Boolean` and `count` information.",
                      "properties": {
                        "beaconHandovers": {
                          "description": "List of handovers that apply to the whole response, not to any resultset or result in particular.",
                          "items": {
                            "description": "Requested schema to be used for individuals in the response.",
                            "properties": {
                              "handoverType": {
                                "description": "Handover type, as an Ontology_term object with CURIE syntax for the `id` value. Use `CUSTOM` for the `id` when no ontology is available.",
                                "examples": [
                                  {
                                    "id": "EFO:0004157",
                                    "label": "BAM format"
                                  },
                                  {
                                    "id": "CUSTOM",
                                    "label": "download genomic variants in .pgxseg file format"
                                  }
                                ],
                                "$schema": "https://json-schema.org/draft/2020-12/schema",
                                "additionalProperties": true,
                                "properties": {
                                  "id": {
                                    "description": "A CURIE identifier, e.g. as `id` for an ontology term.",
                                    "examples": [
                                      "ga4gh:GA.01234abcde",
                                      "DUO:0000004",
                                      "orcid:0000-0003-3463-0775",
                                      "PMID:15254584"
                                    ],
                                    "pattern": "^\\w[^:]+:.+$",
                                    "type": "string"
                                  },
                                  "label": {
                                    "description": "The text that describes the term. By default it could be the preferred text of the term, but is it acceptable to customize it for a clearer description and understanding of the term in an specific context.",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id"
                                ],
                                "title": "Ontology Term",
                                "type": "object"
                              },
                              "note": {
                                "description": "An optional text including considerations on the handover link provided.",
                                "example": "This handover link provides access to a summarized VCF.",
                                "type": "string"
                              },
                              "url": {
                                "description": "URL endpoint to where the handover process could progress, in RFC3986 format",
                                "example": "https://api.mygenomeservice.org/Handover/9dcc48d7-fc88-11e8-9110-b0c592dbf8c0/",
                                "format": "uri",
                                "type": "string"
                              }
                            },
                            "required": [
                              "handoverType",
                              "url"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "info": {
                          "description": "Additional details that could be of interest. Provided to clearly enclose any attribute that is not part of the Beacon specification.",
                          "type": "object"
                        },
                        "meta": {
                          "description": "Information about the response that could be relevant for the Beacon client in order to interpret the results.",
                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                          "properties": {
                            "apiVersion": {
                              "description": "Version of the Beacon API.",
                              "example": "v2.0",
                              "type": "string"
                            },
                            "beaconId": {
                              "description": "Identifier of the beacon instance.",
                              "example": "org.example.beacon.v2",
                              "type": "string"
                            },
                            "receivedRequestSummary": {
                              "description": "Section of the response that summarize the request received as it has been interpreted by the Beacon server.",
                              "$schema": "https://json-schema.org/draft/2020-12/schema",
                              "properties": {
                                "apiVersion": {
                                  "description": "API version expected by the client to be supported by the server and used in the response format.",
                                  "example": "v2.0",
                                  "type": "string"
                                },
                                "filters": {
                                  "description": "Filters as submitted in the request.",
                                  "example": [
                                    "BTO:0000199",
                                    "PATO:0000383"
                                  ],
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "includeResultsetResponses": {
                                  "default": "HIT",
                                  "description": "Indicator of whether responses from every Resultset should be included in the response to this request or just the ones with positive, negative results or no details at all. If null (not specified), the default value of 'HIT' is assumed. This parameter allows for returning boolean/counting results although the Beacon instance is capable to return record level details.",
                                  "enum": [
                                    "ALL",
                                    "HIT",
                                    "MISS",
                                    "NONE"
                                  ],
                                  "examples": [
                                    "ALL",
                                    "HIT",
                                    "MISS",
                                    "NONE"
                                  ],
                                  "type": "string"
                                },
                                "pagination": {
                                  "description": "Pagination as requested for the results.",
                                  "properties": {
                                    "currentPage": {
                                      "description": "Token of the returned page. To be used only in the response to allow the client to check if the returned page is the one requested.",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "limit": {
                                      "default": 10,
                                      "description": "Size of the page. Use `0` to return all the results or the maximum allowed by the Beacon, if there is any.",
                                      "example": 10,
                                      "minimum": 0,
                                      "type": "integer"
                                    },
                                    "nextPage": {
                                      "description": "Token of the next page. Used to navigate forward. If empty, it is assumed that no more pages are available",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "previousPage": {
                                      "description": "Token of the previous page. Used to navigate backwards. If empty, it is assumed that the current page is the first one.",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "skip": {
                                      "default": 0,
                                      "description": "* In the request: number of pages to skip * In the response: number of pages that has been skipped",
                                      "example": 0,
                                      "minimum": 0,
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "requestParameters": {
                                  "description": "Dictionary of request parameters received in the `RequestBody` or as part of a GET request.",
                                  "$schema": "https://json-schema.org/draft/2020-12/schema",
                                  "additionalProperties": {
                                    "type": "object"
                                  },
                                  "properties": {
                                    "$schema": {
                                      "description": "Added here to allow proper validation of the documents.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "requestedGranularity": {
                                  "description": "Requested granularity for the response which may differe from the response's actual granularity.",
                                  "default": "boolean",
                                  "enum": [
                                    "boolean",
                                    "count",
                                    "aggregated",
                                    "record"
                                  ],
                                  "type": "string"
                                },
                                "requestedSchemas": {
                                  "$comment": "TODO: Add the format attribute as a uri.",
                                  "description": "Set of schemas to be used in the response to a request. `minItems: 0` is used to confirm that an empty array is acceptable here.",
                                  "minItems": 0,
                                  "items": {
                                    "description": "Schema to be used for the requested entry type in the response.",
                                    "properties": {
                                      "entityType": {
                                        "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                                        "example": "Individual",
                                        "type": "string"
                                      },
                                      "schema": {
                                        "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                                        "examples": [
                                          "./ga4gh-beacon-dataset-v2.0.0",
                                          "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "testMode": {
                                  "description": "Used for indicating that a request was received in a test context.",
                                  "default": false,
                                  "type": "boolean"
                                }
                              },
                              "required": [
                                "apiVersion",
                                "requestedSchemas",
                                "pagination",
                                "requestedGranularity"
                              ],
                              "type": "object"
                            },
                            "returnedGranularity": {
                              "description": "Granularity of the Beacon response. Targeted Beacon could respond or not with the requested granularity. E.g. record level granularity could be requested, but the Beacon could respond only with boolean or count results.",
                              "default": "boolean",
                              "enum": [
                                "boolean",
                                "count",
                                "aggregated",
                                "record"
                              ],
                              "type": "string"
                            },
                            "returnedSchemas": {
                              "description": "Set of schemas to be used in the response to a request.",
                              "items": {
                                "description": "Schema to be used for the requested entry type in the response.",
                                "properties": {
                                  "entityType": {
                                    "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                                    "example": "Individual",
                                    "type": "string"
                                  },
                                  "schema": {
                                    "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                                    "examples": [
                                      "./ga4gh-beacon-dataset-v2.0.0",
                                      "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                                    ],
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "testMode": {
                              "description": "Used for indicating that a response is returned in a test context. Purposed for compliance testing. Information returned could be fake.",
                              "default": false,
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "beaconId",
                            "apiVersion",
                            "returnedSchemas",
                            "returnedGranularity",
                            "receivedRequestSummary"
                          ],
                          "type": "object"
                        },
                        "responseSummary": {
                          "description": "Response summary, including Boolean and optionally results count.",
                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                          "properties": {
                            "exists": {
                              "description": "Indicator of whether any entry was observed. This should be non-null, unless there was an error, in which case a `beaconErrorResponse` is expected instead of this one.",
                              "examples": [
                                true
                              ],
                              "type": "boolean"
                            },
                            "numTotalResults": {
                              "description": "Total number of results.",
                              "examples": [
                                123
                              ],
                              "minimum": 0,
                              "type": "integer"
                            }
                          },
                          "required": [
                            "exists",
                            "numTotalResults"
                          ],
                          "type": "object"
                        }
                      },
                      "required": [
                        "meta",
                        "responseSummary"
                      ],
                      "type": "object"
                    },
                    {
                      "$schema": "https://json-schema.org/draft/2020-12/schema",
                      "additionalProperties": true,
                      "description": "Beacon response that includes record level details, grouped in Resultsets.",
                      "properties": {
                        "beaconHandovers": {
                          "description": "List of handovers that apply to the whole response, not to any resultset or result in particular.",
                          "items": {
                            "description": "Requested schema to be used for individuals in the response.",
                            "properties": {
                              "handoverType": {
                                "description": "Handover type, as an Ontology_term object with CURIE syntax for the `id` value. Use `CUSTOM` for the `id` when no ontology is available.",
                                "examples": [
                                  {
                                    "id": "EFO:0004157",
                                    "label": "BAM format"
                                  },
                                  {
                                    "id": "CUSTOM",
                                    "label": "download genomic variants in .pgxseg file format"
                                  }
                                ],
                                "$schema": "https://json-schema.org/draft/2020-12/schema",
                                "additionalProperties": true,
                                "properties": {
                                  "id": {
                                    "description": "A CURIE identifier, e.g. as `id` for an ontology term.",
                                    "examples": [
                                      "ga4gh:GA.01234abcde",
                                      "DUO:0000004",
                                      "orcid:0000-0003-3463-0775",
                                      "PMID:15254584"
                                    ],
                                    "pattern": "^\\w[^:]+:.+$",
                                    "type": "string"
                                  },
                                  "label": {
                                    "description": "The text that describes the term. By default it could be the preferred text of the term, but is it acceptable to customize it for a clearer description and understanding of the term in an specific context.",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id"
                                ],
                                "title": "Ontology Term",
                                "type": "object"
                              },
                              "note": {
                                "description": "An optional text including considerations on the handover link provided.",
                                "example": "This handover link provides access to a summarized VCF.",
                                "type": "string"
                              },
                              "url": {
                                "description": "URL endpoint to where the handover process could progress, in RFC3986 format",
                                "example": "https://api.mygenomeservice.org/Handover/9dcc48d7-fc88-11e8-9110-b0c592dbf8c0/",
                                "format": "uri",
                                "type": "string"
                              }
                            },
                            "required": [
                              "handoverType",
                              "url"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "info": {
                          "description": "Additional details that could be of interest. Provided to clearly enclose any attribute that is not part of the Beacon specification.",
                          "type": "object"
                        },
                        "meta": {
                          "description": "Information about the response that could be relevant for the Beacon client in order to interpret the results.",
                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                          "properties": {
                            "apiVersion": {
                              "description": "Version of the Beacon API.",
                              "example": "v2.0",
                              "type": "string"
                            },
                            "beaconId": {
                              "description": "Identifier of the beacon instance.",
                              "example": "org.example.beacon.v2",
                              "type": "string"
                            },
                            "receivedRequestSummary": {
                              "description": "Section of the response that summarize the request received as it has been interpreted by the Beacon server.",
                              "$schema": "https://json-schema.org/draft/2020-12/schema",
                              "properties": {
                                "apiVersion": {
                                  "description": "API version expected by the client to be supported by the server and used in the response format.",
                                  "example": "v2.0",
                                  "type": "string"
                                },
                                "filters": {
                                  "description": "Filters as submitted in the request.",
                                  "example": [
                                    "BTO:0000199",
                                    "PATO:0000383"
                                  ],
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "includeResultsetResponses": {
                                  "default": "HIT",
                                  "description": "Indicator of whether responses from every Resultset should be included in the response to this request or just the ones with positive, negative results or no details at all. If null (not specified), the default value of 'HIT' is assumed. This parameter allows for returning boolean/counting results although the Beacon instance is capable to return record level details.",
                                  "enum": [
                                    "ALL",
                                    "HIT",
                                    "MISS",
                                    "NONE"
                                  ],
                                  "examples": [
                                    "ALL",
                                    "HIT",
                                    "MISS",
                                    "NONE"
                                  ],
                                  "type": "string"
                                },
                                "pagination": {
                                  "description": "Pagination as requested for the results.",
                                  "properties": {
                                    "currentPage": {
                                      "description": "Token of the returned page. To be used only in the response to allow the client to check if the returned page is the one requested.",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "limit": {
                                      "default": 10,
                                      "description": "Size of the page. Use `0` to return all the results or the maximum allowed by the Beacon, if there is any.",
                                      "example": 10,
                                      "minimum": 0,
                                      "type": "integer"
                                    },
                                    "nextPage": {
                                      "description": "Token of the next page. Used to navigate forward. If empty, it is assumed that no more pages are available",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "previousPage": {
                                      "description": "Token of the previous page. Used to navigate backwards. If empty, it is assumed that the current page is the first one.",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "skip": {
                                      "default": 0,
                                      "description": "* In the request: number of pages to skip * In the response: number of pages that has been skipped",
                                      "example": 0,
                                      "minimum": 0,
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "requestParameters": {
                                  "description": "Dictionary of request parameters received in the `RequestBody` or as part of a GET request.",
                                  "$schema": "https://json-schema.org/draft/2020-12/schema",
                                  "additionalProperties": {
                                    "type": "object"
                                  },
                                  "properties": {
                                    "$schema": {
                                      "description": "Added here to allow proper validation of the documents.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "requestedGranularity": {
                                  "description": "Requested granularity for the response which may differe from the response's actual granularity.",
                                  "default": "boolean",
                                  "enum": [
                                    "boolean",
                                    "count",
                                    "aggregated",
                                    "record"
                                  ],
                                  "type": "string"
                                },
                                "requestedSchemas": {
                                  "$comment": "TODO: Add the format attribute as a uri.",
                                  "description": "Set of schemas to be used in the response to a request. `minItems: 0` is used to confirm that an empty array is acceptable here.",
                                  "minItems": 0,
                                  "items": {
                                    "description": "Schema to be used for the requested entry type in the response.",
                                    "properties": {
                                      "entityType": {
                                        "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                                        "example": "Individual",
                                        "type": "string"
                                      },
                                      "schema": {
                                        "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                                        "examples": [
                                          "./ga4gh-beacon-dataset-v2.0.0",
                                          "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "testMode": {
                                  "description": "Used for indicating that a request was received in a test context.",
                                  "default": false,
                                  "type": "boolean"
                                }
                              },
                              "required": [
                                "apiVersion",
                                "requestedSchemas",
                                "pagination",
                                "requestedGranularity"
                              ],
                              "type": "object"
                            },
                            "returnedGranularity": {
                              "description": "Granularity of the Beacon response. Targeted Beacon could respond or not with the requested granularity. E.g. record level granularity could be requested, but the Beacon could respond only with boolean or count results.",
                              "default": "boolean",
                              "enum": [
                                "boolean",
                                "count",
                                "aggregated",
                                "record"
                              ],
                              "type": "string"
                            },
                            "returnedSchemas": {
                              "description": "Set of schemas to be used in the response to a request.",
                              "items": {
                                "description": "Schema to be used for the requested entry type in the response.",
                                "properties": {
                                  "entityType": {
                                    "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                                    "example": "Individual",
                                    "type": "string"
                                  },
                                  "schema": {
                                    "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                                    "examples": [
                                      "./ga4gh-beacon-dataset-v2.0.0",
                                      "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                                    ],
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "testMode": {
                              "description": "Used for indicating that a response is returned in a test context. Purposed for compliance testing. Information returned could be fake.",
                              "default": false,
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "beaconId",
                            "apiVersion",
                            "returnedSchemas",
                            "returnedGranularity",
                            "receivedRequestSummary"
                          ],
                          "type": "object"
                        },
                        "response": {
                          "description": "Response for queries that recovers any result.",
                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                          "additionalProperties": true,
                          "definitions": {
                            "ResultsetInstance": {
                              "additionalProperties": true,
                              "properties": {
                                "exists": {
                                  "type": "boolean"
                                },
                                "id": {
                                  "description": "id of the resultset",
                                  "example": "datasetA",
                                  "type": "string"
                                },
                                "info": {
                                  "description": "Additional details that could be of interest about the Resultset. Provided to clearly enclose any attribute that is not part of the Beacon specification.",
                                  "type": "object"
                                },
                                "results": {
                                  "items": {
                                    "type": "object"
                                  },
                                  "minItems": 0,
                                  "type": "array"
                                },
                                "resultsCount": {
                                  "description": "Number of results in this Resultset.",
                                  "type": "integer"
                                },
                                "resultsHandovers": {
                                  "description": "List of handovers that apply to this resultset, not to the whole Beacon or to a result in particular.",
                                  "items": {
                                    "description": "Requested schema to be used for individuals in the response.",
                                    "properties": {
                                      "handoverType": {
                                        "description": "Handover type, as an Ontology_term object with CURIE syntax for the `id` value. Use `CUSTOM` for the `id` when no ontology is available.",
                                        "examples": [
                                          {
                                            "id": "EFO:0004157",
                                            "label": "BAM format"
                                          },
                                          {
                                            "id": "CUSTOM",
                                            "label": "download genomic variants in .pgxseg file format"
                                          }
                                        ],
                                        "$schema": "https://json-schema.org/draft/2020-12/schema",
                                        "additionalProperties": true,
                                        "properties": {
                                          "id": {
                                            "description": "A CURIE identifier, e.g. as `id` for an ontology term.",
                                            "examples": [
                                              "ga4gh:GA.01234abcde",
                                              "DUO:0000004",
                                              "orcid:0000-0003-3463-0775",
                                              "PMID:15254584"
                                            ],
                                            "pattern": "^\\w[^:]+:.+$",
                                            "type": "string"
                                          },
                                          "label": {
                                            "description": "The text that describes the term. By default it could be the preferred text of the term, but is it acceptable to customize it for a clearer description and understanding of the term in an specific context.",
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "id"
                                        ],
                                        "title": "Ontology Term",
                                        "type": "object"
                                      },
                                      "note": {
                                        "description": "An optional text including considerations on the handover link provided.",
                                        "example": "This handover link provides access to a summarized VCF.",
                                        "type": "string"
                                      },
                                      "url": {
                                        "description": "URL endpoint to where the handover process could progress, in RFC3986 format",
                                        "example": "https://api.mygenomeservice.org/Handover/9dcc48d7-fc88-11e8-9110-b0c592dbf8c0/",
                                        "format": "uri",
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "handoverType",
                                      "url"
                                    ],
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "setType": {
                                  "default": "dataset",
                                  "description": "Entry type of resultSet. It SHOULD MATCH an entry type declared as collection in the Beacon configuration.",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "id",
                                "setType",
                                "exists",
                                "resultsCount",
                                "results"
                              ]
                            }
                          },
                          "properties": {
                            "$schema": {
                              "$comment": "TO REVIEW: adding a `format` or `regex` attribute that validates correctly against a file path (relative).",
                              "description": "Refers to the JSON Schema which describes the set of valid attributes for this particular document type. This attribute is mostly used in schemas that should be tested in Beacon implementations.",
                              "type": "string"
                            },
                            "resultSets": {
                              "items": {
                                "additionalProperties": true,
                                "properties": {
                                  "exists": {
                                    "type": "boolean"
                                  },
                                  "id": {
                                    "description": "id of the resultset",
                                    "example": "datasetA",
                                    "type": "string"
                                  },
                                  "info": {
                                    "description": "Additional details that could be of interest about the Resultset. Provided to clearly enclose any attribute that is not part of the Beacon specification.",
                                    "type": "object"
                                  },
                                  "results": {
                                    "items": {
                                      "type": "object"
                                    },
                                    "minItems": 0,
                                    "type": "array"
                                  },
                                  "resultsCount": {
                                    "description": "Number of results in this Resultset.",
                                    "type": "integer"
                                  },
                                  "resultsHandovers": {
                                    "description": "List of handovers that apply to this resultset, not to the whole Beacon or to a result in particular.",
                                    "items": {
                                      "description": "Requested schema to be used for individuals in the response.",
                                      "properties": {
                                        "handoverType": {
                                          "description": "Handover type, as an Ontology_term object with CURIE syntax for the `id` value. Use `CUSTOM` for the `id` when no ontology is available.",
                                          "examples": [
                                            {
                                              "id": "EFO:0004157",
                                              "label": "BAM format"
                                            },
                                            {
                                              "id": "CUSTOM",
                                              "label": "download genomic variants in .pgxseg file format"
                                            }
                                          ],
                                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                                          "additionalProperties": true,
                                          "properties": {
                                            "id": {
                                              "description": "A CURIE identifier, e.g. as `id` for an ontology term.",
                                              "examples": [
                                                "ga4gh:GA.01234abcde",
                                                "DUO:0000004",
                                                "orcid:0000-0003-3463-0775",
                                                "PMID:15254584"
                                              ],
                                              "pattern": "^\\w[^:]+:.+$",
                                              "type": "string"
                                            },
                                            "label": {
                                              "description": "The text that describes the term. By default it could be the preferred text of the term, but is it acceptable to customize it for a clearer description and understanding of the term in an specific context.",
                                              "type": "string"
                                            }
                                          },
                                          "required": [
                                            "id"
                                          ],
                                          "title": "Ontology Term",
                                          "type": "object"
                                        },
                                        "note": {
                                          "description": "An optional text including considerations on the handover link provided.",
                                          "example": "This handover link provides access to a summarized VCF.",
                                          "type": "string"
                                        },
                                        "url": {
                                          "description": "URL endpoint to where the handover process could progress, in RFC3986 format",
                                          "example": "https://api.mygenomeservice.org/Handover/9dcc48d7-fc88-11e8-9110-b0c592dbf8c0/",
                                          "format": "uri",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "handoverType",
                                        "url"
                                      ],
                                      "type": "object"
                                    },
                                    "type": "array"
                                  },
                                  "setType": {
                                    "default": "dataset",
                                    "description": "Entry type of resultSet. It SHOULD MATCH an entry type declared as collection in the Beacon configuration.",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id",
                                  "setType",
                                  "exists",
                                  "resultsCount",
                                  "results"
                                ]
                              },
                              "minItems": 0,
                              "type": "array"
                            }
                          },
                          "required": [
                            "resultSets"
                          ],
                          "title": "Beacon ResultSet",
                          "type": "object"
                        },
                        "responseSummary": {
                          "description": "Response summary, including Boolean and optionally results count.",
                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                          "properties": {
                            "exists": {
                              "description": "Indicator of whether any entry was observed. This should be non-null, unless there was an error, in which case an error response is expected instead of this one.",
                              "examples": [
                                true
                              ],
                              "type": "boolean"
                            },
                            "numTotalResults": {
                              "description": "Total number of results.",
                              "examples": [
                                123
                              ],
                              "minimum": 0,
                              "type": "integer"
                            }
                          },
                          "required": [
                            "exists"
                          ],
                          "type": "object"
                        }
                      },
                      "required": [
                        "meta",
                        "responseSummary",
                        "response"
                      ],
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Successful operation."
          },
          "default": {
            "$schema": "https://json-schema.org/draft/2020-12/schema",
            "additionalProperties": true,
            "description": "An unsuccessful operation.",
            "properties": {
              "error": {
                "description": "Error response",
                "properties": {
                  "errorCode": {
                    "description": "Entry not found",
                    "examples": [
                      "404"
                    ],
                    "format": "int32",
                    "type": "integer"
                  },
                  "errorMessage": {
                    "examples": [
                      "the provided parameters are incomplete. 'xyz' is missing."
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "errorCode"
                ],
                "type": "object"
              },
              "meta": {
                "description": "Information about the response that could be relevant for the Beacon client in order to interpret the results.",
                "$schema": "https://json-schema.org/draft/2020-12/schema",
                "properties": {
                  "apiVersion": {
                    "description": "Version of the Beacon API.",
                    "example": "v2.0",
                    "type": "string"
                  },
                  "beaconId": {
                    "description": "Identifier of the beacon instance.",
                    "example": "org.example.beacon.v2",
                    "type": "string"
                  },
                  "receivedRequestSummary": {
                    "description": "Section of the response that summarize the request received as it has been interpreted by the Beacon server.",
                    "$schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                      "apiVersion": {
                        "description": "API version expected by the client to be supported by the server and used in the response format.",
                        "example": "v2.0",
                        "type": "string"
                      },
                      "filters": {
                        "description": "Filters as submitted in the request.",
                        "example": [
                          "BTO:0000199",
                          "PATO:0000383"
                        ],
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "includeResultsetResponses": {
                        "default": "HIT",
                        "description": "Indicator of whether responses from every Resultset should be included in the response to this request or just the ones with positive, negative results or no details at all. If null (not specified), the default value of 'HIT' is assumed. This parameter allows for returning boolean/counting results although the Beacon instance is capable to return record level details.",
                        "enum": [
                          "ALL",
                          "HIT",
                          "MISS",
                          "NONE"
                        ],
                        "examples": [
                          "ALL",
                          "HIT",
                          "MISS",
                          "NONE"
                        ],
                        "type": "string"
                      },
                      "pagination": {
                        "description": "Pagination as requested for the results.",
                        "properties": {
                          "currentPage": {
                            "description": "Token of the returned page. To be used only in the response to allow the client to check if the returned page is the one requested.",
                            "example": "ab0sc&fe1dd",
                            "type": "string"
                          },
                          "limit": {
                            "default": 10,
                            "description": "Size of the page. Use `0` to return all the results or the maximum allowed by the Beacon, if there is any.",
                            "example": 10,
                            "minimum": 0,
                            "type": "integer"
                          },
                          "nextPage": {
                            "description": "Token of the next page. Used to navigate forward. If empty, it is assumed that no more pages are available",
                            "example": "ab0sc&fe1dd",
                            "type": "string"
                          },
                          "previousPage": {
                            "description": "Token of the previous page. Used to navigate backwards. If empty, it is assumed that the current page is the first one.",
                            "example": "ab0sc&fe1dd",
                            "type": "string"
                          },
                          "skip": {
                            "default": 0,
                            "description": "* In the request: number of pages to skip * In the response: number of pages that has been skipped",
                            "example": 0,
                            "minimum": 0,
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "requestParameters": {
                        "description": "Dictionary of request parameters received in the `RequestBody` or as part of a GET request.",
                        "$schema": "https://json-schema.org/draft/2020-12/schema",
                        "additionalProperties": {
                          "type": "object"
                        },
                        "properties": {
                          "$schema": {
                            "description": "Added here to allow proper validation of the documents.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "requestedGranularity": {
                        "description": "Requested granularity for the response which may differe from the response's actual granularity.",
                        "default": "boolean",
                        "enum": [
                          "boolean",
                          "count",
                          "aggregated",
                          "record"
                        ],
                        "type": "string"
                      },
                      "requestedSchemas": {
                        "$comment": "TODO: Add the format attribute as a uri.",
                        "description": "Set of schemas to be used in the response to a request. `minItems: 0` is used to confirm that an empty array is acceptable here.",
                        "minItems": 0,
                        "items": {
                          "description": "Schema to be used for the requested entry type in the response.",
                          "properties": {
                            "entityType": {
                              "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                              "example": "Individual",
                              "type": "string"
                            },
                            "schema": {
                              "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                              "examples": [
                                "./ga4gh-beacon-dataset-v2.0.0",
                                "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "testMode": {
                        "description": "Used for indicating that a request was received in a test context.",
                        "default": false,
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "apiVersion",
                      "requestedSchemas",
                      "pagination",
                      "requestedGranularity"
                    ],
                    "type": "object"
                  },
                  "returnedGranularity": {
                    "description": "Granularity of the Beacon response. Targeted Beacon could respond or not with the requested granularity. E.g. record level granularity could be requested, but the Beacon could respond only with boolean or count results.",
                    "default": "boolean",
                    "enum": [
                      "boolean",
                      "count",
                      "aggregated",
                      "record"
                    ],
                    "type": "string"
                  },
                  "returnedSchemas": {
                    "description": "Set of schemas to be used in the response to a request.",
                    "items": {
                      "description": "Schema to be used for the requested entry type in the response.",
                      "properties": {
                        "entityType": {
                          "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                          "example": "Individual",
                          "type": "string"
                        },
                        "schema": {
                          "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                          "examples": [
                            "./ga4gh-beacon-dataset-v2.0.0",
                            "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "testMode": {
                    "description": "Used for indicating that a response is returned in a test context. Purposed for compliance testing. Information returned could be fake.",
                    "default": false,
                    "type": "boolean"
                  }
                },
                "required": [
                  "beaconId",
                  "apiVersion",
                  "returnedSchemas",
                  "returnedGranularity",
                  "receivedRequestSummary"
                ],
                "type": "object"
              }
            },
            "required": [
              "meta",
              "error"
            ],
            "type": "object"
          }
        },
        "tags": [
          "GET Endpoints"
        ]
      },
      "post": {
        "description": "Get a list of example entries",
        "operationId": "postExampleEntriesRequest",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$schema": "https://json-schema.org/draft/2020-12/schema",
                "description": "Schema for the Beacon request. It is named `RequestBody` to keep the same nomenclature used by OpenAPI v3, but it actually contains the definition of the whole HTTP POST request payload.",
                "properties": {
                  "$schema": {
                    "$comment": "TO REVIEW: adding a `format` or `regex` attribute that validates correctly against a file path (relative).",
                    "description": "Refers to the JSON Schema which describes the set of valid attributes for this particular document type. This attribute is mostly used in schemas that should be tested in Beacon implementations.",
                    "type": "string"
                  },
                  "meta": {
                    "description": "Information relevant for building the response.",
                    "$schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                      "$schema": {
                        "$comment": "TO REVIEW: adding a `format` or `regex` attribute that validates correctly against a file path (relative).",
                        "description": "Refers to the JSON Schema which describes the set of valid attributes for this particular document type. This attribute is mostly used in schemas that should be tested in Beacon implementations.",
                        "type": "string"
                      },
                      "apiVersion": {
                        "description": "API version expected by the client to be supported by the server and used in the response format.",
                        "example": "v2.0",
                        "type": "string"
                      },
                      "requestedSchemas": {
                        "description": "Set of schemas to be used in the response.",
                        "items": {
                          "description": "Schema to be used for the requested entry type in the response.",
                          "properties": {
                            "entityType": {
                              "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                              "example": "Individual",
                              "type": "string"
                            },
                            "schema": {
                              "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                              "examples": [
                                "./ga4gh-beacon-dataset-v2.0.0",
                                "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "apiVersion"
                    ],
                    "type": "object"
                  },
                  "query": {
                    "description": "Parameters to limit the list of returned results.",
                    "properties": {
                      "filters": {
                        "description": "Ontology based filters. Using CURIE syntax is encouraged.",
                        "$schema": "https://json-schema.org/draft/2020-12/schema",
                        "additionalProperties": true,
                        "definitions": {
                          "AlphanumericFilter": {
                            "description": "Filter results based on operators and values applied to alphanumeric fields.",
                            "properties": {
                              "id": {
                                "description": "Field identfier to be queried.",
                                "example": "age",
                                "type": "string"
                              },
                              "operator": {
                                "default": "=",
                                "description": "Defines how the value relates to the field `id`.",
                                "enum": [
                                  "=",
                                  "<",
                                  ">",
                                  "!",
                                  ">=",
                                  "<="
                                ],
                                "example": ">",
                                "type": "string"
                              },
                              "scope": {
                                "description": "The entry type to which the filter applies",
                                "example": "biosamples",
                                "type": "string"
                              },
                              "value": {
                                "description": "Alphanumeric search term to be used within the query which can contain wildcard characters (%) to denote any number of unknown characters.  Values can be assocatied with units if applicable.",
                                "example": "P70Y",
                                "type": "string"
                              }
                            },
                            "required": [
                              "id",
                              "operator",
                              "value"
                            ],
                            "type": "object"
                          },
                          "CustomFilter": {
                            "description": "Filter results to include records that contain a custom term defined by this Beacon.",
                            "properties": {
                              "id": {
                                "description": "Custom filter terms should contain a unique identifier.",
                                "example": "demographic.ethnicity:asian",
                                "type": "string"
                              },
                              "scope": {
                                "description": "The entry type to which the filter applies",
                                "example": "biosamples",
                                "type": "string"
                              }
                            },
                            "required": [
                              "id"
                            ],
                            "type": "object"
                          },
                          "FilteringTerm": {
                            "anyOf": [
                              {
                                "description": "Filter results to include records that contain a specific ontology term.",
                                "properties": {
                                  "id": {
                                    "description": "Term ID to be queried, using CURIE syntax where possible.",
                                    "example": "HP:0002664",
                                    "type": "string"
                                  },
                                  "includeDescendantTerms": {
                                    "default": true,
                                    "description": "Define if the Beacon should implement the ontology hierarchy, thus query the descendant terms of `id`.",
                                    "type": "boolean"
                                  },
                                  "scope": {
                                    "description": "The entry type to which the filter applies",
                                    "example": "biosamples",
                                    "type": "string"
                                  },
                                  "similarity": {
                                    "default": "exact",
                                    "description": "Allow the Beacon to return results which do not match the filter exactly, but do match to a certain degree of similarity. The Beacon defines the semantic similarity model implemented and how to apply the thresholds of 'high', 'medium' and 'low' similarity.",
                                    "enum": [
                                      "exact",
                                      "high",
                                      "medium",
                                      "low"
                                    ],
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id"
                                ],
                                "type": "object"
                              },
                              {
                                "description": "Filter results based on operators and values applied to alphanumeric fields.",
                                "properties": {
                                  "id": {
                                    "description": "Field identfier to be queried.",
                                    "example": "age",
                                    "type": "string"
                                  },
                                  "operator": {
                                    "default": "=",
                                    "description": "Defines how the value relates to the field `id`.",
                                    "enum": [
                                      "=",
                                      "<",
                                      ">",
                                      "!",
                                      ">=",
                                      "<="
                                    ],
                                    "example": ">",
                                    "type": "string"
                                  },
                                  "scope": {
                                    "description": "The entry type to which the filter applies",
                                    "example": "biosamples",
                                    "type": "string"
                                  },
                                  "value": {
                                    "description": "Alphanumeric search term to be used within the query which can contain wildcard characters (%) to denote any number of unknown characters.  Values can be assocatied with units if applicable.",
                                    "example": "P70Y",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id",
                                  "operator",
                                  "value"
                                ],
                                "type": "object"
                              },
                              {
                                "description": "Filter results to include records that contain a custom term defined by this Beacon.",
                                "properties": {
                                  "id": {
                                    "description": "Custom filter terms should contain a unique identifier.",
                                    "example": "demographic.ethnicity:asian",
                                    "type": "string"
                                  },
                                  "scope": {
                                    "description": "The entry type to which the filter applies",
                                    "example": "biosamples",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id"
                                ],
                                "type": "object"
                              }
                            ]
                          },
                          "OntologyFilter": {
                            "description": "Filter results to include records that contain a specific ontology term.",
                            "properties": {
                              "id": {
                                "description": "Term ID to be queried, using CURIE syntax where possible.",
                                "example": "HP:0002664",
                                "type": "string"
                              },
                              "includeDescendantTerms": {
                                "default": true,
                                "description": "Define if the Beacon should implement the ontology hierarchy, thus query the descendant terms of `id`.",
                                "type": "boolean"
                              },
                              "scope": {
                                "description": "The entry type to which the filter applies",
                                "example": "biosamples",
                                "type": "string"
                              },
                              "similarity": {
                                "default": "exact",
                                "description": "Allow the Beacon to return results which do not match the filter exactly, but do match to a certain degree of similarity. The Beacon defines the semantic similarity model implemented and how to apply the thresholds of 'high', 'medium' and 'low' similarity.",
                                "enum": [
                                  "exact",
                                  "high",
                                  "medium",
                                  "low"
                                ],
                                "type": "string"
                              }
                            },
                            "required": [
                              "id"
                            ],
                            "type": "object"
                          }
                        },
                        "items": {
                          "anyOf": [
                            {
                              "description": "Filter results to include records that contain a specific ontology term.",
                              "properties": {
                                "id": {
                                  "description": "Term ID to be queried, using CURIE syntax where possible.",
                                  "example": "HP:0002664",
                                  "type": "string"
                                },
                                "includeDescendantTerms": {
                                  "default": true,
                                  "description": "Define if the Beacon should implement the ontology hierarchy, thus query the descendant terms of `id`.",
                                  "type": "boolean"
                                },
                                "scope": {
                                  "description": "The entry type to which the filter applies",
                                  "example": "biosamples",
                                  "type": "string"
                                },
                                "similarity": {
                                  "default": "exact",
                                  "description": "Allow the Beacon to return results which do not match the filter exactly, but do match to a certain degree of similarity. The Beacon defines the semantic similarity model implemented and how to apply the thresholds of 'high', 'medium' and 'low' similarity.",
                                  "enum": [
                                    "exact",
                                    "high",
                                    "medium",
                                    "low"
                                  ],
                                  "type": "string"
                                }
                              },
                              "required": [
                                "id"
                              ],
                              "type": "object"
                            },
                            {
                              "description": "Filter results based on operators and values applied to alphanumeric fields.",
                              "properties": {
                                "id": {
                                  "description": "Field identfier to be queried.",
                                  "example": "age",
                                  "type": "string"
                                },
                                "operator": {
                                  "default": "=",
                                  "description": "Defines how the value relates to the field `id`.",
                                  "enum": [
                                    "=",
                                    "<",
                                    ">",
                                    "!",
                                    ">=",
                                    "<="
                                  ],
                                  "example": ">",
                                  "type": "string"
                                },
                                "scope": {
                                  "description": "The entry type to which the filter applies",
                                  "example": "biosamples",
                                  "type": "string"
                                },
                                "value": {
                                  "description": "Alphanumeric search term to be used within the query which can contain wildcard characters (%) to denote any number of unknown characters.  Values can be assocatied with units if applicable.",
                                  "example": "P70Y",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "id",
                                "operator",
                                "value"
                              ],
                              "type": "object"
                            },
                            {
                              "description": "Filter results to include records that contain a custom term defined by this Beacon.",
                              "properties": {
                                "id": {
                                  "description": "Custom filter terms should contain a unique identifier.",
                                  "example": "demographic.ethnicity:asian",
                                  "type": "string"
                                },
                                "scope": {
                                  "description": "The entry type to which the filter applies",
                                  "example": "biosamples",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "id"
                              ],
                              "type": "object"
                            }
                          ]
                        },
                        "title": "Filtering Term Element",
                        "type": "array"
                      },
                      "includeResultsetResponses": {
                        "default": "HIT",
                        "description": "Indicator of whether responses from every Resultset should be included in the response to this request or just the ones with positive, negative results or no details at all. If null (not specified), the default value of 'HIT' is assumed. This parameter allows for returning boolean/counting results although the Beacon instance is capable to return record level details.",
                        "enum": [
                          "ALL",
                          "HIT",
                          "MISS",
                          "NONE"
                        ],
                        "examples": [
                          "ALL",
                          "HIT",
                          "MISS",
                          "NONE"
                        ],
                        "type": "string"
                      },
                      "pagination": {
                        "description": "Pagination parameters applied to response documents, in case of record level granularity.",
                        "properties": {
                          "currentPage": {
                            "description": "Token of the returned page. To be used only in the response to allow the client to check if the returned page is the one requested.",
                            "example": "ab0sc&fe1dd",
                            "type": "string"
                          },
                          "limit": {
                            "default": 10,
                            "description": "Size of the page. Use `0` to return all the results or the maximum allowed by the Beacon, if there is any.",
                            "example": 10,
                            "minimum": 0,
                            "type": "integer"
                          },
                          "nextPage": {
                            "description": "Token of the next page. Used to navigate forward. If empty, it is assumed that no more pages are available",
                            "example": "ab0sc&fe1dd",
                            "type": "string"
                          },
                          "previousPage": {
                            "description": "Token of the previous page. Used to navigate backwards. If empty, it is assumed that the current page is the first one.",
                            "example": "ab0sc&fe1dd",
                            "type": "string"
                          },
                          "skip": {
                            "default": 0,
                            "description": "* In the request: number of pages to skip * In the response: number of pages that has been skipped",
                            "example": 0,
                            "minimum": 0,
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "requestParameters": {
                        "description": "Parameters used for the entry type specific query elements.",
                        "$schema": "https://json-schema.org/draft/2020-12/schema",
                        "additionalProperties": {
                          "type": "object"
                        },
                        "properties": {
                          "$schema": {
                            "description": "Added here to allow proper validation of the documents.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "requestedGranularity": {
                        "description": "Requested granularity for the response. Beacons do not have to respond with the requested granularity, e.g. may respond with count results although record level granularity had been requested but indicate the granularity of the response in the response's metadata.",
                        "default": "boolean",
                        "enum": [
                          "boolean",
                          "count",
                          "aggregated",
                          "record"
                        ],
                        "type": "string"
                      },
                      "testMode": {
                        "description": "Used for indicating that a request or response is done in a test context.",
                        "default": false,
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  }
                },
                "required": [
                  "meta"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$schema": "https://json-schema.org/draft/2020-12/schema",
                      "description": "Complete definition for a minimal response that provides *only* a `Boolean` exists true|false answer.",
                      "properties": {
                        "beaconHandovers": {
                          "description": "List of handovers that apply to the whole response, not to any resultset or result in particular.",
                          "items": {
                            "description": "Requested schema to be used for individuals in the response.",
                            "properties": {
                              "handoverType": {
                                "description": "Handover type, as an Ontology_term object with CURIE syntax for the `id` value. Use `CUSTOM` for the `id` when no ontology is available.",
                                "examples": [
                                  {
                                    "id": "EFO:0004157",
                                    "label": "BAM format"
                                  },
                                  {
                                    "id": "CUSTOM",
                                    "label": "download genomic variants in .pgxseg file format"
                                  }
                                ],
                                "$schema": "https://json-schema.org/draft/2020-12/schema",
                                "additionalProperties": true,
                                "properties": {
                                  "id": {
                                    "description": "A CURIE identifier, e.g. as `id` for an ontology term.",
                                    "examples": [
                                      "ga4gh:GA.01234abcde",
                                      "DUO:0000004",
                                      "orcid:0000-0003-3463-0775",
                                      "PMID:15254584"
                                    ],
                                    "pattern": "^\\w[^:]+:.+$",
                                    "type": "string"
                                  },
                                  "label": {
                                    "description": "The text that describes the term. By default it could be the preferred text of the term, but is it acceptable to customize it for a clearer description and understanding of the term in an specific context.",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id"
                                ],
                                "title": "Ontology Term",
                                "type": "object"
                              },
                              "note": {
                                "description": "An optional text including considerations on the handover link provided.",
                                "example": "This handover link provides access to a summarized VCF.",
                                "type": "string"
                              },
                              "url": {
                                "description": "URL endpoint to where the handover process could progress, in RFC3986 format",
                                "example": "https://api.mygenomeservice.org/Handover/9dcc48d7-fc88-11e8-9110-b0c592dbf8c0/",
                                "format": "uri",
                                "type": "string"
                              }
                            },
                            "required": [
                              "handoverType",
                              "url"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "info": {
                          "description": "Additional details that could be of interest. Provided to clearly enclose any attribute that is not part of the Beacon specification.",
                          "type": "object"
                        },
                        "meta": {
                          "description": "Information about the response that could be relevant for the Beacon client in order to interpret the results.",
                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                          "properties": {
                            "apiVersion": {
                              "description": "Version of the Beacon API.",
                              "example": "v2.0",
                              "type": "string"
                            },
                            "beaconId": {
                              "description": "Identifier of the beacon instance.",
                              "example": "org.example.beacon.v2",
                              "type": "string"
                            },
                            "receivedRequestSummary": {
                              "description": "Section of the response that summarize the request received as it has been interpreted by the Beacon server.",
                              "$schema": "https://json-schema.org/draft/2020-12/schema",
                              "properties": {
                                "apiVersion": {
                                  "description": "API version expected by the client to be supported by the server and used in the response format.",
                                  "example": "v2.0",
                                  "type": "string"
                                },
                                "filters": {
                                  "description": "Filters as submitted in the request.",
                                  "example": [
                                    "BTO:0000199",
                                    "PATO:0000383"
                                  ],
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "includeResultsetResponses": {
                                  "default": "HIT",
                                  "description": "Indicator of whether responses from every Resultset should be included in the response to this request or just the ones with positive, negative results or no details at all. If null (not specified), the default value of 'HIT' is assumed. This parameter allows for returning boolean/counting results although the Beacon instance is capable to return record level details.",
                                  "enum": [
                                    "ALL",
                                    "HIT",
                                    "MISS",
                                    "NONE"
                                  ],
                                  "examples": [
                                    "ALL",
                                    "HIT",
                                    "MISS",
                                    "NONE"
                                  ],
                                  "type": "string"
                                },
                                "pagination": {
                                  "description": "Pagination as requested for the results.",
                                  "properties": {
                                    "currentPage": {
                                      "description": "Token of the returned page. To be used only in the response to allow the client to check if the returned page is the one requested.",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "limit": {
                                      "default": 10,
                                      "description": "Size of the page. Use `0` to return all the results or the maximum allowed by the Beacon, if there is any.",
                                      "example": 10,
                                      "minimum": 0,
                                      "type": "integer"
                                    },
                                    "nextPage": {
                                      "description": "Token of the next page. Used to navigate forward. If empty, it is assumed that no more pages are available",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "previousPage": {
                                      "description": "Token of the previous page. Used to navigate backwards. If empty, it is assumed that the current page is the first one.",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "skip": {
                                      "default": 0,
                                      "description": "* In the request: number of pages to skip * In the response: number of pages that has been skipped",
                                      "example": 0,
                                      "minimum": 0,
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "requestParameters": {
                                  "description": "Dictionary of request parameters received in the `RequestBody` or as part of a GET request.",
                                  "$schema": "https://json-schema.org/draft/2020-12/schema",
                                  "additionalProperties": {
                                    "type": "object"
                                  },
                                  "properties": {
                                    "$schema": {
                                      "description": "Added here to allow proper validation of the documents.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "requestedGranularity": {
                                  "description": "Requested granularity for the response which may differe from the response's actual granularity.",
                                  "default": "boolean",
                                  "enum": [
                                    "boolean",
                                    "count",
                                    "aggregated",
                                    "record"
                                  ],
                                  "type": "string"
                                },
                                "requestedSchemas": {
                                  "$comment": "TODO: Add the format attribute as a uri.",
                                  "description": "Set of schemas to be used in the response to a request. `minItems: 0` is used to confirm that an empty array is acceptable here.",
                                  "minItems": 0,
                                  "items": {
                                    "description": "Schema to be used for the requested entry type in the response.",
                                    "properties": {
                                      "entityType": {
                                        "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                                        "example": "Individual",
                                        "type": "string"
                                      },
                                      "schema": {
                                        "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                                        "examples": [
                                          "./ga4gh-beacon-dataset-v2.0.0",
                                          "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "testMode": {
                                  "description": "Used for indicating that a request was received in a test context.",
                                  "default": false,
                                  "type": "boolean"
                                }
                              },
                              "required": [
                                "apiVersion",
                                "requestedSchemas",
                                "pagination",
                                "requestedGranularity"
                              ],
                              "type": "object"
                            },
                            "returnedGranularity": {
                              "description": "Granularity of the Beacon response. Targeted Beacon could respond or not with the requested granularity. E.g. record level granularity could be requested, but the Beacon could respond only with boolean or count results.",
                              "default": "boolean",
                              "enum": [
                                "boolean",
                                "count",
                                "aggregated",
                                "record"
                              ],
                              "type": "string"
                            },
                            "returnedSchemas": {
                              "description": "Set of schemas to be used in the response to a request.",
                              "items": {
                                "description": "Schema to be used for the requested entry type in the response.",
                                "properties": {
                                  "entityType": {
                                    "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                                    "example": "Individual",
                                    "type": "string"
                                  },
                                  "schema": {
                                    "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                                    "examples": [
                                      "./ga4gh-beacon-dataset-v2.0.0",
                                      "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                                    ],
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "testMode": {
                              "description": "Used for indicating that a response is returned in a test context. Purposed for compliance testing. Information returned could be fake.",
                              "default": false,
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "beaconId",
                            "apiVersion",
                            "returnedSchemas",
                            "returnedGranularity",
                            "receivedRequestSummary"
                          ],
                          "type": "object"
                        },
                        "responseSummary": {
                          "description": "Boolean (true/false) response section.",
                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                          "properties": {
                            "exists": {
                              "description": "Indicator of whether any entry was observed. This should be non-null, unless there was an error, in which case an error response is expected instead of this one.",
                              "examples": [
                                true
                              ],
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "exists"
                          ],
                          "type": "object"
                        }
                      },
                      "required": [
                        "meta",
                        "responseSummary"
                      ],
                      "type": "object"
                    },
                    {
                      "$schema": "https://json-schema.org/draft/2020-12/schema",
                      "description": "Complete definition for a response that does not include record level details but provides `Boolean` and `count` information.",
                      "properties": {
                        "beaconHandovers": {
                          "description": "List of handovers that apply to the whole response, not to any resultset or result in particular.",
                          "items": {
                            "description": "Requested schema to be used for individuals in the response.",
                            "properties": {
                              "handoverType": {
                                "description": "Handover type, as an Ontology_term object with CURIE syntax for the `id` value. Use `CUSTOM` for the `id` when no ontology is available.",
                                "examples": [
                                  {
                                    "id": "EFO:0004157",
                                    "label": "BAM format"
                                  },
                                  {
                                    "id": "CUSTOM",
                                    "label": "download genomic variants in .pgxseg file format"
                                  }
                                ],
                                "$schema": "https://json-schema.org/draft/2020-12/schema",
                                "additionalProperties": true,
                                "properties": {
                                  "id": {
                                    "description": "A CURIE identifier, e.g. as `id` for an ontology term.",
                                    "examples": [
                                      "ga4gh:GA.01234abcde",
                                      "DUO:0000004",
                                      "orcid:0000-0003-3463-0775",
                                      "PMID:15254584"
                                    ],
                                    "pattern": "^\\w[^:]+:.+$",
                                    "type": "string"
                                  },
                                  "label": {
                                    "description": "The text that describes the term. By default it could be the preferred text of the term, but is it acceptable to customize it for a clearer description and understanding of the term in an specific context.",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id"
                                ],
                                "title": "Ontology Term",
                                "type": "object"
                              },
                              "note": {
                                "description": "An optional text including considerations on the handover link provided.",
                                "example": "This handover link provides access to a summarized VCF.",
                                "type": "string"
                              },
                              "url": {
                                "description": "URL endpoint to where the handover process could progress, in RFC3986 format",
                                "example": "https://api.mygenomeservice.org/Handover/9dcc48d7-fc88-11e8-9110-b0c592dbf8c0/",
                                "format": "uri",
                                "type": "string"
                              }
                            },
                            "required": [
                              "handoverType",
                              "url"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "info": {
                          "description": "Additional details that could be of interest. Provided to clearly enclose any attribute that is not part of the Beacon specification.",
                          "type": "object"
                        },
                        "meta": {
                          "description": "Information about the response that could be relevant for the Beacon client in order to interpret the results.",
                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                          "properties": {
                            "apiVersion": {
                              "description": "Version of the Beacon API.",
                              "example": "v2.0",
                              "type": "string"
                            },
                            "beaconId": {
                              "description": "Identifier of the beacon instance.",
                              "example": "org.example.beacon.v2",
                              "type": "string"
                            },
                            "receivedRequestSummary": {
                              "description": "Section of the response that summarize the request received as it has been interpreted by the Beacon server.",
                              "$schema": "https://json-schema.org/draft/2020-12/schema",
                              "properties": {
                                "apiVersion": {
                                  "description": "API version expected by the client to be supported by the server and used in the response format.",
                                  "example": "v2.0",
                                  "type": "string"
                                },
                                "filters": {
                                  "description": "Filters as submitted in the request.",
                                  "example": [
                                    "BTO:0000199",
                                    "PATO:0000383"
                                  ],
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "includeResultsetResponses": {
                                  "default": "HIT",
                                  "description": "Indicator of whether responses from every Resultset should be included in the response to this request or just the ones with positive, negative results or no details at all. If null (not specified), the default value of 'HIT' is assumed. This parameter allows for returning boolean/counting results although the Beacon instance is capable to return record level details.",
                                  "enum": [
                                    "ALL",
                                    "HIT",
                                    "MISS",
                                    "NONE"
                                  ],
                                  "examples": [
                                    "ALL",
                                    "HIT",
                                    "MISS",
                                    "NONE"
                                  ],
                                  "type": "string"
                                },
                                "pagination": {
                                  "description": "Pagination as requested for the results.",
                                  "properties": {
                                    "currentPage": {
                                      "description": "Token of the returned page. To be used only in the response to allow the client to check if the returned page is the one requested.",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "limit": {
                                      "default": 10,
                                      "description": "Size of the page. Use `0` to return all the results or the maximum allowed by the Beacon, if there is any.",
                                      "example": 10,
                                      "minimum": 0,
                                      "type": "integer"
                                    },
                                    "nextPage": {
                                      "description": "Token of the next page. Used to navigate forward. If empty, it is assumed that no more pages are available",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "previousPage": {
                                      "description": "Token of the previous page. Used to navigate backwards. If empty, it is assumed that the current page is the first one.",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "skip": {
                                      "default": 0,
                                      "description": "* In the request: number of pages to skip * In the response: number of pages that has been skipped",
                                      "example": 0,
                                      "minimum": 0,
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "requestParameters": {
                                  "description": "Dictionary of request parameters received in the `RequestBody` or as part of a GET request.",
                                  "$schema": "https://json-schema.org/draft/2020-12/schema",
                                  "additionalProperties": {
                                    "type": "object"
                                  },
                                  "properties": {
                                    "$schema": {
                                      "description": "Added here to allow proper validation of the documents.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "requestedGranularity": {
                                  "description": "Requested granularity for the response which may differe from the response's actual granularity.",
                                  "default": "boolean",
                                  "enum": [
                                    "boolean",
                                    "count",
                                    "aggregated",
                                    "record"
                                  ],
                                  "type": "string"
                                },
                                "requestedSchemas": {
                                  "$comment": "TODO: Add the format attribute as a uri.",
                                  "description": "Set of schemas to be used in the response to a request. `minItems: 0` is used to confirm that an empty array is acceptable here.",
                                  "minItems": 0,
                                  "items": {
                                    "description": "Schema to be used for the requested entry type in the response.",
                                    "properties": {
                                      "entityType": {
                                        "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                                        "example": "Individual",
                                        "type": "string"
                                      },
                                      "schema": {
                                        "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                                        "examples": [
                                          "./ga4gh-beacon-dataset-v2.0.0",
                                          "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "testMode": {
                                  "description": "Used for indicating that a request was received in a test context.",
                                  "default": false,
                                  "type": "boolean"
                                }
                              },
                              "required": [
                                "apiVersion",
                                "requestedSchemas",
                                "pagination",
                                "requestedGranularity"
                              ],
                              "type": "object"
                            },
                            "returnedGranularity": {
                              "description": "Granularity of the Beacon response. Targeted Beacon could respond or not with the requested granularity. E.g. record level granularity could be requested, but the Beacon could respond only with boolean or count results.",
                              "default": "boolean",
                              "enum": [
                                "boolean",
                                "count",
                                "aggregated",
                                "record"
                              ],
                              "type": "string"
                            },
                            "returnedSchemas": {
                              "description": "Set of schemas to be used in the response to a request.",
                              "items": {
                                "description": "Schema to be used for the requested entry type in the response.",
                                "properties": {
                                  "entityType": {
                                    "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                                    "example": "Individual",
                                    "type": "string"
                                  },
                                  "schema": {
                                    "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                                    "examples": [
                                      "./ga4gh-beacon-dataset-v2.0.0",
                                      "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                                    ],
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "testMode": {
                              "description": "Used for indicating that a response is returned in a test context. Purposed for compliance testing. Information returned could be fake.",
                              "default": false,
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "beaconId",
                            "apiVersion",
                            "returnedSchemas",
                            "returnedGranularity",
                            "receivedRequestSummary"
                          ],
                          "type": "object"
                        },
                        "responseSummary": {
                          "description": "Response summary, including Boolean and optionally results count.",
                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                          "properties": {
                            "exists": {
                              "description": "Indicator of whether any entry was observed. This should be non-null, unless there was an error, in which case a `beaconErrorResponse` is expected instead of this one.",
                              "examples": [
                                true
                              ],
                              "type": "boolean"
                            },
                            "numTotalResults": {
                              "description": "Total number of results.",
                              "examples": [
                                123
                              ],
                              "minimum": 0,
                              "type": "integer"
                            }
                          },
                          "required": [
                            "exists",
                            "numTotalResults"
                          ],
                          "type": "object"
                        }
                      },
                      "required": [
                        "meta",
                        "responseSummary"
                      ],
                      "type": "object"
                    },
                    {
                      "$schema": "https://json-schema.org/draft/2020-12/schema",
                      "additionalProperties": true,
                      "description": "Beacon response that includes record level details, grouped in Resultsets.",
                      "properties": {
                        "beaconHandovers": {
                          "description": "List of handovers that apply to the whole response, not to any resultset or result in particular.",
                          "items": {
                            "description": "Requested schema to be used for individuals in the response.",
                            "properties": {
                              "handoverType": {
                                "description": "Handover type, as an Ontology_term object with CURIE syntax for the `id` value. Use `CUSTOM` for the `id` when no ontology is available.",
                                "examples": [
                                  {
                                    "id": "EFO:0004157",
                                    "label": "BAM format"
                                  },
                                  {
                                    "id": "CUSTOM",
                                    "label": "download genomic variants in .pgxseg file format"
                                  }
                                ],
                                "$schema": "https://json-schema.org/draft/2020-12/schema",
                                "additionalProperties": true,
                                "properties": {
                                  "id": {
                                    "description": "A CURIE identifier, e.g. as `id` for an ontology term.",
                                    "examples": [
                                      "ga4gh:GA.01234abcde",
                                      "DUO:0000004",
                                      "orcid:0000-0003-3463-0775",
                                      "PMID:15254584"
                                    ],
                                    "pattern": "^\\w[^:]+:.+$",
                                    "type": "string"
                                  },
                                  "label": {
                                    "description": "The text that describes the term. By default it could be the preferred text of the term, but is it acceptable to customize it for a clearer description and understanding of the term in an specific context.",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id"
                                ],
                                "title": "Ontology Term",
                                "type": "object"
                              },
                              "note": {
                                "description": "An optional text including considerations on the handover link provided.",
                                "example": "This handover link provides access to a summarized VCF.",
                                "type": "string"
                              },
                              "url": {
                                "description": "URL endpoint to where the handover process could progress, in RFC3986 format",
                                "example": "https://api.mygenomeservice.org/Handover/9dcc48d7-fc88-11e8-9110-b0c592dbf8c0/",
                                "format": "uri",
                                "type": "string"
                              }
                            },
                            "required": [
                              "handoverType",
                              "url"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "info": {
                          "description": "Additional details that could be of interest. Provided to clearly enclose any attribute that is not part of the Beacon specification.",
                          "type": "object"
                        },
                        "meta": {
                          "description": "Information about the response that could be relevant for the Beacon client in order to interpret the results.",
                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                          "properties": {
                            "apiVersion": {
                              "description": "Version of the Beacon API.",
                              "example": "v2.0",
                              "type": "string"
                            },
                            "beaconId": {
                              "description": "Identifier of the beacon instance.",
                              "example": "org.example.beacon.v2",
                              "type": "string"
                            },
                            "receivedRequestSummary": {
                              "description": "Section of the response that summarize the request received as it has been interpreted by the Beacon server.",
                              "$schema": "https://json-schema.org/draft/2020-12/schema",
                              "properties": {
                                "apiVersion": {
                                  "description": "API version expected by the client to be supported by the server and used in the response format.",
                                  "example": "v2.0",
                                  "type": "string"
                                },
                                "filters": {
                                  "description": "Filters as submitted in the request.",
                                  "example": [
                                    "BTO:0000199",
                                    "PATO:0000383"
                                  ],
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "includeResultsetResponses": {
                                  "default": "HIT",
                                  "description": "Indicator of whether responses from every Resultset should be included in the response to this request or just the ones with positive, negative results or no details at all. If null (not specified), the default value of 'HIT' is assumed. This parameter allows for returning boolean/counting results although the Beacon instance is capable to return record level details.",
                                  "enum": [
                                    "ALL",
                                    "HIT",
                                    "MISS",
                                    "NONE"
                                  ],
                                  "examples": [
                                    "ALL",
                                    "HIT",
                                    "MISS",
                                    "NONE"
                                  ],
                                  "type": "string"
                                },
                                "pagination": {
                                  "description": "Pagination as requested for the results.",
                                  "properties": {
                                    "currentPage": {
                                      "description": "Token of the returned page. To be used only in the response to allow the client to check if the returned page is the one requested.",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "limit": {
                                      "default": 10,
                                      "description": "Size of the page. Use `0` to return all the results or the maximum allowed by the Beacon, if there is any.",
                                      "example": 10,
                                      "minimum": 0,
                                      "type": "integer"
                                    },
                                    "nextPage": {
                                      "description": "Token of the next page. Used to navigate forward. If empty, it is assumed that no more pages are available",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "previousPage": {
                                      "description": "Token of the previous page. Used to navigate backwards. If empty, it is assumed that the current page is the first one.",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "skip": {
                                      "default": 0,
                                      "description": "* In the request: number of pages to skip * In the response: number of pages that has been skipped",
                                      "example": 0,
                                      "minimum": 0,
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "requestParameters": {
                                  "description": "Dictionary of request parameters received in the `RequestBody` or as part of a GET request.",
                                  "$schema": "https://json-schema.org/draft/2020-12/schema",
                                  "additionalProperties": {
                                    "type": "object"
                                  },
                                  "properties": {
                                    "$schema": {
                                      "description": "Added here to allow proper validation of the documents.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "requestedGranularity": {
                                  "description": "Requested granularity for the response which may differe from the response's actual granularity.",
                                  "default": "boolean",
                                  "enum": [
                                    "boolean",
                                    "count",
                                    "aggregated",
                                    "record"
                                  ],
                                  "type": "string"
                                },
                                "requestedSchemas": {
                                  "$comment": "TODO: Add the format attribute as a uri.",
                                  "description": "Set of schemas to be used in the response to a request. `minItems: 0` is used to confirm that an empty array is acceptable here.",
                                  "minItems": 0,
                                  "items": {
                                    "description": "Schema to be used for the requested entry type in the response.",
                                    "properties": {
                                      "entityType": {
                                        "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                                        "example": "Individual",
                                        "type": "string"
                                      },
                                      "schema": {
                                        "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                                        "examples": [
                                          "./ga4gh-beacon-dataset-v2.0.0",
                                          "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "testMode": {
                                  "description": "Used for indicating that a request was received in a test context.",
                                  "default": false,
                                  "type": "boolean"
                                }
                              },
                              "required": [
                                "apiVersion",
                                "requestedSchemas",
                                "pagination",
                                "requestedGranularity"
                              ],
                              "type": "object"
                            },
                            "returnedGranularity": {
                              "description": "Granularity of the Beacon response. Targeted Beacon could respond or not with the requested granularity. E.g. record level granularity could be requested, but the Beacon could respond only with boolean or count results.",
                              "default": "boolean",
                              "enum": [
                                "boolean",
                                "count",
                                "aggregated",
                                "record"
                              ],
                              "type": "string"
                            },
                            "returnedSchemas": {
                              "description": "Set of schemas to be used in the response to a request.",
                              "items": {
                                "description": "Schema to be used for the requested entry type in the response.",
                                "properties": {
                                  "entityType": {
                                    "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                                    "example": "Individual",
                                    "type": "string"
                                  },
                                  "schema": {
                                    "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                                    "examples": [
                                      "./ga4gh-beacon-dataset-v2.0.0",
                                      "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                                    ],
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "testMode": {
                              "description": "Used for indicating that a response is returned in a test context. Purposed for compliance testing. Information returned could be fake.",
                              "default": false,
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "beaconId",
                            "apiVersion",
                            "returnedSchemas",
                            "returnedGranularity",
                            "receivedRequestSummary"
                          ],
                          "type": "object"
                        },
                        "response": {
                          "description": "Response for queries that recovers any result.",
                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                          "additionalProperties": true,
                          "definitions": {
                            "ResultsetInstance": {
                              "additionalProperties": true,
                              "properties": {
                                "exists": {
                                  "type": "boolean"
                                },
                                "id": {
                                  "description": "id of the resultset",
                                  "example": "datasetA",
                                  "type": "string"
                                },
                                "info": {
                                  "description": "Additional details that could be of interest about the Resultset. Provided to clearly enclose any attribute that is not part of the Beacon specification.",
                                  "type": "object"
                                },
                                "results": {
                                  "items": {
                                    "type": "object"
                                  },
                                  "minItems": 0,
                                  "type": "array"
                                },
                                "resultsCount": {
                                  "description": "Number of results in this Resultset.",
                                  "type": "integer"
                                },
                                "resultsHandovers": {
                                  "description": "List of handovers that apply to this resultset, not to the whole Beacon or to a result in particular.",
                                  "items": {
                                    "description": "Requested schema to be used for individuals in the response.",
                                    "properties": {
                                      "handoverType": {
                                        "description": "Handover type, as an Ontology_term object with CURIE syntax for the `id` value. Use `CUSTOM` for the `id` when no ontology is available.",
                                        "examples": [
                                          {
                                            "id": "EFO:0004157",
                                            "label": "BAM format"
                                          },
                                          {
                                            "id": "CUSTOM",
                                            "label": "download genomic variants in .pgxseg file format"
                                          }
                                        ],
                                        "$schema": "https://json-schema.org/draft/2020-12/schema",
                                        "additionalProperties": true,
                                        "properties": {
                                          "id": {
                                            "description": "A CURIE identifier, e.g. as `id` for an ontology term.",
                                            "examples": [
                                              "ga4gh:GA.01234abcde",
                                              "DUO:0000004",
                                              "orcid:0000-0003-3463-0775",
                                              "PMID:15254584"
                                            ],
                                            "pattern": "^\\w[^:]+:.+$",
                                            "type": "string"
                                          },
                                          "label": {
                                            "description": "The text that describes the term. By default it could be the preferred text of the term, but is it acceptable to customize it for a clearer description and understanding of the term in an specific context.",
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "id"
                                        ],
                                        "title": "Ontology Term",
                                        "type": "object"
                                      },
                                      "note": {
                                        "description": "An optional text including considerations on the handover link provided.",
                                        "example": "This handover link provides access to a summarized VCF.",
                                        "type": "string"
                                      },
                                      "url": {
                                        "description": "URL endpoint to where the handover process could progress, in RFC3986 format",
                                        "example": "https://api.mygenomeservice.org/Handover/9dcc48d7-fc88-11e8-9110-b0c592dbf8c0/",
                                        "format": "uri",
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "handoverType",
                                      "url"
                                    ],
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "setType": {
                                  "default": "dataset",
                                  "description": "Entry type of resultSet. It SHOULD MATCH an entry type declared as collection in the Beacon configuration.",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "id",
                                "setType",
                                "exists",
                                "resultsCount",
                                "results"
                              ]
                            }
                          },
                          "properties": {
                            "$schema": {
                              "$comment": "TO REVIEW: adding a `format` or `regex` attribute that validates correctly against a file path (relative).",
                              "description": "Refers to the JSON Schema which describes the set of valid attributes for this particular document type. This attribute is mostly used in schemas that should be tested in Beacon implementations.",
                              "type": "string"
                            },
                            "resultSets": {
                              "items": {
                                "additionalProperties": true,
                                "properties": {
                                  "exists": {
                                    "type": "boolean"
                                  },
                                  "id": {
                                    "description": "id of the resultset",
                                    "example": "datasetA",
                                    "type": "string"
                                  },
                                  "info": {
                                    "description": "Additional details that could be of interest about the Resultset. Provided to clearly enclose any attribute that is not part of the Beacon specification.",
                                    "type": "object"
                                  },
                                  "results": {
                                    "items": {
                                      "type": "object"
                                    },
                                    "minItems": 0,
                                    "type": "array"
                                  },
                                  "resultsCount": {
                                    "description": "Number of results in this Resultset.",
                                    "type": "integer"
                                  },
                                  "resultsHandovers": {
                                    "description": "List of handovers that apply to this resultset, not to the whole Beacon or to a result in particular.",
                                    "items": {
                                      "description": "Requested schema to be used for individuals in the response.",
                                      "properties": {
                                        "handoverType": {
                                          "description": "Handover type, as an Ontology_term object with CURIE syntax for the `id` value. Use `CUSTOM` for the `id` when no ontology is available.",
                                          "examples": [
                                            {
                                              "id": "EFO:0004157",
                                              "label": "BAM format"
                                            },
                                            {
                                              "id": "CUSTOM",
                                              "label": "download genomic variants in .pgxseg file format"
                                            }
                                          ],
                                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                                          "additionalProperties": true,
                                          "properties": {
                                            "id": {
                                              "description": "A CURIE identifier, e.g. as `id` for an ontology term.",
                                              "examples": [
                                                "ga4gh:GA.01234abcde",
                                                "DUO:0000004",
                                                "orcid:0000-0003-3463-0775",
                                                "PMID:15254584"
                                              ],
                                              "pattern": "^\\w[^:]+:.+$",
                                              "type": "string"
                                            },
                                            "label": {
                                              "description": "The text that describes the term. By default it could be the preferred text of the term, but is it acceptable to customize it for a clearer description and understanding of the term in an specific context.",
                                              "type": "string"
                                            }
                                          },
                                          "required": [
                                            "id"
                                          ],
                                          "title": "Ontology Term",
                                          "type": "object"
                                        },
                                        "note": {
                                          "description": "An optional text including considerations on the handover link provided.",
                                          "example": "This handover link provides access to a summarized VCF.",
                                          "type": "string"
                                        },
                                        "url": {
                                          "description": "URL endpoint to where the handover process could progress, in RFC3986 format",
                                          "example": "https://api.mygenomeservice.org/Handover/9dcc48d7-fc88-11e8-9110-b0c592dbf8c0/",
                                          "format": "uri",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "handoverType",
                                        "url"
                                      ],
                                      "type": "object"
                                    },
                                    "type": "array"
                                  },
                                  "setType": {
                                    "default": "dataset",
                                    "description": "Entry type of resultSet. It SHOULD MATCH an entry type declared as collection in the Beacon configuration.",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id",
                                  "setType",
                                  "exists",
                                  "resultsCount",
                                  "results"
                                ]
                              },
                              "minItems": 0,
                              "type": "array"
                            }
                          },
                          "required": [
                            "resultSets"
                          ],
                          "title": "Beacon ResultSet",
                          "type": "object"
                        },
                        "responseSummary": {
                          "description": "Response summary, including Boolean and optionally results count.",
                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                          "properties": {
                            "exists": {
                              "description": "Indicator of whether any entry was observed. This should be non-null, unless there was an error, in which case an error response is expected instead of this one.",
                              "examples": [
                                true
                              ],
                              "type": "boolean"
                            },
                            "numTotalResults": {
                              "description": "Total number of results.",
                              "examples": [
                                123
                              ],
                              "minimum": 0,
                              "type": "integer"
                            }
                          },
                          "required": [
                            "exists"
                          ],
                          "type": "object"
                        }
                      },
                      "required": [
                        "meta",
                        "responseSummary",
                        "response"
                      ],
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Successful operation."
          },
          "default": {
            "description": "An unsuccessful operation",
            "$schema": "https://json-schema.org/draft/2020-12/schema",
            "additionalProperties": true,
            "properties": {
              "error": {
                "description": "Error response",
                "properties": {
                  "errorCode": {
                    "description": "Entry not found",
                    "examples": [
                      "404"
                    ],
                    "format": "int32",
                    "type": "integer"
                  },
                  "errorMessage": {
                    "examples": [
                      "the provided parameters are incomplete. 'xyz' is missing."
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "errorCode"
                ],
                "type": "object"
              },
              "meta": {
                "description": "Information about the response that could be relevant for the Beacon client in order to interpret the results.",
                "$schema": "https://json-schema.org/draft/2020-12/schema",
                "properties": {
                  "apiVersion": {
                    "description": "Version of the Beacon API.",
                    "example": "v2.0",
                    "type": "string"
                  },
                  "beaconId": {
                    "description": "Identifier of the beacon instance.",
                    "example": "org.example.beacon.v2",
                    "type": "string"
                  },
                  "receivedRequestSummary": {
                    "description": "Section of the response that summarize the request received as it has been interpreted by the Beacon server.",
                    "$schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                      "apiVersion": {
                        "description": "API version expected by the client to be supported by the server and used in the response format.",
                        "example": "v2.0",
                        "type": "string"
                      },
                      "filters": {
                        "description": "Filters as submitted in the request.",
                        "example": [
                          "BTO:0000199",
                          "PATO:0000383"
                        ],
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "includeResultsetResponses": {
                        "default": "HIT",
                        "description": "Indicator of whether responses from every Resultset should be included in the response to this request or just the ones with positive, negative results or no details at all. If null (not specified), the default value of 'HIT' is assumed. This parameter allows for returning boolean/counting results although the Beacon instance is capable to return record level details.",
                        "enum": [
                          "ALL",
                          "HIT",
                          "MISS",
                          "NONE"
                        ],
                        "examples": [
                          "ALL",
                          "HIT",
                          "MISS",
                          "NONE"
                        ],
                        "type": "string"
                      },
                      "pagination": {
                        "description": "Pagination as requested for the results.",
                        "properties": {
                          "currentPage": {
                            "description": "Token of the returned page. To be used only in the response to allow the client to check if the returned page is the one requested.",
                            "example": "ab0sc&fe1dd",
                            "type": "string"
                          },
                          "limit": {
                            "default": 10,
                            "description": "Size of the page. Use `0` to return all the results or the maximum allowed by the Beacon, if there is any.",
                            "example": 10,
                            "minimum": 0,
                            "type": "integer"
                          },
                          "nextPage": {
                            "description": "Token of the next page. Used to navigate forward. If empty, it is assumed that no more pages are available",
                            "example": "ab0sc&fe1dd",
                            "type": "string"
                          },
                          "previousPage": {
                            "description": "Token of the previous page. Used to navigate backwards. If empty, it is assumed that the current page is the first one.",
                            "example": "ab0sc&fe1dd",
                            "type": "string"
                          },
                          "skip": {
                            "default": 0,
                            "description": "* In the request: number of pages to skip * In the response: number of pages that has been skipped",
                            "example": 0,
                            "minimum": 0,
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "requestParameters": {
                        "description": "Dictionary of request parameters received in the `RequestBody` or as part of a GET request.",
                        "$schema": "https://json-schema.org/draft/2020-12/schema",
                        "additionalProperties": {
                          "type": "object"
                        },
                        "properties": {
                          "$schema": {
                            "description": "Added here to allow proper validation of the documents.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "requestedGranularity": {
                        "description": "Requested granularity for the response which may differe from the response's actual granularity.",
                        "default": "boolean",
                        "enum": [
                          "boolean",
                          "count",
                          "aggregated",
                          "record"
                        ],
                        "type": "string"
                      },
                      "requestedSchemas": {
                        "$comment": "TODO: Add the format attribute as a uri.",
                        "description": "Set of schemas to be used in the response to a request. `minItems: 0` is used to confirm that an empty array is acceptable here.",
                        "minItems": 0,
                        "items": {
                          "description": "Schema to be used for the requested entry type in the response.",
                          "properties": {
                            "entityType": {
                              "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                              "example": "Individual",
                              "type": "string"
                            },
                            "schema": {
                              "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                              "examples": [
                                "./ga4gh-beacon-dataset-v2.0.0",
                                "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "testMode": {
                        "description": "Used for indicating that a request was received in a test context.",
                        "default": false,
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "apiVersion",
                      "requestedSchemas",
                      "pagination",
                      "requestedGranularity"
                    ],
                    "type": "object"
                  },
                  "returnedGranularity": {
                    "description": "Granularity of the Beacon response. Targeted Beacon could respond or not with the requested granularity. E.g. record level granularity could be requested, but the Beacon could respond only with boolean or count results.",
                    "default": "boolean",
                    "enum": [
                      "boolean",
                      "count",
                      "aggregated",
                      "record"
                    ],
                    "type": "string"
                  },
                  "returnedSchemas": {
                    "description": "Set of schemas to be used in the response to a request.",
                    "items": {
                      "description": "Schema to be used for the requested entry type in the response.",
                      "properties": {
                        "entityType": {
                          "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                          "example": "Individual",
                          "type": "string"
                        },
                        "schema": {
                          "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                          "examples": [
                            "./ga4gh-beacon-dataset-v2.0.0",
                            "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "testMode": {
                    "description": "Used for indicating that a response is returned in a test context. Purposed for compliance testing. Information returned could be fake.",
                    "default": false,
                    "type": "boolean"
                  }
                },
                "required": [
                  "beaconId",
                  "apiVersion",
                  "returnedSchemas",
                  "returnedGranularity",
                  "receivedRequestSummary"
                ],
                "type": "object"
              }
            },
            "required": [
              "meta",
              "error"
            ],
            "type": "object"
          }
        },
        "tags": [
          "POST Endpoints"
        ]
      }
    },
    "/g_variants/{id}": {
      "get": {
        "description": "Get details about one genomic variation, identified by its (unique) 'id'",
        "operationId": "getOneGenomicVariation",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$schema": "https://json-schema.org/draft/2020-12/schema",
                      "description": "Complete definition for a minimal response that provides *only* a `Boolean` exists true|false answer.",
                      "properties": {
                        "beaconHandovers": {
                          "description": "List of handovers that apply to the whole response, not to any resultset or result in particular.",
                          "items": {
                            "description": "Requested schema to be used for individuals in the response.",
                            "properties": {
                              "handoverType": {
                                "description": "Handover type, as an Ontology_term object with CURIE syntax for the `id` value. Use `CUSTOM` for the `id` when no ontology is available.",
                                "examples": [
                                  {
                                    "id": "EFO:0004157",
                                    "label": "BAM format"
                                  },
                                  {
                                    "id": "CUSTOM",
                                    "label": "download genomic variants in .pgxseg file format"
                                  }
                                ],
                                "$schema": "https://json-schema.org/draft/2020-12/schema",
                                "additionalProperties": true,
                                "properties": {
                                  "id": {
                                    "description": "A CURIE identifier, e.g. as `id` for an ontology term.",
                                    "examples": [
                                      "ga4gh:GA.01234abcde",
                                      "DUO:0000004",
                                      "orcid:0000-0003-3463-0775",
                                      "PMID:15254584"
                                    ],
                                    "pattern": "^\\w[^:]+:.+$",
                                    "type": "string"
                                  },
                                  "label": {
                                    "description": "The text that describes the term. By default it could be the preferred text of the term, but is it acceptable to customize it for a clearer description and understanding of the term in an specific context.",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id"
                                ],
                                "title": "Ontology Term",
                                "type": "object"
                              },
                              "note": {
                                "description": "An optional text including considerations on the handover link provided.",
                                "example": "This handover link provides access to a summarized VCF.",
                                "type": "string"
                              },
                              "url": {
                                "description": "URL endpoint to where the handover process could progress, in RFC3986 format",
                                "example": "https://api.mygenomeservice.org/Handover/9dcc48d7-fc88-11e8-9110-b0c592dbf8c0/",
                                "format": "uri",
                                "type": "string"
                              }
                            },
                            "required": [
                              "handoverType",
                              "url"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "info": {
                          "description": "Additional details that could be of interest. Provided to clearly enclose any attribute that is not part of the Beacon specification.",
                          "type": "object"
                        },
                        "meta": {
                          "description": "Information about the response that could be relevant for the Beacon client in order to interpret the results.",
                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                          "properties": {
                            "apiVersion": {
                              "description": "Version of the Beacon API.",
                              "example": "v2.0",
                              "type": "string"
                            },
                            "beaconId": {
                              "description": "Identifier of the beacon instance.",
                              "example": "org.example.beacon.v2",
                              "type": "string"
                            },
                            "receivedRequestSummary": {
                              "description": "Section of the response that summarize the request received as it has been interpreted by the Beacon server.",
                              "$schema": "https://json-schema.org/draft/2020-12/schema",
                              "properties": {
                                "apiVersion": {
                                  "description": "API version expected by the client to be supported by the server and used in the response format.",
                                  "example": "v2.0",
                                  "type": "string"
                                },
                                "filters": {
                                  "description": "Filters as submitted in the request.",
                                  "example": [
                                    "BTO:0000199",
                                    "PATO:0000383"
                                  ],
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "includeResultsetResponses": {
                                  "default": "HIT",
                                  "description": "Indicator of whether responses from every Resultset should be included in the response to this request or just the ones with positive, negative results or no details at all. If null (not specified), the default value of 'HIT' is assumed. This parameter allows for returning boolean/counting results although the Beacon instance is capable to return record level details.",
                                  "enum": [
                                    "ALL",
                                    "HIT",
                                    "MISS",
                                    "NONE"
                                  ],
                                  "examples": [
                                    "ALL",
                                    "HIT",
                                    "MISS",
                                    "NONE"
                                  ],
                                  "type": "string"
                                },
                                "pagination": {
                                  "description": "Pagination as requested for the results.",
                                  "properties": {
                                    "currentPage": {
                                      "description": "Token of the returned page. To be used only in the response to allow the client to check if the returned page is the one requested.",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "limit": {
                                      "default": 10,
                                      "description": "Size of the page. Use `0` to return all the results or the maximum allowed by the Beacon, if there is any.",
                                      "example": 10,
                                      "minimum": 0,
                                      "type": "integer"
                                    },
                                    "nextPage": {
                                      "description": "Token of the next page. Used to navigate forward. If empty, it is assumed that no more pages are available",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "previousPage": {
                                      "description": "Token of the previous page. Used to navigate backwards. If empty, it is assumed that the current page is the first one.",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "skip": {
                                      "default": 0,
                                      "description": "* In the request: number of pages to skip * In the response: number of pages that has been skipped",
                                      "example": 0,
                                      "minimum": 0,
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "requestParameters": {
                                  "description": "Dictionary of request parameters received in the `RequestBody` or as part of a GET request.",
                                  "$schema": "https://json-schema.org/draft/2020-12/schema",
                                  "additionalProperties": {
                                    "type": "object"
                                  },
                                  "properties": {
                                    "$schema": {
                                      "description": "Added here to allow proper validation of the documents.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "requestedGranularity": {
                                  "description": "Requested granularity for the response which may differe from the response's actual granularity.",
                                  "default": "boolean",
                                  "enum": [
                                    "boolean",
                                    "count",
                                    "aggregated",
                                    "record"
                                  ],
                                  "type": "string"
                                },
                                "requestedSchemas": {
                                  "$comment": "TODO: Add the format attribute as a uri.",
                                  "description": "Set of schemas to be used in the response to a request. `minItems: 0` is used to confirm that an empty array is acceptable here.",
                                  "minItems": 0,
                                  "items": {
                                    "description": "Schema to be used for the requested entry type in the response.",
                                    "properties": {
                                      "entityType": {
                                        "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                                        "example": "Individual",
                                        "type": "string"
                                      },
                                      "schema": {
                                        "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                                        "examples": [
                                          "./ga4gh-beacon-dataset-v2.0.0",
                                          "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "testMode": {
                                  "description": "Used for indicating that a request was received in a test context.",
                                  "default": false,
                                  "type": "boolean"
                                }
                              },
                              "required": [
                                "apiVersion",
                                "requestedSchemas",
                                "pagination",
                                "requestedGranularity"
                              ],
                              "type": "object"
                            },
                            "returnedGranularity": {
                              "description": "Granularity of the Beacon response. Targeted Beacon could respond or not with the requested granularity. E.g. record level granularity could be requested, but the Beacon could respond only with boolean or count results.",
                              "default": "boolean",
                              "enum": [
                                "boolean",
                                "count",
                                "aggregated",
                                "record"
                              ],
                              "type": "string"
                            },
                            "returnedSchemas": {
                              "description": "Set of schemas to be used in the response to a request.",
                              "items": {
                                "description": "Schema to be used for the requested entry type in the response.",
                                "properties": {
                                  "entityType": {
                                    "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                                    "example": "Individual",
                                    "type": "string"
                                  },
                                  "schema": {
                                    "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                                    "examples": [
                                      "./ga4gh-beacon-dataset-v2.0.0",
                                      "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                                    ],
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "testMode": {
                              "description": "Used for indicating that a response is returned in a test context. Purposed for compliance testing. Information returned could be fake.",
                              "default": false,
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "beaconId",
                            "apiVersion",
                            "returnedSchemas",
                            "returnedGranularity",
                            "receivedRequestSummary"
                          ],
                          "type": "object"
                        },
                        "responseSummary": {
                          "description": "Boolean (true/false) response section.",
                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                          "properties": {
                            "exists": {
                              "description": "Indicator of whether any entry was observed. This should be non-null, unless there was an error, in which case an error response is expected instead of this one.",
                              "examples": [
                                true
                              ],
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "exists"
                          ],
                          "type": "object"
                        }
                      },
                      "required": [
                        "meta",
                        "responseSummary"
                      ],
                      "type": "object"
                    },
                    {
                      "$schema": "https://json-schema.org/draft/2020-12/schema",
                      "description": "Complete definition for a response that does not include record level details but provides `Boolean` and `count` information.",
                      "properties": {
                        "beaconHandovers": {
                          "description": "List of handovers that apply to the whole response, not to any resultset or result in particular.",
                          "items": {
                            "description": "Requested schema to be used for individuals in the response.",
                            "properties": {
                              "handoverType": {
                                "description": "Handover type, as an Ontology_term object with CURIE syntax for the `id` value. Use `CUSTOM` for the `id` when no ontology is available.",
                                "examples": [
                                  {
                                    "id": "EFO:0004157",
                                    "label": "BAM format"
                                  },
                                  {
                                    "id": "CUSTOM",
                                    "label": "download genomic variants in .pgxseg file format"
                                  }
                                ],
                                "$schema": "https://json-schema.org/draft/2020-12/schema",
                                "additionalProperties": true,
                                "properties": {
                                  "id": {
                                    "description": "A CURIE identifier, e.g. as `id` for an ontology term.",
                                    "examples": [
                                      "ga4gh:GA.01234abcde",
                                      "DUO:0000004",
                                      "orcid:0000-0003-3463-0775",
                                      "PMID:15254584"
                                    ],
                                    "pattern": "^\\w[^:]+:.+$",
                                    "type": "string"
                                  },
                                  "label": {
                                    "description": "The text that describes the term. By default it could be the preferred text of the term, but is it acceptable to customize it for a clearer description and understanding of the term in an specific context.",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id"
                                ],
                                "title": "Ontology Term",
                                "type": "object"
                              },
                              "note": {
                                "description": "An optional text including considerations on the handover link provided.",
                                "example": "This handover link provides access to a summarized VCF.",
                                "type": "string"
                              },
                              "url": {
                                "description": "URL endpoint to where the handover process could progress, in RFC3986 format",
                                "example": "https://api.mygenomeservice.org/Handover/9dcc48d7-fc88-11e8-9110-b0c592dbf8c0/",
                                "format": "uri",
                                "type": "string"
                              }
                            },
                            "required": [
                              "handoverType",
                              "url"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "info": {
                          "description": "Additional details that could be of interest. Provided to clearly enclose any attribute that is not part of the Beacon specification.",
                          "type": "object"
                        },
                        "meta": {
                          "description": "Information about the response that could be relevant for the Beacon client in order to interpret the results.",
                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                          "properties": {
                            "apiVersion": {
                              "description": "Version of the Beacon API.",
                              "example": "v2.0",
                              "type": "string"
                            },
                            "beaconId": {
                              "description": "Identifier of the beacon instance.",
                              "example": "org.example.beacon.v2",
                              "type": "string"
                            },
                            "receivedRequestSummary": {
                              "description": "Section of the response that summarize the request received as it has been interpreted by the Beacon server.",
                              "$schema": "https://json-schema.org/draft/2020-12/schema",
                              "properties": {
                                "apiVersion": {
                                  "description": "API version expected by the client to be supported by the server and used in the response format.",
                                  "example": "v2.0",
                                  "type": "string"
                                },
                                "filters": {
                                  "description": "Filters as submitted in the request.",
                                  "example": [
                                    "BTO:0000199",
                                    "PATO:0000383"
                                  ],
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "includeResultsetResponses": {
                                  "default": "HIT",
                                  "description": "Indicator of whether responses from every Resultset should be included in the response to this request or just the ones with positive, negative results or no details at all. If null (not specified), the default value of 'HIT' is assumed. This parameter allows for returning boolean/counting results although the Beacon instance is capable to return record level details.",
                                  "enum": [
                                    "ALL",
                                    "HIT",
                                    "MISS",
                                    "NONE"
                                  ],
                                  "examples": [
                                    "ALL",
                                    "HIT",
                                    "MISS",
                                    "NONE"
                                  ],
                                  "type": "string"
                                },
                                "pagination": {
                                  "description": "Pagination as requested for the results.",
                                  "properties": {
                                    "currentPage": {
                                      "description": "Token of the returned page. To be used only in the response to allow the client to check if the returned page is the one requested.",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "limit": {
                                      "default": 10,
                                      "description": "Size of the page. Use `0` to return all the results or the maximum allowed by the Beacon, if there is any.",
                                      "example": 10,
                                      "minimum": 0,
                                      "type": "integer"
                                    },
                                    "nextPage": {
                                      "description": "Token of the next page. Used to navigate forward. If empty, it is assumed that no more pages are available",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "previousPage": {
                                      "description": "Token of the previous page. Used to navigate backwards. If empty, it is assumed that the current page is the first one.",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "skip": {
                                      "default": 0,
                                      "description": "* In the request: number of pages to skip * In the response: number of pages that has been skipped",
                                      "example": 0,
                                      "minimum": 0,
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "requestParameters": {
                                  "description": "Dictionary of request parameters received in the `RequestBody` or as part of a GET request.",
                                  "$schema": "https://json-schema.org/draft/2020-12/schema",
                                  "additionalProperties": {
                                    "type": "object"
                                  },
                                  "properties": {
                                    "$schema": {
                                      "description": "Added here to allow proper validation of the documents.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "requestedGranularity": {
                                  "description": "Requested granularity for the response which may differe from the response's actual granularity.",
                                  "default": "boolean",
                                  "enum": [
                                    "boolean",
                                    "count",
                                    "aggregated",
                                    "record"
                                  ],
                                  "type": "string"
                                },
                                "requestedSchemas": {
                                  "$comment": "TODO: Add the format attribute as a uri.",
                                  "description": "Set of schemas to be used in the response to a request. `minItems: 0` is used to confirm that an empty array is acceptable here.",
                                  "minItems": 0,
                                  "items": {
                                    "description": "Schema to be used for the requested entry type in the response.",
                                    "properties": {
                                      "entityType": {
                                        "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                                        "example": "Individual",
                                        "type": "string"
                                      },
                                      "schema": {
                                        "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                                        "examples": [
                                          "./ga4gh-beacon-dataset-v2.0.0",
                                          "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "testMode": {
                                  "description": "Used for indicating that a request was received in a test context.",
                                  "default": false,
                                  "type": "boolean"
                                }
                              },
                              "required": [
                                "apiVersion",
                                "requestedSchemas",
                                "pagination",
                                "requestedGranularity"
                              ],
                              "type": "object"
                            },
                            "returnedGranularity": {
                              "description": "Granularity of the Beacon response. Targeted Beacon could respond or not with the requested granularity. E.g. record level granularity could be requested, but the Beacon could respond only with boolean or count results.",
                              "default": "boolean",
                              "enum": [
                                "boolean",
                                "count",
                                "aggregated",
                                "record"
                              ],
                              "type": "string"
                            },
                            "returnedSchemas": {
                              "description": "Set of schemas to be used in the response to a request.",
                              "items": {
                                "description": "Schema to be used for the requested entry type in the response.",
                                "properties": {
                                  "entityType": {
                                    "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                                    "example": "Individual",
                                    "type": "string"
                                  },
                                  "schema": {
                                    "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                                    "examples": [
                                      "./ga4gh-beacon-dataset-v2.0.0",
                                      "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                                    ],
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "testMode": {
                              "description": "Used for indicating that a response is returned in a test context. Purposed for compliance testing. Information returned could be fake.",
                              "default": false,
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "beaconId",
                            "apiVersion",
                            "returnedSchemas",
                            "returnedGranularity",
                            "receivedRequestSummary"
                          ],
                          "type": "object"
                        },
                        "responseSummary": {
                          "description": "Response summary, including Boolean and optionally results count.",
                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                          "properties": {
                            "exists": {
                              "description": "Indicator of whether any entry was observed. This should be non-null, unless there was an error, in which case a `beaconErrorResponse` is expected instead of this one.",
                              "examples": [
                                true
                              ],
                              "type": "boolean"
                            },
                            "numTotalResults": {
                              "description": "Total number of results.",
                              "examples": [
                                123
                              ],
                              "minimum": 0,
                              "type": "integer"
                            }
                          },
                          "required": [
                            "exists",
                            "numTotalResults"
                          ],
                          "type": "object"
                        }
                      },
                      "required": [
                        "meta",
                        "responseSummary"
                      ],
                      "type": "object"
                    },
                    {
                      "$schema": "https://json-schema.org/draft/2020-12/schema",
                      "additionalProperties": true,
                      "description": "Beacon response that includes record level details, grouped in Resultsets.",
                      "properties": {
                        "beaconHandovers": {
                          "description": "List of handovers that apply to the whole response, not to any resultset or result in particular.",
                          "items": {
                            "description": "Requested schema to be used for individuals in the response.",
                            "properties": {
                              "handoverType": {
                                "description": "Handover type, as an Ontology_term object with CURIE syntax for the `id` value. Use `CUSTOM` for the `id` when no ontology is available.",
                                "examples": [
                                  {
                                    "id": "EFO:0004157",
                                    "label": "BAM format"
                                  },
                                  {
                                    "id": "CUSTOM",
                                    "label": "download genomic variants in .pgxseg file format"
                                  }
                                ],
                                "$schema": "https://json-schema.org/draft/2020-12/schema",
                                "additionalProperties": true,
                                "properties": {
                                  "id": {
                                    "description": "A CURIE identifier, e.g. as `id` for an ontology term.",
                                    "examples": [
                                      "ga4gh:GA.01234abcde",
                                      "DUO:0000004",
                                      "orcid:0000-0003-3463-0775",
                                      "PMID:15254584"
                                    ],
                                    "pattern": "^\\w[^:]+:.+$",
                                    "type": "string"
                                  },
                                  "label": {
                                    "description": "The text that describes the term. By default it could be the preferred text of the term, but is it acceptable to customize it for a clearer description and understanding of the term in an specific context.",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id"
                                ],
                                "title": "Ontology Term",
                                "type": "object"
                              },
                              "note": {
                                "description": "An optional text including considerations on the handover link provided.",
                                "example": "This handover link provides access to a summarized VCF.",
                                "type": "string"
                              },
                              "url": {
                                "description": "URL endpoint to where the handover process could progress, in RFC3986 format",
                                "example": "https://api.mygenomeservice.org/Handover/9dcc48d7-fc88-11e8-9110-b0c592dbf8c0/",
                                "format": "uri",
                                "type": "string"
                              }
                            },
                            "required": [
                              "handoverType",
                              "url"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "info": {
                          "description": "Additional details that could be of interest. Provided to clearly enclose any attribute that is not part of the Beacon specification.",
                          "type": "object"
                        },
                        "meta": {
                          "description": "Information about the response that could be relevant for the Beacon client in order to interpret the results.",
                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                          "properties": {
                            "apiVersion": {
                              "description": "Version of the Beacon API.",
                              "example": "v2.0",
                              "type": "string"
                            },
                            "beaconId": {
                              "description": "Identifier of the beacon instance.",
                              "example": "org.example.beacon.v2",
                              "type": "string"
                            },
                            "receivedRequestSummary": {
                              "description": "Section of the response that summarize the request received as it has been interpreted by the Beacon server.",
                              "$schema": "https://json-schema.org/draft/2020-12/schema",
                              "properties": {
                                "apiVersion": {
                                  "description": "API version expected by the client to be supported by the server and used in the response format.",
                                  "example": "v2.0",
                                  "type": "string"
                                },
                                "filters": {
                                  "description": "Filters as submitted in the request.",
                                  "example": [
                                    "BTO:0000199",
                                    "PATO:0000383"
                                  ],
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "includeResultsetResponses": {
                                  "default": "HIT",
                                  "description": "Indicator of whether responses from every Resultset should be included in the response to this request or just the ones with positive, negative results or no details at all. If null (not specified), the default value of 'HIT' is assumed. This parameter allows for returning boolean/counting results although the Beacon instance is capable to return record level details.",
                                  "enum": [
                                    "ALL",
                                    "HIT",
                                    "MISS",
                                    "NONE"
                                  ],
                                  "examples": [
                                    "ALL",
                                    "HIT",
                                    "MISS",
                                    "NONE"
                                  ],
                                  "type": "string"
                                },
                                "pagination": {
                                  "description": "Pagination as requested for the results.",
                                  "properties": {
                                    "currentPage": {
                                      "description": "Token of the returned page. To be used only in the response to allow the client to check if the returned page is the one requested.",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "limit": {
                                      "default": 10,
                                      "description": "Size of the page. Use `0` to return all the results or the maximum allowed by the Beacon, if there is any.",
                                      "example": 10,
                                      "minimum": 0,
                                      "type": "integer"
                                    },
                                    "nextPage": {
                                      "description": "Token of the next page. Used to navigate forward. If empty, it is assumed that no more pages are available",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "previousPage": {
                                      "description": "Token of the previous page. Used to navigate backwards. If empty, it is assumed that the current page is the first one.",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "skip": {
                                      "default": 0,
                                      "description": "* In the request: number of pages to skip * In the response: number of pages that has been skipped",
                                      "example": 0,
                                      "minimum": 0,
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "requestParameters": {
                                  "description": "Dictionary of request parameters received in the `RequestBody` or as part of a GET request.",
                                  "$schema": "https://json-schema.org/draft/2020-12/schema",
                                  "additionalProperties": {
                                    "type": "object"
                                  },
                                  "properties": {
                                    "$schema": {
                                      "description": "Added here to allow proper validation of the documents.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "requestedGranularity": {
                                  "description": "Requested granularity for the response which may differe from the response's actual granularity.",
                                  "default": "boolean",
                                  "enum": [
                                    "boolean",
                                    "count",
                                    "aggregated",
                                    "record"
                                  ],
                                  "type": "string"
                                },
                                "requestedSchemas": {
                                  "$comment": "TODO: Add the format attribute as a uri.",
                                  "description": "Set of schemas to be used in the response to a request. `minItems: 0` is used to confirm that an empty array is acceptable here.",
                                  "minItems": 0,
                                  "items": {
                                    "description": "Schema to be used for the requested entry type in the response.",
                                    "properties": {
                                      "entityType": {
                                        "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                                        "example": "Individual",
                                        "type": "string"
                                      },
                                      "schema": {
                                        "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                                        "examples": [
                                          "./ga4gh-beacon-dataset-v2.0.0",
                                          "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "testMode": {
                                  "description": "Used for indicating that a request was received in a test context.",
                                  "default": false,
                                  "type": "boolean"
                                }
                              },
                              "required": [
                                "apiVersion",
                                "requestedSchemas",
                                "pagination",
                                "requestedGranularity"
                              ],
                              "type": "object"
                            },
                            "returnedGranularity": {
                              "description": "Granularity of the Beacon response. Targeted Beacon could respond or not with the requested granularity. E.g. record level granularity could be requested, but the Beacon could respond only with boolean or count results.",
                              "default": "boolean",
                              "enum": [
                                "boolean",
                                "count",
                                "aggregated",
                                "record"
                              ],
                              "type": "string"
                            },
                            "returnedSchemas": {
                              "description": "Set of schemas to be used in the response to a request.",
                              "items": {
                                "description": "Schema to be used for the requested entry type in the response.",
                                "properties": {
                                  "entityType": {
                                    "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                                    "example": "Individual",
                                    "type": "string"
                                  },
                                  "schema": {
                                    "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                                    "examples": [
                                      "./ga4gh-beacon-dataset-v2.0.0",
                                      "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                                    ],
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "testMode": {
                              "description": "Used for indicating that a response is returned in a test context. Purposed for compliance testing. Information returned could be fake.",
                              "default": false,
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "beaconId",
                            "apiVersion",
                            "returnedSchemas",
                            "returnedGranularity",
                            "receivedRequestSummary"
                          ],
                          "type": "object"
                        },
                        "response": {
                          "description": "Response for queries that recovers any result.",
                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                          "additionalProperties": true,
                          "definitions": {
                            "ResultsetInstance": {
                              "additionalProperties": true,
                              "properties": {
                                "exists": {
                                  "type": "boolean"
                                },
                                "id": {
                                  "description": "id of the resultset",
                                  "example": "datasetA",
                                  "type": "string"
                                },
                                "info": {
                                  "description": "Additional details that could be of interest about the Resultset. Provided to clearly enclose any attribute that is not part of the Beacon specification.",
                                  "type": "object"
                                },
                                "results": {
                                  "items": {
                                    "type": "object"
                                  },
                                  "minItems": 0,
                                  "type": "array"
                                },
                                "resultsCount": {
                                  "description": "Number of results in this Resultset.",
                                  "type": "integer"
                                },
                                "resultsHandovers": {
                                  "description": "List of handovers that apply to this resultset, not to the whole Beacon or to a result in particular.",
                                  "items": {
                                    "description": "Requested schema to be used for individuals in the response.",
                                    "properties": {
                                      "handoverType": {
                                        "description": "Handover type, as an Ontology_term object with CURIE syntax for the `id` value. Use `CUSTOM` for the `id` when no ontology is available.",
                                        "examples": [
                                          {
                                            "id": "EFO:0004157",
                                            "label": "BAM format"
                                          },
                                          {
                                            "id": "CUSTOM",
                                            "label": "download genomic variants in .pgxseg file format"
                                          }
                                        ],
                                        "$schema": "https://json-schema.org/draft/2020-12/schema",
                                        "additionalProperties": true,
                                        "properties": {
                                          "id": {
                                            "description": "A CURIE identifier, e.g. as `id` for an ontology term.",
                                            "examples": [
                                              "ga4gh:GA.01234abcde",
                                              "DUO:0000004",
                                              "orcid:0000-0003-3463-0775",
                                              "PMID:15254584"
                                            ],
                                            "pattern": "^\\w[^:]+:.+$",
                                            "type": "string"
                                          },
                                          "label": {
                                            "description": "The text that describes the term. By default it could be the preferred text of the term, but is it acceptable to customize it for a clearer description and understanding of the term in an specific context.",
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "id"
                                        ],
                                        "title": "Ontology Term",
                                        "type": "object"
                                      },
                                      "note": {
                                        "description": "An optional text including considerations on the handover link provided.",
                                        "example": "This handover link provides access to a summarized VCF.",
                                        "type": "string"
                                      },
                                      "url": {
                                        "description": "URL endpoint to where the handover process could progress, in RFC3986 format",
                                        "example": "https://api.mygenomeservice.org/Handover/9dcc48d7-fc88-11e8-9110-b0c592dbf8c0/",
                                        "format": "uri",
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "handoverType",
                                      "url"
                                    ],
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "setType": {
                                  "default": "dataset",
                                  "description": "Entry type of resultSet. It SHOULD MATCH an entry type declared as collection in the Beacon configuration.",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "id",
                                "setType",
                                "exists",
                                "resultsCount",
                                "results"
                              ]
                            }
                          },
                          "properties": {
                            "$schema": {
                              "$comment": "TO REVIEW: adding a `format` or `regex` attribute that validates correctly against a file path (relative).",
                              "description": "Refers to the JSON Schema which describes the set of valid attributes for this particular document type. This attribute is mostly used in schemas that should be tested in Beacon implementations.",
                              "type": "string"
                            },
                            "resultSets": {
                              "items": {
                                "additionalProperties": true,
                                "properties": {
                                  "exists": {
                                    "type": "boolean"
                                  },
                                  "id": {
                                    "description": "id of the resultset",
                                    "example": "datasetA",
                                    "type": "string"
                                  },
                                  "info": {
                                    "description": "Additional details that could be of interest about the Resultset. Provided to clearly enclose any attribute that is not part of the Beacon specification.",
                                    "type": "object"
                                  },
                                  "results": {
                                    "items": {
                                      "type": "object"
                                    },
                                    "minItems": 0,
                                    "type": "array"
                                  },
                                  "resultsCount": {
                                    "description": "Number of results in this Resultset.",
                                    "type": "integer"
                                  },
                                  "resultsHandovers": {
                                    "description": "List of handovers that apply to this resultset, not to the whole Beacon or to a result in particular.",
                                    "items": {
                                      "description": "Requested schema to be used for individuals in the response.",
                                      "properties": {
                                        "handoverType": {
                                          "description": "Handover type, as an Ontology_term object with CURIE syntax for the `id` value. Use `CUSTOM` for the `id` when no ontology is available.",
                                          "examples": [
                                            {
                                              "id": "EFO:0004157",
                                              "label": "BAM format"
                                            },
                                            {
                                              "id": "CUSTOM",
                                              "label": "download genomic variants in .pgxseg file format"
                                            }
                                          ],
                                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                                          "additionalProperties": true,
                                          "properties": {
                                            "id": {
                                              "description": "A CURIE identifier, e.g. as `id` for an ontology term.",
                                              "examples": [
                                                "ga4gh:GA.01234abcde",
                                                "DUO:0000004",
                                                "orcid:0000-0003-3463-0775",
                                                "PMID:15254584"
                                              ],
                                              "pattern": "^\\w[^:]+:.+$",
                                              "type": "string"
                                            },
                                            "label": {
                                              "description": "The text that describes the term. By default it could be the preferred text of the term, but is it acceptable to customize it for a clearer description and understanding of the term in an specific context.",
                                              "type": "string"
                                            }
                                          },
                                          "required": [
                                            "id"
                                          ],
                                          "title": "Ontology Term",
                                          "type": "object"
                                        },
                                        "note": {
                                          "description": "An optional text including considerations on the handover link provided.",
                                          "example": "This handover link provides access to a summarized VCF.",
                                          "type": "string"
                                        },
                                        "url": {
                                          "description": "URL endpoint to where the handover process could progress, in RFC3986 format",
                                          "example": "https://api.mygenomeservice.org/Handover/9dcc48d7-fc88-11e8-9110-b0c592dbf8c0/",
                                          "format": "uri",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "handoverType",
                                        "url"
                                      ],
                                      "type": "object"
                                    },
                                    "type": "array"
                                  },
                                  "setType": {
                                    "default": "dataset",
                                    "description": "Entry type of resultSet. It SHOULD MATCH an entry type declared as collection in the Beacon configuration.",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id",
                                  "setType",
                                  "exists",
                                  "resultsCount",
                                  "results"
                                ]
                              },
                              "minItems": 0,
                              "type": "array"
                            }
                          },
                          "required": [
                            "resultSets"
                          ],
                          "title": "Beacon ResultSet",
                          "type": "object"
                        },
                        "responseSummary": {
                          "description": "Response summary, including Boolean and optionally results count.",
                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                          "properties": {
                            "exists": {
                              "description": "Indicator of whether any entry was observed. This should be non-null, unless there was an error, in which case an error response is expected instead of this one.",
                              "examples": [
                                true
                              ],
                              "type": "boolean"
                            },
                            "numTotalResults": {
                              "description": "Total number of results.",
                              "examples": [
                                123
                              ],
                              "minimum": 0,
                              "type": "integer"
                            }
                          },
                          "required": [
                            "exists"
                          ],
                          "type": "object"
                        }
                      },
                      "required": [
                        "meta",
                        "responseSummary",
                        "response"
                      ],
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Successful operation."
          },
          "default": {
            "description": "An unsuccessful operation",
            "$schema": "https://json-schema.org/draft/2020-12/schema",
            "additionalProperties": true,
            "properties": {
              "error": {
                "description": "Error response",
                "properties": {
                  "errorCode": {
                    "description": "Entry not found",
                    "examples": [
                      "404"
                    ],
                    "format": "int32",
                    "type": "integer"
                  },
                  "errorMessage": {
                    "examples": [
                      "the provided parameters are incomplete. 'xyz' is missing."
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "errorCode"
                ],
                "type": "object"
              },
              "meta": {
                "description": "Information about the response that could be relevant for the Beacon client in order to interpret the results.",
                "$schema": "https://json-schema.org/draft/2020-12/schema",
                "properties": {
                  "apiVersion": {
                    "description": "Version of the Beacon API.",
                    "example": "v2.0",
                    "type": "string"
                  },
                  "beaconId": {
                    "description": "Identifier of the beacon instance.",
                    "example": "org.example.beacon.v2",
                    "type": "string"
                  },
                  "receivedRequestSummary": {
                    "description": "Section of the response that summarize the request received as it has been interpreted by the Beacon server.",
                    "$schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                      "apiVersion": {
                        "description": "API version expected by the client to be supported by the server and used in the response format.",
                        "example": "v2.0",
                        "type": "string"
                      },
                      "filters": {
                        "description": "Filters as submitted in the request.",
                        "example": [
                          "BTO:0000199",
                          "PATO:0000383"
                        ],
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "includeResultsetResponses": {
                        "default": "HIT",
                        "description": "Indicator of whether responses from every Resultset should be included in the response to this request or just the ones with positive, negative results or no details at all. If null (not specified), the default value of 'HIT' is assumed. This parameter allows for returning boolean/counting results although the Beacon instance is capable to return record level details.",
                        "enum": [
                          "ALL",
                          "HIT",
                          "MISS",
                          "NONE"
                        ],
                        "examples": [
                          "ALL",
                          "HIT",
                          "MISS",
                          "NONE"
                        ],
                        "type": "string"
                      },
                      "pagination": {
                        "description": "Pagination as requested for the results.",
                        "properties": {
                          "currentPage": {
                            "description": "Token of the returned page. To be used only in the response to allow the client to check if the returned page is the one requested.",
                            "example": "ab0sc&fe1dd",
                            "type": "string"
                          },
                          "limit": {
                            "default": 10,
                            "description": "Size of the page. Use `0` to return all the results or the maximum allowed by the Beacon, if there is any.",
                            "example": 10,
                            "minimum": 0,
                            "type": "integer"
                          },
                          "nextPage": {
                            "description": "Token of the next page. Used to navigate forward. If empty, it is assumed that no more pages are available",
                            "example": "ab0sc&fe1dd",
                            "type": "string"
                          },
                          "previousPage": {
                            "description": "Token of the previous page. Used to navigate backwards. If empty, it is assumed that the current page is the first one.",
                            "example": "ab0sc&fe1dd",
                            "type": "string"
                          },
                          "skip": {
                            "default": 0,
                            "description": "* In the request: number of pages to skip * In the response: number of pages that has been skipped",
                            "example": 0,
                            "minimum": 0,
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "requestParameters": {
                        "description": "Dictionary of request parameters received in the `RequestBody` or as part of a GET request.",
                        "$schema": "https://json-schema.org/draft/2020-12/schema",
                        "additionalProperties": {
                          "type": "object"
                        },
                        "properties": {
                          "$schema": {
                            "description": "Added here to allow proper validation of the documents.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "requestedGranularity": {
                        "description": "Requested granularity for the response which may differe from the response's actual granularity.",
                        "default": "boolean",
                        "enum": [
                          "boolean",
                          "count",
                          "aggregated",
                          "record"
                        ],
                        "type": "string"
                      },
                      "requestedSchemas": {
                        "$comment": "TODO: Add the format attribute as a uri.",
                        "description": "Set of schemas to be used in the response to a request. `minItems: 0` is used to confirm that an empty array is acceptable here.",
                        "minItems": 0,
                        "items": {
                          "description": "Schema to be used for the requested entry type in the response.",
                          "properties": {
                            "entityType": {
                              "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                              "example": "Individual",
                              "type": "string"
                            },
                            "schema": {
                              "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                              "examples": [
                                "./ga4gh-beacon-dataset-v2.0.0",
                                "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "testMode": {
                        "description": "Used for indicating that a request was received in a test context.",
                        "default": false,
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "apiVersion",
                      "requestedSchemas",
                      "pagination",
                      "requestedGranularity"
                    ],
                    "type": "object"
                  },
                  "returnedGranularity": {
                    "description": "Granularity of the Beacon response. Targeted Beacon could respond or not with the requested granularity. E.g. record level granularity could be requested, but the Beacon could respond only with boolean or count results.",
                    "default": "boolean",
                    "enum": [
                      "boolean",
                      "count",
                      "aggregated",
                      "record"
                    ],
                    "type": "string"
                  },
                  "returnedSchemas": {
                    "description": "Set of schemas to be used in the response to a request.",
                    "items": {
                      "description": "Schema to be used for the requested entry type in the response.",
                      "properties": {
                        "entityType": {
                          "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                          "example": "Individual",
                          "type": "string"
                        },
                        "schema": {
                          "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                          "examples": [
                            "./ga4gh-beacon-dataset-v2.0.0",
                            "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "testMode": {
                    "description": "Used for indicating that a response is returned in a test context. Purposed for compliance testing. Information returned could be fake.",
                    "default": false,
                    "type": "boolean"
                  }
                },
                "required": [
                  "beaconId",
                  "apiVersion",
                  "returnedSchemas",
                  "returnedGranularity",
                  "receivedRequestSummary"
                ],
                "type": "object"
              }
            },
            "required": [
              "meta",
              "error"
            ],
            "type": "object"
          }
        },
        "tags": [
          "GET Endpoints"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Get details about one genomic variation, identified by its (unique) 'id'",
        "operationId": "postOneGenomicVariation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$schema": "https://json-schema.org/draft/2020-12/schema",
                "description": "Schema for the Beacon request. It is named `RequestBody` to keep the same nomenclature used by OpenAPI v3, but it actually contains the definition of the whole HTTP POST request payload.",
                "properties": {
                  "$schema": {
                    "$comment": "TO REVIEW: adding a `format` or `regex` attribute that validates correctly against a file path (relative).",
                    "description": "Refers to the JSON Schema which describes the set of valid attributes for this particular document type. This attribute is mostly used in schemas that should be tested in Beacon implementations.",
                    "type": "string"
                  },
                  "meta": {
                    "description": "Information relevant for building the response.",
                    "$schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                      "$schema": {
                        "$comment": "TO REVIEW: adding a `format` or `regex` attribute that validates correctly against a file path (relative).",
                        "description": "Refers to the JSON Schema which describes the set of valid attributes for this particular document type. This attribute is mostly used in schemas that should be tested in Beacon implementations.",
                        "type": "string"
                      },
                      "apiVersion": {
                        "description": "API version expected by the client to be supported by the server and used in the response format.",
                        "example": "v2.0",
                        "type": "string"
                      },
                      "requestedSchemas": {
                        "description": "Set of schemas to be used in the response.",
                        "items": {
                          "description": "Schema to be used for the requested entry type in the response.",
                          "properties": {
                            "entityType": {
                              "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                              "example": "Individual",
                              "type": "string"
                            },
                            "schema": {
                              "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                              "examples": [
                                "./ga4gh-beacon-dataset-v2.0.0",
                                "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "apiVersion"
                    ],
                    "type": "object"
                  },
                  "query": {
                    "description": "Parameters to limit the list of returned results.",
                    "properties": {
                      "filters": {
                        "description": "Ontology based filters. Using CURIE syntax is encouraged.",
                        "$schema": "https://json-schema.org/draft/2020-12/schema",
                        "additionalProperties": true,
                        "definitions": {
                          "AlphanumericFilter": {
                            "description": "Filter results based on operators and values applied to alphanumeric fields.",
                            "properties": {
                              "id": {
                                "description": "Field identfier to be queried.",
                                "example": "age",
                                "type": "string"
                              },
                              "operator": {
                                "default": "=",
                                "description": "Defines how the value relates to the field `id`.",
                                "enum": [
                                  "=",
                                  "<",
                                  ">",
                                  "!",
                                  ">=",
                                  "<="
                                ],
                                "example": ">",
                                "type": "string"
                              },
                              "scope": {
                                "description": "The entry type to which the filter applies",
                                "example": "biosamples",
                                "type": "string"
                              },
                              "value": {
                                "description": "Alphanumeric search term to be used within the query which can contain wildcard characters (%) to denote any number of unknown characters.  Values can be assocatied with units if applicable.",
                                "example": "P70Y",
                                "type": "string"
                              }
                            },
                            "required": [
                              "id",
                              "operator",
                              "value"
                            ],
                            "type": "object"
                          },
                          "CustomFilter": {
                            "description": "Filter results to include records that contain a custom term defined by this Beacon.",
                            "properties": {
                              "id": {
                                "description": "Custom filter terms should contain a unique identifier.",
                                "example": "demographic.ethnicity:asian",
                                "type": "string"
                              },
                              "scope": {
                                "description": "The entry type to which the filter applies",
                                "example": "biosamples",
                                "type": "string"
                              }
                            },
                            "required": [
                              "id"
                            ],
                            "type": "object"
                          },
                          "FilteringTerm": {
                            "anyOf": [
                              {
                                "description": "Filter results to include records that contain a specific ontology term.",
                                "properties": {
                                  "id": {
                                    "description": "Term ID to be queried, using CURIE syntax where possible.",
                                    "example": "HP:0002664",
                                    "type": "string"
                                  },
                                  "includeDescendantTerms": {
                                    "default": true,
                                    "description": "Define if the Beacon should implement the ontology hierarchy, thus query the descendant terms of `id`.",
                                    "type": "boolean"
                                  },
                                  "scope": {
                                    "description": "The entry type to which the filter applies",
                                    "example": "biosamples",
                                    "type": "string"
                                  },
                                  "similarity": {
                                    "default": "exact",
                                    "description": "Allow the Beacon to return results which do not match the filter exactly, but do match to a certain degree of similarity. The Beacon defines the semantic similarity model implemented and how to apply the thresholds of 'high', 'medium' and 'low' similarity.",
                                    "enum": [
                                      "exact",
                                      "high",
                                      "medium",
                                      "low"
                                    ],
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id"
                                ],
                                "type": "object"
                              },
                              {
                                "description": "Filter results based on operators and values applied to alphanumeric fields.",
                                "properties": {
                                  "id": {
                                    "description": "Field identfier to be queried.",
                                    "example": "age",
                                    "type": "string"
                                  },
                                  "operator": {
                                    "default": "=",
                                    "description": "Defines how the value relates to the field `id`.",
                                    "enum": [
                                      "=",
                                      "<",
                                      ">",
                                      "!",
                                      ">=",
                                      "<="
                                    ],
                                    "example": ">",
                                    "type": "string"
                                  },
                                  "scope": {
                                    "description": "The entry type to which the filter applies",
                                    "example": "biosamples",
                                    "type": "string"
                                  },
                                  "value": {
                                    "description": "Alphanumeric search term to be used within the query which can contain wildcard characters (%) to denote any number of unknown characters.  Values can be assocatied with units if applicable.",
                                    "example": "P70Y",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id",
                                  "operator",
                                  "value"
                                ],
                                "type": "object"
                              },
                              {
                                "description": "Filter results to include records that contain a custom term defined by this Beacon.",
                                "properties": {
                                  "id": {
                                    "description": "Custom filter terms should contain a unique identifier.",
                                    "example": "demographic.ethnicity:asian",
                                    "type": "string"
                                  },
                                  "scope": {
                                    "description": "The entry type to which the filter applies",
                                    "example": "biosamples",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id"
                                ],
                                "type": "object"
                              }
                            ]
                          },
                          "OntologyFilter": {
                            "description": "Filter results to include records that contain a specific ontology term.",
                            "properties": {
                              "id": {
                                "description": "Term ID to be queried, using CURIE syntax where possible.",
                                "example": "HP:0002664",
                                "type": "string"
                              },
                              "includeDescendantTerms": {
                                "default": true,
                                "description": "Define if the Beacon should implement the ontology hierarchy, thus query the descendant terms of `id`.",
                                "type": "boolean"
                              },
                              "scope": {
                                "description": "The entry type to which the filter applies",
                                "example": "biosamples",
                                "type": "string"
                              },
                              "similarity": {
                                "default": "exact",
                                "description": "Allow the Beacon to return results which do not match the filter exactly, but do match to a certain degree of similarity. The Beacon defines the semantic similarity model implemented and how to apply the thresholds of 'high', 'medium' and 'low' similarity.",
                                "enum": [
                                  "exact",
                                  "high",
                                  "medium",
                                  "low"
                                ],
                                "type": "string"
                              }
                            },
                            "required": [
                              "id"
                            ],
                            "type": "object"
                          }
                        },
                        "items": {
                          "anyOf": [
                            {
                              "description": "Filter results to include records that contain a specific ontology term.",
                              "properties": {
                                "id": {
                                  "description": "Term ID to be queried, using CURIE syntax where possible.",
                                  "example": "HP:0002664",
                                  "type": "string"
                                },
                                "includeDescendantTerms": {
                                  "default": true,
                                  "description": "Define if the Beacon should implement the ontology hierarchy, thus query the descendant terms of `id`.",
                                  "type": "boolean"
                                },
                                "scope": {
                                  "description": "The entry type to which the filter applies",
                                  "example": "biosamples",
                                  "type": "string"
                                },
                                "similarity": {
                                  "default": "exact",
                                  "description": "Allow the Beacon to return results which do not match the filter exactly, but do match to a certain degree of similarity. The Beacon defines the semantic similarity model implemented and how to apply the thresholds of 'high', 'medium' and 'low' similarity.",
                                  "enum": [
                                    "exact",
                                    "high",
                                    "medium",
                                    "low"
                                  ],
                                  "type": "string"
                                }
                              },
                              "required": [
                                "id"
                              ],
                              "type": "object"
                            },
                            {
                              "description": "Filter results based on operators and values applied to alphanumeric fields.",
                              "properties": {
                                "id": {
                                  "description": "Field identfier to be queried.",
                                  "example": "age",
                                  "type": "string"
                                },
                                "operator": {
                                  "default": "=",
                                  "description": "Defines how the value relates to the field `id`.",
                                  "enum": [
                                    "=",
                                    "<",
                                    ">",
                                    "!",
                                    ">=",
                                    "<="
                                  ],
                                  "example": ">",
                                  "type": "string"
                                },
                                "scope": {
                                  "description": "The entry type to which the filter applies",
                                  "example": "biosamples",
                                  "type": "string"
                                },
                                "value": {
                                  "description": "Alphanumeric search term to be used within the query which can contain wildcard characters (%) to denote any number of unknown characters.  Values can be assocatied with units if applicable.",
                                  "example": "P70Y",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "id",
                                "operator",
                                "value"
                              ],
                              "type": "object"
                            },
                            {
                              "description": "Filter results to include records that contain a custom term defined by this Beacon.",
                              "properties": {
                                "id": {
                                  "description": "Custom filter terms should contain a unique identifier.",
                                  "example": "demographic.ethnicity:asian",
                                  "type": "string"
                                },
                                "scope": {
                                  "description": "The entry type to which the filter applies",
                                  "example": "biosamples",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "id"
                              ],
                              "type": "object"
                            }
                          ]
                        },
                        "title": "Filtering Term Element",
                        "type": "array"
                      },
                      "includeResultsetResponses": {
                        "default": "HIT",
                        "description": "Indicator of whether responses from every Resultset should be included in the response to this request or just the ones with positive, negative results or no details at all. If null (not specified), the default value of 'HIT' is assumed. This parameter allows for returning boolean/counting results although the Beacon instance is capable to return record level details.",
                        "enum": [
                          "ALL",
                          "HIT",
                          "MISS",
                          "NONE"
                        ],
                        "examples": [
                          "ALL",
                          "HIT",
                          "MISS",
                          "NONE"
                        ],
                        "type": "string"
                      },
                      "pagination": {
                        "description": "Pagination parameters applied to response documents, in case of record level granularity.",
                        "properties": {
                          "currentPage": {
                            "description": "Token of the returned page. To be used only in the response to allow the client to check if the returned page is the one requested.",
                            "example": "ab0sc&fe1dd",
                            "type": "string"
                          },
                          "limit": {
                            "default": 10,
                            "description": "Size of the page. Use `0` to return all the results or the maximum allowed by the Beacon, if there is any.",
                            "example": 10,
                            "minimum": 0,
                            "type": "integer"
                          },
                          "nextPage": {
                            "description": "Token of the next page. Used to navigate forward. If empty, it is assumed that no more pages are available",
                            "example": "ab0sc&fe1dd",
                            "type": "string"
                          },
                          "previousPage": {
                            "description": "Token of the previous page. Used to navigate backwards. If empty, it is assumed that the current page is the first one.",
                            "example": "ab0sc&fe1dd",
                            "type": "string"
                          },
                          "skip": {
                            "default": 0,
                            "description": "* In the request: number of pages to skip * In the response: number of pages that has been skipped",
                            "example": 0,
                            "minimum": 0,
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "requestParameters": {
                        "description": "Parameters used for the entry type specific query elements.",
                        "$schema": "https://json-schema.org/draft/2020-12/schema",
                        "additionalProperties": {
                          "type": "object"
                        },
                        "properties": {
                          "$schema": {
                            "description": "Added here to allow proper validation of the documents.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "requestedGranularity": {
                        "description": "Requested granularity for the response. Beacons do not have to respond with the requested granularity, e.g. may respond with count results although record level granularity had been requested but indicate the granularity of the response in the response's metadata.",
                        "default": "boolean",
                        "enum": [
                          "boolean",
                          "count",
                          "aggregated",
                          "record"
                        ],
                        "type": "string"
                      },
                      "testMode": {
                        "description": "Used for indicating that a request or response is done in a test context.",
                        "default": false,
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  }
                },
                "required": [
                  "meta"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$schema": "https://json-schema.org/draft/2020-12/schema",
                      "description": "Complete definition for a minimal response that provides *only* a `Boolean` exists true|false answer.",
                      "properties": {
                        "beaconHandovers": {
                          "description": "List of handovers that apply to the whole response, not to any resultset or result in particular.",
                          "items": {
                            "description": "Requested schema to be used for individuals in the response.",
                            "properties": {
                              "handoverType": {
                                "description": "Handover type, as an Ontology_term object with CURIE syntax for the `id` value. Use `CUSTOM` for the `id` when no ontology is available.",
                                "examples": [
                                  {
                                    "id": "EFO:0004157",
                                    "label": "BAM format"
                                  },
                                  {
                                    "id": "CUSTOM",
                                    "label": "download genomic variants in .pgxseg file format"
                                  }
                                ],
                                "$schema": "https://json-schema.org/draft/2020-12/schema",
                                "additionalProperties": true,
                                "properties": {
                                  "id": {
                                    "description": "A CURIE identifier, e.g. as `id` for an ontology term.",
                                    "examples": [
                                      "ga4gh:GA.01234abcde",
                                      "DUO:0000004",
                                      "orcid:0000-0003-3463-0775",
                                      "PMID:15254584"
                                    ],
                                    "pattern": "^\\w[^:]+:.+$",
                                    "type": "string"
                                  },
                                  "label": {
                                    "description": "The text that describes the term. By default it could be the preferred text of the term, but is it acceptable to customize it for a clearer description and understanding of the term in an specific context.",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id"
                                ],
                                "title": "Ontology Term",
                                "type": "object"
                              },
                              "note": {
                                "description": "An optional text including considerations on the handover link provided.",
                                "example": "This handover link provides access to a summarized VCF.",
                                "type": "string"
                              },
                              "url": {
                                "description": "URL endpoint to where the handover process could progress, in RFC3986 format",
                                "example": "https://api.mygenomeservice.org/Handover/9dcc48d7-fc88-11e8-9110-b0c592dbf8c0/",
                                "format": "uri",
                                "type": "string"
                              }
                            },
                            "required": [
                              "handoverType",
                              "url"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "info": {
                          "description": "Additional details that could be of interest. Provided to clearly enclose any attribute that is not part of the Beacon specification.",
                          "type": "object"
                        },
                        "meta": {
                          "description": "Information about the response that could be relevant for the Beacon client in order to interpret the results.",
                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                          "properties": {
                            "apiVersion": {
                              "description": "Version of the Beacon API.",
                              "example": "v2.0",
                              "type": "string"
                            },
                            "beaconId": {
                              "description": "Identifier of the beacon instance.",
                              "example": "org.example.beacon.v2",
                              "type": "string"
                            },
                            "receivedRequestSummary": {
                              "description": "Section of the response that summarize the request received as it has been interpreted by the Beacon server.",
                              "$schema": "https://json-schema.org/draft/2020-12/schema",
                              "properties": {
                                "apiVersion": {
                                  "description": "API version expected by the client to be supported by the server and used in the response format.",
                                  "example": "v2.0",
                                  "type": "string"
                                },
                                "filters": {
                                  "description": "Filters as submitted in the request.",
                                  "example": [
                                    "BTO:0000199",
                                    "PATO:0000383"
                                  ],
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "includeResultsetResponses": {
                                  "default": "HIT",
                                  "description": "Indicator of whether responses from every Resultset should be included in the response to this request or just the ones with positive, negative results or no details at all. If null (not specified), the default value of 'HIT' is assumed. This parameter allows for returning boolean/counting results although the Beacon instance is capable to return record level details.",
                                  "enum": [
                                    "ALL",
                                    "HIT",
                                    "MISS",
                                    "NONE"
                                  ],
                                  "examples": [
                                    "ALL",
                                    "HIT",
                                    "MISS",
                                    "NONE"
                                  ],
                                  "type": "string"
                                },
                                "pagination": {
                                  "description": "Pagination as requested for the results.",
                                  "properties": {
                                    "currentPage": {
                                      "description": "Token of the returned page. To be used only in the response to allow the client to check if the returned page is the one requested.",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "limit": {
                                      "default": 10,
                                      "description": "Size of the page. Use `0` to return all the results or the maximum allowed by the Beacon, if there is any.",
                                      "example": 10,
                                      "minimum": 0,
                                      "type": "integer"
                                    },
                                    "nextPage": {
                                      "description": "Token of the next page. Used to navigate forward. If empty, it is assumed that no more pages are available",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "previousPage": {
                                      "description": "Token of the previous page. Used to navigate backwards. If empty, it is assumed that the current page is the first one.",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "skip": {
                                      "default": 0,
                                      "description": "* In the request: number of pages to skip * In the response: number of pages that has been skipped",
                                      "example": 0,
                                      "minimum": 0,
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "requestParameters": {
                                  "description": "Dictionary of request parameters received in the `RequestBody` or as part of a GET request.",
                                  "$schema": "https://json-schema.org/draft/2020-12/schema",
                                  "additionalProperties": {
                                    "type": "object"
                                  },
                                  "properties": {
                                    "$schema": {
                                      "description": "Added here to allow proper validation of the documents.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "requestedGranularity": {
                                  "description": "Requested granularity for the response which may differe from the response's actual granularity.",
                                  "default": "boolean",
                                  "enum": [
                                    "boolean",
                                    "count",
                                    "aggregated",
                                    "record"
                                  ],
                                  "type": "string"
                                },
                                "requestedSchemas": {
                                  "$comment": "TODO: Add the format attribute as a uri.",
                                  "description": "Set of schemas to be used in the response to a request. `minItems: 0` is used to confirm that an empty array is acceptable here.",
                                  "minItems": 0,
                                  "items": {
                                    "description": "Schema to be used for the requested entry type in the response.",
                                    "properties": {
                                      "entityType": {
                                        "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                                        "example": "Individual",
                                        "type": "string"
                                      },
                                      "schema": {
                                        "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                                        "examples": [
                                          "./ga4gh-beacon-dataset-v2.0.0",
                                          "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "testMode": {
                                  "description": "Used for indicating that a request was received in a test context.",
                                  "default": false,
                                  "type": "boolean"
                                }
                              },
                              "required": [
                                "apiVersion",
                                "requestedSchemas",
                                "pagination",
                                "requestedGranularity"
                              ],
                              "type": "object"
                            },
                            "returnedGranularity": {
                              "description": "Granularity of the Beacon response. Targeted Beacon could respond or not with the requested granularity. E.g. record level granularity could be requested, but the Beacon could respond only with boolean or count results.",
                              "default": "boolean",
                              "enum": [
                                "boolean",
                                "count",
                                "aggregated",
                                "record"
                              ],
                              "type": "string"
                            },
                            "returnedSchemas": {
                              "description": "Set of schemas to be used in the response to a request.",
                              "items": {
                                "description": "Schema to be used for the requested entry type in the response.",
                                "properties": {
                                  "entityType": {
                                    "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                                    "example": "Individual",
                                    "type": "string"
                                  },
                                  "schema": {
                                    "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                                    "examples": [
                                      "./ga4gh-beacon-dataset-v2.0.0",
                                      "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                                    ],
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "testMode": {
                              "description": "Used for indicating that a response is returned in a test context. Purposed for compliance testing. Information returned could be fake.",
                              "default": false,
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "beaconId",
                            "apiVersion",
                            "returnedSchemas",
                            "returnedGranularity",
                            "receivedRequestSummary"
                          ],
                          "type": "object"
                        },
                        "responseSummary": {
                          "description": "Boolean (true/false) response section.",
                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                          "properties": {
                            "exists": {
                              "description": "Indicator of whether any entry was observed. This should be non-null, unless there was an error, in which case an error response is expected instead of this one.",
                              "examples": [
                                true
                              ],
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "exists"
                          ],
                          "type": "object"
                        }
                      },
                      "required": [
                        "meta",
                        "responseSummary"
                      ],
                      "type": "object"
                    },
                    {
                      "$schema": "https://json-schema.org/draft/2020-12/schema",
                      "description": "Complete definition for a response that does not include record level details but provides `Boolean` and `count` information.",
                      "properties": {
                        "beaconHandovers": {
                          "description": "List of handovers that apply to the whole response, not to any resultset or result in particular.",
                          "items": {
                            "description": "Requested schema to be used for individuals in the response.",
                            "properties": {
                              "handoverType": {
                                "description": "Handover type, as an Ontology_term object with CURIE syntax for the `id` value. Use `CUSTOM` for the `id` when no ontology is available.",
                                "examples": [
                                  {
                                    "id": "EFO:0004157",
                                    "label": "BAM format"
                                  },
                                  {
                                    "id": "CUSTOM",
                                    "label": "download genomic variants in .pgxseg file format"
                                  }
                                ],
                                "$schema": "https://json-schema.org/draft/2020-12/schema",
                                "additionalProperties": true,
                                "properties": {
                                  "id": {
                                    "description": "A CURIE identifier, e.g. as `id` for an ontology term.",
                                    "examples": [
                                      "ga4gh:GA.01234abcde",
                                      "DUO:0000004",
                                      "orcid:0000-0003-3463-0775",
                                      "PMID:15254584"
                                    ],
                                    "pattern": "^\\w[^:]+:.+$",
                                    "type": "string"
                                  },
                                  "label": {
                                    "description": "The text that describes the term. By default it could be the preferred text of the term, but is it acceptable to customize it for a clearer description and understanding of the term in an specific context.",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id"
                                ],
                                "title": "Ontology Term",
                                "type": "object"
                              },
                              "note": {
                                "description": "An optional text including considerations on the handover link provided.",
                                "example": "This handover link provides access to a summarized VCF.",
                                "type": "string"
                              },
                              "url": {
                                "description": "URL endpoint to where the handover process could progress, in RFC3986 format",
                                "example": "https://api.mygenomeservice.org/Handover/9dcc48d7-fc88-11e8-9110-b0c592dbf8c0/",
                                "format": "uri",
                                "type": "string"
                              }
                            },
                            "required": [
                              "handoverType",
                              "url"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "info": {
                          "description": "Additional details that could be of interest. Provided to clearly enclose any attribute that is not part of the Beacon specification.",
                          "type": "object"
                        },
                        "meta": {
                          "description": "Information about the response that could be relevant for the Beacon client in order to interpret the results.",
                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                          "properties": {
                            "apiVersion": {
                              "description": "Version of the Beacon API.",
                              "example": "v2.0",
                              "type": "string"
                            },
                            "beaconId": {
                              "description": "Identifier of the beacon instance.",
                              "example": "org.example.beacon.v2",
                              "type": "string"
                            },
                            "receivedRequestSummary": {
                              "description": "Section of the response that summarize the request received as it has been interpreted by the Beacon server.",
                              "$schema": "https://json-schema.org/draft/2020-12/schema",
                              "properties": {
                                "apiVersion": {
                                  "description": "API version expected by the client to be supported by the server and used in the response format.",
                                  "example": "v2.0",
                                  "type": "string"
                                },
                                "filters": {
                                  "description": "Filters as submitted in the request.",
                                  "example": [
                                    "BTO:0000199",
                                    "PATO:0000383"
                                  ],
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "includeResultsetResponses": {
                                  "default": "HIT",
                                  "description": "Indicator of whether responses from every Resultset should be included in the response to this request or just the ones with positive, negative results or no details at all. If null (not specified), the default value of 'HIT' is assumed. This parameter allows for returning boolean/counting results although the Beacon instance is capable to return record level details.",
                                  "enum": [
                                    "ALL",
                                    "HIT",
                                    "MISS",
                                    "NONE"
                                  ],
                                  "examples": [
                                    "ALL",
                                    "HIT",
                                    "MISS",
                                    "NONE"
                                  ],
                                  "type": "string"
                                },
                                "pagination": {
                                  "description": "Pagination as requested for the results.",
                                  "properties": {
                                    "currentPage": {
                                      "description": "Token of the returned page. To be used only in the response to allow the client to check if the returned page is the one requested.",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "limit": {
                                      "default": 10,
                                      "description": "Size of the page. Use `0` to return all the results or the maximum allowed by the Beacon, if there is any.",
                                      "example": 10,
                                      "minimum": 0,
                                      "type": "integer"
                                    },
                                    "nextPage": {
                                      "description": "Token of the next page. Used to navigate forward. If empty, it is assumed that no more pages are available",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "previousPage": {
                                      "description": "Token of the previous page. Used to navigate backwards. If empty, it is assumed that the current page is the first one.",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "skip": {
                                      "default": 0,
                                      "description": "* In the request: number of pages to skip * In the response: number of pages that has been skipped",
                                      "example": 0,
                                      "minimum": 0,
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "requestParameters": {
                                  "description": "Dictionary of request parameters received in the `RequestBody` or as part of a GET request.",
                                  "$schema": "https://json-schema.org/draft/2020-12/schema",
                                  "additionalProperties": {
                                    "type": "object"
                                  },
                                  "properties": {
                                    "$schema": {
                                      "description": "Added here to allow proper validation of the documents.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "requestedGranularity": {
                                  "description": "Requested granularity for the response which may differe from the response's actual granularity.",
                                  "default": "boolean",
                                  "enum": [
                                    "boolean",
                                    "count",
                                    "aggregated",
                                    "record"
                                  ],
                                  "type": "string"
                                },
                                "requestedSchemas": {
                                  "$comment": "TODO: Add the format attribute as a uri.",
                                  "description": "Set of schemas to be used in the response to a request. `minItems: 0` is used to confirm that an empty array is acceptable here.",
                                  "minItems": 0,
                                  "items": {
                                    "description": "Schema to be used for the requested entry type in the response.",
                                    "properties": {
                                      "entityType": {
                                        "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                                        "example": "Individual",
                                        "type": "string"
                                      },
                                      "schema": {
                                        "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                                        "examples": [
                                          "./ga4gh-beacon-dataset-v2.0.0",
                                          "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "testMode": {
                                  "description": "Used for indicating that a request was received in a test context.",
                                  "default": false,
                                  "type": "boolean"
                                }
                              },
                              "required": [
                                "apiVersion",
                                "requestedSchemas",
                                "pagination",
                                "requestedGranularity"
                              ],
                              "type": "object"
                            },
                            "returnedGranularity": {
                              "description": "Granularity of the Beacon response. Targeted Beacon could respond or not with the requested granularity. E.g. record level granularity could be requested, but the Beacon could respond only with boolean or count results.",
                              "default": "boolean",
                              "enum": [
                                "boolean",
                                "count",
                                "aggregated",
                                "record"
                              ],
                              "type": "string"
                            },
                            "returnedSchemas": {
                              "description": "Set of schemas to be used in the response to a request.",
                              "items": {
                                "description": "Schema to be used for the requested entry type in the response.",
                                "properties": {
                                  "entityType": {
                                    "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                                    "example": "Individual",
                                    "type": "string"
                                  },
                                  "schema": {
                                    "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                                    "examples": [
                                      "./ga4gh-beacon-dataset-v2.0.0",
                                      "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                                    ],
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "testMode": {
                              "description": "Used for indicating that a response is returned in a test context. Purposed for compliance testing. Information returned could be fake.",
                              "default": false,
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "beaconId",
                            "apiVersion",
                            "returnedSchemas",
                            "returnedGranularity",
                            "receivedRequestSummary"
                          ],
                          "type": "object"
                        },
                        "responseSummary": {
                          "description": "Response summary, including Boolean and optionally results count.",
                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                          "properties": {
                            "exists": {
                              "description": "Indicator of whether any entry was observed. This should be non-null, unless there was an error, in which case a `beaconErrorResponse` is expected instead of this one.",
                              "examples": [
                                true
                              ],
                              "type": "boolean"
                            },
                            "numTotalResults": {
                              "description": "Total number of results.",
                              "examples": [
                                123
                              ],
                              "minimum": 0,
                              "type": "integer"
                            }
                          },
                          "required": [
                            "exists",
                            "numTotalResults"
                          ],
                          "type": "object"
                        }
                      },
                      "required": [
                        "meta",
                        "responseSummary"
                      ],
                      "type": "object"
                    },
                    {
                      "$schema": "https://json-schema.org/draft/2020-12/schema",
                      "additionalProperties": true,
                      "description": "Beacon response that includes record level details, grouped in Resultsets.",
                      "properties": {
                        "beaconHandovers": {
                          "description": "List of handovers that apply to the whole response, not to any resultset or result in particular.",
                          "items": {
                            "description": "Requested schema to be used for individuals in the response.",
                            "properties": {
                              "handoverType": {
                                "description": "Handover type, as an Ontology_term object with CURIE syntax for the `id` value. Use `CUSTOM` for the `id` when no ontology is available.",
                                "examples": [
                                  {
                                    "id": "EFO:0004157",
                                    "label": "BAM format"
                                  },
                                  {
                                    "id": "CUSTOM",
                                    "label": "download genomic variants in .pgxseg file format"
                                  }
                                ],
                                "$schema": "https://json-schema.org/draft/2020-12/schema",
                                "additionalProperties": true,
                                "properties": {
                                  "id": {
                                    "description": "A CURIE identifier, e.g. as `id` for an ontology term.",
                                    "examples": [
                                      "ga4gh:GA.01234abcde",
                                      "DUO:0000004",
                                      "orcid:0000-0003-3463-0775",
                                      "PMID:15254584"
                                    ],
                                    "pattern": "^\\w[^:]+:.+$",
                                    "type": "string"
                                  },
                                  "label": {
                                    "description": "The text that describes the term. By default it could be the preferred text of the term, but is it acceptable to customize it for a clearer description and understanding of the term in an specific context.",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id"
                                ],
                                "title": "Ontology Term",
                                "type": "object"
                              },
                              "note": {
                                "description": "An optional text including considerations on the handover link provided.",
                                "example": "This handover link provides access to a summarized VCF.",
                                "type": "string"
                              },
                              "url": {
                                "description": "URL endpoint to where the handover process could progress, in RFC3986 format",
                                "example": "https://api.mygenomeservice.org/Handover/9dcc48d7-fc88-11e8-9110-b0c592dbf8c0/",
                                "format": "uri",
                                "type": "string"
                              }
                            },
                            "required": [
                              "handoverType",
                              "url"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "info": {
                          "description": "Additional details that could be of interest. Provided to clearly enclose any attribute that is not part of the Beacon specification.",
                          "type": "object"
                        },
                        "meta": {
                          "description": "Information about the response that could be relevant for the Beacon client in order to interpret the results.",
                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                          "properties": {
                            "apiVersion": {
                              "description": "Version of the Beacon API.",
                              "example": "v2.0",
                              "type": "string"
                            },
                            "beaconId": {
                              "description": "Identifier of the beacon instance.",
                              "example": "org.example.beacon.v2",
                              "type": "string"
                            },
                            "receivedRequestSummary": {
                              "description": "Section of the response that summarize the request received as it has been interpreted by the Beacon server.",
                              "$schema": "https://json-schema.org/draft/2020-12/schema",
                              "properties": {
                                "apiVersion": {
                                  "description": "API version expected by the client to be supported by the server and used in the response format.",
                                  "example": "v2.0",
                                  "type": "string"
                                },
                                "filters": {
                                  "description": "Filters as submitted in the request.",
                                  "example": [
                                    "BTO:0000199",
                                    "PATO:0000383"
                                  ],
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "includeResultsetResponses": {
                                  "default": "HIT",
                                  "description": "Indicator of whether responses from every Resultset should be included in the response to this request or just the ones with positive, negative results or no details at all. If null (not specified), the default value of 'HIT' is assumed. This parameter allows for returning boolean/counting results although the Beacon instance is capable to return record level details.",
                                  "enum": [
                                    "ALL",
                                    "HIT",
                                    "MISS",
                                    "NONE"
                                  ],
                                  "examples": [
                                    "ALL",
                                    "HIT",
                                    "MISS",
                                    "NONE"
                                  ],
                                  "type": "string"
                                },
                                "pagination": {
                                  "description": "Pagination as requested for the results.",
                                  "properties": {
                                    "currentPage": {
                                      "description": "Token of the returned page. To be used only in the response to allow the client to check if the returned page is the one requested.",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "limit": {
                                      "default": 10,
                                      "description": "Size of the page. Use `0` to return all the results or the maximum allowed by the Beacon, if there is any.",
                                      "example": 10,
                                      "minimum": 0,
                                      "type": "integer"
                                    },
                                    "nextPage": {
                                      "description": "Token of the next page. Used to navigate forward. If empty, it is assumed that no more pages are available",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "previousPage": {
                                      "description": "Token of the previous page. Used to navigate backwards. If empty, it is assumed that the current page is the first one.",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "skip": {
                                      "default": 0,
                                      "description": "* In the request: number of pages to skip * In the response: number of pages that has been skipped",
                                      "example": 0,
                                      "minimum": 0,
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "requestParameters": {
                                  "description": "Dictionary of request parameters received in the `RequestBody` or as part of a GET request.",
                                  "$schema": "https://json-schema.org/draft/2020-12/schema",
                                  "additionalProperties": {
                                    "type": "object"
                                  },
                                  "properties": {
                                    "$schema": {
                                      "description": "Added here to allow proper validation of the documents.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "requestedGranularity": {
                                  "description": "Requested granularity for the response which may differe from the response's actual granularity.",
                                  "default": "boolean",
                                  "enum": [
                                    "boolean",
                                    "count",
                                    "aggregated",
                                    "record"
                                  ],
                                  "type": "string"
                                },
                                "requestedSchemas": {
                                  "$comment": "TODO: Add the format attribute as a uri.",
                                  "description": "Set of schemas to be used in the response to a request. `minItems: 0` is used to confirm that an empty array is acceptable here.",
                                  "minItems": 0,
                                  "items": {
                                    "description": "Schema to be used for the requested entry type in the response.",
                                    "properties": {
                                      "entityType": {
                                        "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                                        "example": "Individual",
                                        "type": "string"
                                      },
                                      "schema": {
                                        "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                                        "examples": [
                                          "./ga4gh-beacon-dataset-v2.0.0",
                                          "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "testMode": {
                                  "description": "Used for indicating that a request was received in a test context.",
                                  "default": false,
                                  "type": "boolean"
                                }
                              },
                              "required": [
                                "apiVersion",
                                "requestedSchemas",
                                "pagination",
                                "requestedGranularity"
                              ],
                              "type": "object"
                            },
                            "returnedGranularity": {
                              "description": "Granularity of the Beacon response. Targeted Beacon could respond or not with the requested granularity. E.g. record level granularity could be requested, but the Beacon could respond only with boolean or count results.",
                              "default": "boolean",
                              "enum": [
                                "boolean",
                                "count",
                                "aggregated",
                                "record"
                              ],
                              "type": "string"
                            },
                            "returnedSchemas": {
                              "description": "Set of schemas to be used in the response to a request.",
                              "items": {
                                "description": "Schema to be used for the requested entry type in the response.",
                                "properties": {
                                  "entityType": {
                                    "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                                    "example": "Individual",
                                    "type": "string"
                                  },
                                  "schema": {
                                    "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                                    "examples": [
                                      "./ga4gh-beacon-dataset-v2.0.0",
                                      "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                                    ],
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "testMode": {
                              "description": "Used for indicating that a response is returned in a test context. Purposed for compliance testing. Information returned could be fake.",
                              "default": false,
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "beaconId",
                            "apiVersion",
                            "returnedSchemas",
                            "returnedGranularity",
                            "receivedRequestSummary"
                          ],
                          "type": "object"
                        },
                        "response": {
                          "description": "Response for queries that recovers any result.",
                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                          "additionalProperties": true,
                          "definitions": {
                            "ResultsetInstance": {
                              "additionalProperties": true,
                              "properties": {
                                "exists": {
                                  "type": "boolean"
                                },
                                "id": {
                                  "description": "id of the resultset",
                                  "example": "datasetA",
                                  "type": "string"
                                },
                                "info": {
                                  "description": "Additional details that could be of interest about the Resultset. Provided to clearly enclose any attribute that is not part of the Beacon specification.",
                                  "type": "object"
                                },
                                "results": {
                                  "items": {
                                    "type": "object"
                                  },
                                  "minItems": 0,
                                  "type": "array"
                                },
                                "resultsCount": {
                                  "description": "Number of results in this Resultset.",
                                  "type": "integer"
                                },
                                "resultsHandovers": {
                                  "description": "List of handovers that apply to this resultset, not to the whole Beacon or to a result in particular.",
                                  "items": {
                                    "description": "Requested schema to be used for individuals in the response.",
                                    "properties": {
                                      "handoverType": {
                                        "description": "Handover type, as an Ontology_term object with CURIE syntax for the `id` value. Use `CUSTOM` for the `id` when no ontology is available.",
                                        "examples": [
                                          {
                                            "id": "EFO:0004157",
                                            "label": "BAM format"
                                          },
                                          {
                                            "id": "CUSTOM",
                                            "label": "download genomic variants in .pgxseg file format"
                                          }
                                        ],
                                        "$schema": "https://json-schema.org/draft/2020-12/schema",
                                        "additionalProperties": true,
                                        "properties": {
                                          "id": {
                                            "description": "A CURIE identifier, e.g. as `id` for an ontology term.",
                                            "examples": [
                                              "ga4gh:GA.01234abcde",
                                              "DUO:0000004",
                                              "orcid:0000-0003-3463-0775",
                                              "PMID:15254584"
                                            ],
                                            "pattern": "^\\w[^:]+:.+$",
                                            "type": "string"
                                          },
                                          "label": {
                                            "description": "The text that describes the term. By default it could be the preferred text of the term, but is it acceptable to customize it for a clearer description and understanding of the term in an specific context.",
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "id"
                                        ],
                                        "title": "Ontology Term",
                                        "type": "object"
                                      },
                                      "note": {
                                        "description": "An optional text including considerations on the handover link provided.",
                                        "example": "This handover link provides access to a summarized VCF.",
                                        "type": "string"
                                      },
                                      "url": {
                                        "description": "URL endpoint to where the handover process could progress, in RFC3986 format",
                                        "example": "https://api.mygenomeservice.org/Handover/9dcc48d7-fc88-11e8-9110-b0c592dbf8c0/",
                                        "format": "uri",
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "handoverType",
                                      "url"
                                    ],
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "setType": {
                                  "default": "dataset",
                                  "description": "Entry type of resultSet. It SHOULD MATCH an entry type declared as collection in the Beacon configuration.",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "id",
                                "setType",
                                "exists",
                                "resultsCount",
                                "results"
                              ]
                            }
                          },
                          "properties": {
                            "$schema": {
                              "$comment": "TO REVIEW: adding a `format` or `regex` attribute that validates correctly against a file path (relative).",
                              "description": "Refers to the JSON Schema which describes the set of valid attributes for this particular document type. This attribute is mostly used in schemas that should be tested in Beacon implementations.",
                              "type": "string"
                            },
                            "resultSets": {
                              "items": {
                                "additionalProperties": true,
                                "properties": {
                                  "exists": {
                                    "type": "boolean"
                                  },
                                  "id": {
                                    "description": "id of the resultset",
                                    "example": "datasetA",
                                    "type": "string"
                                  },
                                  "info": {
                                    "description": "Additional details that could be of interest about the Resultset. Provided to clearly enclose any attribute that is not part of the Beacon specification.",
                                    "type": "object"
                                  },
                                  "results": {
                                    "items": {
                                      "type": "object"
                                    },
                                    "minItems": 0,
                                    "type": "array"
                                  },
                                  "resultsCount": {
                                    "description": "Number of results in this Resultset.",
                                    "type": "integer"
                                  },
                                  "resultsHandovers": {
                                    "description": "List of handovers that apply to this resultset, not to the whole Beacon or to a result in particular.",
                                    "items": {
                                      "description": "Requested schema to be used for individuals in the response.",
                                      "properties": {
                                        "handoverType": {
                                          "description": "Handover type, as an Ontology_term object with CURIE syntax for the `id` value. Use `CUSTOM` for the `id` when no ontology is available.",
                                          "examples": [
                                            {
                                              "id": "EFO:0004157",
                                              "label": "BAM format"
                                            },
                                            {
                                              "id": "CUSTOM",
                                              "label": "download genomic variants in .pgxseg file format"
                                            }
                                          ],
                                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                                          "additionalProperties": true,
                                          "properties": {
                                            "id": {
                                              "description": "A CURIE identifier, e.g. as `id` for an ontology term.",
                                              "examples": [
                                                "ga4gh:GA.01234abcde",
                                                "DUO:0000004",
                                                "orcid:0000-0003-3463-0775",
                                                "PMID:15254584"
                                              ],
                                              "pattern": "^\\w[^:]+:.+$",
                                              "type": "string"
                                            },
                                            "label": {
                                              "description": "The text that describes the term. By default it could be the preferred text of the term, but is it acceptable to customize it for a clearer description and understanding of the term in an specific context.",
                                              "type": "string"
                                            }
                                          },
                                          "required": [
                                            "id"
                                          ],
                                          "title": "Ontology Term",
                                          "type": "object"
                                        },
                                        "note": {
                                          "description": "An optional text including considerations on the handover link provided.",
                                          "example": "This handover link provides access to a summarized VCF.",
                                          "type": "string"
                                        },
                                        "url": {
                                          "description": "URL endpoint to where the handover process could progress, in RFC3986 format",
                                          "example": "https://api.mygenomeservice.org/Handover/9dcc48d7-fc88-11e8-9110-b0c592dbf8c0/",
                                          "format": "uri",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "handoverType",
                                        "url"
                                      ],
                                      "type": "object"
                                    },
                                    "type": "array"
                                  },
                                  "setType": {
                                    "default": "dataset",
                                    "description": "Entry type of resultSet. It SHOULD MATCH an entry type declared as collection in the Beacon configuration.",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id",
                                  "setType",
                                  "exists",
                                  "resultsCount",
                                  "results"
                                ]
                              },
                              "minItems": 0,
                              "type": "array"
                            }
                          },
                          "required": [
                            "resultSets"
                          ],
                          "title": "Beacon ResultSet",
                          "type": "object"
                        },
                        "responseSummary": {
                          "description": "Response summary, including Boolean and optionally results count.",
                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                          "properties": {
                            "exists": {
                              "description": "Indicator of whether any entry was observed. This should be non-null, unless there was an error, in which case an error response is expected instead of this one.",
                              "examples": [
                                true
                              ],
                              "type": "boolean"
                            },
                            "numTotalResults": {
                              "description": "Total number of results.",
                              "examples": [
                                123
                              ],
                              "minimum": 0,
                              "type": "integer"
                            }
                          },
                          "required": [
                            "exists"
                          ],
                          "type": "object"
                        }
                      },
                      "required": [
                        "meta",
                        "responseSummary",
                        "response"
                      ],
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Successful operation."
          },
          "default": {
            "description": "An unsuccessful operation",
            "$schema": "https://json-schema.org/draft/2020-12/schema",
            "additionalProperties": true,
            "properties": {
              "error": {
                "description": "Error response",
                "properties": {
                  "errorCode": {
                    "description": "Entry not found",
                    "examples": [
                      "404"
                    ],
                    "format": "int32",
                    "type": "integer"
                  },
                  "errorMessage": {
                    "examples": [
                      "the provided parameters are incomplete. 'xyz' is missing."
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "errorCode"
                ],
                "type": "object"
              },
              "meta": {
                "description": "Information about the response that could be relevant for the Beacon client in order to interpret the results.",
                "$schema": "https://json-schema.org/draft/2020-12/schema",
                "properties": {
                  "apiVersion": {
                    "description": "Version of the Beacon API.",
                    "example": "v2.0",
                    "type": "string"
                  },
                  "beaconId": {
                    "description": "Identifier of the beacon instance.",
                    "example": "org.example.beacon.v2",
                    "type": "string"
                  },
                  "receivedRequestSummary": {
                    "description": "Section of the response that summarize the request received as it has been interpreted by the Beacon server.",
                    "$schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                      "apiVersion": {
                        "description": "API version expected by the client to be supported by the server and used in the response format.",
                        "example": "v2.0",
                        "type": "string"
                      },
                      "filters": {
                        "description": "Filters as submitted in the request.",
                        "example": [
                          "BTO:0000199",
                          "PATO:0000383"
                        ],
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "includeResultsetResponses": {
                        "default": "HIT",
                        "description": "Indicator of whether responses from every Resultset should be included in the response to this request or just the ones with positive, negative results or no details at all. If null (not specified), the default value of 'HIT' is assumed. This parameter allows for returning boolean/counting results although the Beacon instance is capable to return record level details.",
                        "enum": [
                          "ALL",
                          "HIT",
                          "MISS",
                          "NONE"
                        ],
                        "examples": [
                          "ALL",
                          "HIT",
                          "MISS",
                          "NONE"
                        ],
                        "type": "string"
                      },
                      "pagination": {
                        "description": "Pagination as requested for the results.",
                        "properties": {
                          "currentPage": {
                            "description": "Token of the returned page. To be used only in the response to allow the client to check if the returned page is the one requested.",
                            "example": "ab0sc&fe1dd",
                            "type": "string"
                          },
                          "limit": {
                            "default": 10,
                            "description": "Size of the page. Use `0` to return all the results or the maximum allowed by the Beacon, if there is any.",
                            "example": 10,
                            "minimum": 0,
                            "type": "integer"
                          },
                          "nextPage": {
                            "description": "Token of the next page. Used to navigate forward. If empty, it is assumed that no more pages are available",
                            "example": "ab0sc&fe1dd",
                            "type": "string"
                          },
                          "previousPage": {
                            "description": "Token of the previous page. Used to navigate backwards. If empty, it is assumed that the current page is the first one.",
                            "example": "ab0sc&fe1dd",
                            "type": "string"
                          },
                          "skip": {
                            "default": 0,
                            "description": "* In the request: number of pages to skip * In the response: number of pages that has been skipped",
                            "example": 0,
                            "minimum": 0,
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "requestParameters": {
                        "description": "Dictionary of request parameters received in the `RequestBody` or as part of a GET request.",
                        "$schema": "https://json-schema.org/draft/2020-12/schema",
                        "additionalProperties": {
                          "type": "object"
                        },
                        "properties": {
                          "$schema": {
                            "description": "Added here to allow proper validation of the documents.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "requestedGranularity": {
                        "description": "Requested granularity for the response which may differe from the response's actual granularity.",
                        "default": "boolean",
                        "enum": [
                          "boolean",
                          "count",
                          "aggregated",
                          "record"
                        ],
                        "type": "string"
                      },
                      "requestedSchemas": {
                        "$comment": "TODO: Add the format attribute as a uri.",
                        "description": "Set of schemas to be used in the response to a request. `minItems: 0` is used to confirm that an empty array is acceptable here.",
                        "minItems": 0,
                        "items": {
                          "description": "Schema to be used for the requested entry type in the response.",
                          "properties": {
                            "entityType": {
                              "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                              "example": "Individual",
                              "type": "string"
                            },
                            "schema": {
                              "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                              "examples": [
                                "./ga4gh-beacon-dataset-v2.0.0",
                                "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "testMode": {
                        "description": "Used for indicating that a request was received in a test context.",
                        "default": false,
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "apiVersion",
                      "requestedSchemas",
                      "pagination",
                      "requestedGranularity"
                    ],
                    "type": "object"
                  },
                  "returnedGranularity": {
                    "description": "Granularity of the Beacon response. Targeted Beacon could respond or not with the requested granularity. E.g. record level granularity could be requested, but the Beacon could respond only with boolean or count results.",
                    "default": "boolean",
                    "enum": [
                      "boolean",
                      "count",
                      "aggregated",
                      "record"
                    ],
                    "type": "string"
                  },
                  "returnedSchemas": {
                    "description": "Set of schemas to be used in the response to a request.",
                    "items": {
                      "description": "Schema to be used for the requested entry type in the response.",
                      "properties": {
                        "entityType": {
                          "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                          "example": "Individual",
                          "type": "string"
                        },
                        "schema": {
                          "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                          "examples": [
                            "./ga4gh-beacon-dataset-v2.0.0",
                            "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "testMode": {
                    "description": "Used for indicating that a response is returned in a test context. Purposed for compliance testing. Information returned could be fake.",
                    "default": false,
                    "type": "boolean"
                  }
                },
                "required": [
                  "beaconId",
                  "apiVersion",
                  "returnedSchemas",
                  "returnedGranularity",
                  "receivedRequestSummary"
                ],
                "type": "object"
              }
            },
            "required": [
              "meta",
              "error"
            ],
            "type": "object"
          }
        },
        "tags": [
          "POST Endpoints"
        ]
      }
    },
    "/g_variants/{id}/biosamples": {
      "get": {
        "description": "Get the biosamples list from one genomic variant, identified by its (unique) 'id'",
        "operationId": "getOneGenomicVariantBiosamples",
        "parameters": [
          {
            "description": "Schema to be used to format the `result` field in the response. The response will use Beacon format.",
            "example": "ga4gh-service-info-v1.0",
            "in": "query",
            "name": "requestedSchema",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "skip",
            "schema": {
              "default": 0,
              "description": "* In the request: number of pages to skip * In the response: number of pages that has been skipped",
              "example": 0,
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 10,
              "description": "Size of the page. Use `0` to return all the results or the maximum allowed by the Beacon, if there is any.",
              "example": 10,
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$schema": "https://json-schema.org/draft/2020-12/schema",
                      "description": "Complete definition for a minimal response that provides *only* a `Boolean` exists true|false answer.",
                      "properties": {
                        "beaconHandovers": {
                          "description": "List of handovers that apply to the whole response, not to any resultset or result in particular.",
                          "items": {
                            "description": "Requested schema to be used for individuals in the response.",
                            "properties": {
                              "handoverType": {
                                "description": "Handover type, as an Ontology_term object with CURIE syntax for the `id` value. Use `CUSTOM` for the `id` when no ontology is available.",
                                "examples": [
                                  {
                                    "id": "EFO:0004157",
                                    "label": "BAM format"
                                  },
                                  {
                                    "id": "CUSTOM",
                                    "label": "download genomic variants in .pgxseg file format"
                                  }
                                ],
                                "$schema": "https://json-schema.org/draft/2020-12/schema",
                                "additionalProperties": true,
                                "properties": {
                                  "id": {
                                    "description": "A CURIE identifier, e.g. as `id` for an ontology term.",
                                    "examples": [
                                      "ga4gh:GA.01234abcde",
                                      "DUO:0000004",
                                      "orcid:0000-0003-3463-0775",
                                      "PMID:15254584"
                                    ],
                                    "pattern": "^\\w[^:]+:.+$",
                                    "type": "string"
                                  },
                                  "label": {
                                    "description": "The text that describes the term. By default it could be the preferred text of the term, but is it acceptable to customize it for a clearer description and understanding of the term in an specific context.",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id"
                                ],
                                "title": "Ontology Term",
                                "type": "object"
                              },
                              "note": {
                                "description": "An optional text including considerations on the handover link provided.",
                                "example": "This handover link provides access to a summarized VCF.",
                                "type": "string"
                              },
                              "url": {
                                "description": "URL endpoint to where the handover process could progress, in RFC3986 format",
                                "example": "https://api.mygenomeservice.org/Handover/9dcc48d7-fc88-11e8-9110-b0c592dbf8c0/",
                                "format": "uri",
                                "type": "string"
                              }
                            },
                            "required": [
                              "handoverType",
                              "url"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "info": {
                          "description": "Additional details that could be of interest. Provided to clearly enclose any attribute that is not part of the Beacon specification.",
                          "type": "object"
                        },
                        "meta": {
                          "description": "Information about the response that could be relevant for the Beacon client in order to interpret the results.",
                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                          "properties": {
                            "apiVersion": {
                              "description": "Version of the Beacon API.",
                              "example": "v2.0",
                              "type": "string"
                            },
                            "beaconId": {
                              "description": "Identifier of the beacon instance.",
                              "example": "org.example.beacon.v2",
                              "type": "string"
                            },
                            "receivedRequestSummary": {
                              "description": "Section of the response that summarize the request received as it has been interpreted by the Beacon server.",
                              "$schema": "https://json-schema.org/draft/2020-12/schema",
                              "properties": {
                                "apiVersion": {
                                  "description": "API version expected by the client to be supported by the server and used in the response format.",
                                  "example": "v2.0",
                                  "type": "string"
                                },
                                "filters": {
                                  "description": "Filters as submitted in the request.",
                                  "example": [
                                    "BTO:0000199",
                                    "PATO:0000383"
                                  ],
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "includeResultsetResponses": {
                                  "default": "HIT",
                                  "description": "Indicator of whether responses from every Resultset should be included in the response to this request or just the ones with positive, negative results or no details at all. If null (not specified), the default value of 'HIT' is assumed. This parameter allows for returning boolean/counting results although the Beacon instance is capable to return record level details.",
                                  "enum": [
                                    "ALL",
                                    "HIT",
                                    "MISS",
                                    "NONE"
                                  ],
                                  "examples": [
                                    "ALL",
                                    "HIT",
                                    "MISS",
                                    "NONE"
                                  ],
                                  "type": "string"
                                },
                                "pagination": {
                                  "description": "Pagination as requested for the results.",
                                  "properties": {
                                    "currentPage": {
                                      "description": "Token of the returned page. To be used only in the response to allow the client to check if the returned page is the one requested.",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "limit": {
                                      "default": 10,
                                      "description": "Size of the page. Use `0` to return all the results or the maximum allowed by the Beacon, if there is any.",
                                      "example": 10,
                                      "minimum": 0,
                                      "type": "integer"
                                    },
                                    "nextPage": {
                                      "description": "Token of the next page. Used to navigate forward. If empty, it is assumed that no more pages are available",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "previousPage": {
                                      "description": "Token of the previous page. Used to navigate backwards. If empty, it is assumed that the current page is the first one.",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "skip": {
                                      "default": 0,
                                      "description": "* In the request: number of pages to skip * In the response: number of pages that has been skipped",
                                      "example": 0,
                                      "minimum": 0,
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "requestParameters": {
                                  "description": "Dictionary of request parameters received in the `RequestBody` or as part of a GET request.",
                                  "$schema": "https://json-schema.org/draft/2020-12/schema",
                                  "additionalProperties": {
                                    "type": "object"
                                  },
                                  "properties": {
                                    "$schema": {
                                      "description": "Added here to allow proper validation of the documents.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "requestedGranularity": {
                                  "description": "Requested granularity for the response which may differe from the response's actual granularity.",
                                  "default": "boolean",
                                  "enum": [
                                    "boolean",
                                    "count",
                                    "aggregated",
                                    "record"
                                  ],
                                  "type": "string"
                                },
                                "requestedSchemas": {
                                  "$comment": "TODO: Add the format attribute as a uri.",
                                  "description": "Set of schemas to be used in the response to a request. `minItems: 0` is used to confirm that an empty array is acceptable here.",
                                  "minItems": 0,
                                  "items": {
                                    "description": "Schema to be used for the requested entry type in the response.",
                                    "properties": {
                                      "entityType": {
                                        "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                                        "example": "Individual",
                                        "type": "string"
                                      },
                                      "schema": {
                                        "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                                        "examples": [
                                          "./ga4gh-beacon-dataset-v2.0.0",
                                          "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "testMode": {
                                  "description": "Used for indicating that a request was received in a test context.",
                                  "default": false,
                                  "type": "boolean"
                                }
                              },
                              "required": [
                                "apiVersion",
                                "requestedSchemas",
                                "pagination",
                                "requestedGranularity"
                              ],
                              "type": "object"
                            },
                            "returnedGranularity": {
                              "description": "Granularity of the Beacon response. Targeted Beacon could respond or not with the requested granularity. E.g. record level granularity could be requested, but the Beacon could respond only with boolean or count results.",
                              "default": "boolean",
                              "enum": [
                                "boolean",
                                "count",
                                "aggregated",
                                "record"
                              ],
                              "type": "string"
                            },
                            "returnedSchemas": {
                              "description": "Set of schemas to be used in the response to a request.",
                              "items": {
                                "description": "Schema to be used for the requested entry type in the response.",
                                "properties": {
                                  "entityType": {
                                    "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                                    "example": "Individual",
                                    "type": "string"
                                  },
                                  "schema": {
                                    "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                                    "examples": [
                                      "./ga4gh-beacon-dataset-v2.0.0",
                                      "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                                    ],
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "testMode": {
                              "description": "Used for indicating that a response is returned in a test context. Purposed for compliance testing. Information returned could be fake.",
                              "default": false,
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "beaconId",
                            "apiVersion",
                            "returnedSchemas",
                            "returnedGranularity",
                            "receivedRequestSummary"
                          ],
                          "type": "object"
                        },
                        "responseSummary": {
                          "description": "Boolean (true/false) response section.",
                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                          "properties": {
                            "exists": {
                              "description": "Indicator of whether any entry was observed. This should be non-null, unless there was an error, in which case an error response is expected instead of this one.",
                              "examples": [
                                true
                              ],
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "exists"
                          ],
                          "type": "object"
                        }
                      },
                      "required": [
                        "meta",
                        "responseSummary"
                      ],
                      "type": "object"
                    },
                    {
                      "$schema": "https://json-schema.org/draft/2020-12/schema",
                      "description": "Complete definition for a response that does not include record level details but provides `Boolean` and `count` information.",
                      "properties": {
                        "beaconHandovers": {
                          "description": "List of handovers that apply to the whole response, not to any resultset or result in particular.",
                          "items": {
                            "description": "Requested schema to be used for individuals in the response.",
                            "properties": {
                              "handoverType": {
                                "description": "Handover type, as an Ontology_term object with CURIE syntax for the `id` value. Use `CUSTOM` for the `id` when no ontology is available.",
                                "examples": [
                                  {
                                    "id": "EFO:0004157",
                                    "label": "BAM format"
                                  },
                                  {
                                    "id": "CUSTOM",
                                    "label": "download genomic variants in .pgxseg file format"
                                  }
                                ],
                                "$schema": "https://json-schema.org/draft/2020-12/schema",
                                "additionalProperties": true,
                                "properties": {
                                  "id": {
                                    "description": "A CURIE identifier, e.g. as `id` for an ontology term.",
                                    "examples": [
                                      "ga4gh:GA.01234abcde",
                                      "DUO:0000004",
                                      "orcid:0000-0003-3463-0775",
                                      "PMID:15254584"
                                    ],
                                    "pattern": "^\\w[^:]+:.+$",
                                    "type": "string"
                                  },
                                  "label": {
                                    "description": "The text that describes the term. By default it could be the preferred text of the term, but is it acceptable to customize it for a clearer description and understanding of the term in an specific context.",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id"
                                ],
                                "title": "Ontology Term",
                                "type": "object"
                              },
                              "note": {
                                "description": "An optional text including considerations on the handover link provided.",
                                "example": "This handover link provides access to a summarized VCF.",
                                "type": "string"
                              },
                              "url": {
                                "description": "URL endpoint to where the handover process could progress, in RFC3986 format",
                                "example": "https://api.mygenomeservice.org/Handover/9dcc48d7-fc88-11e8-9110-b0c592dbf8c0/",
                                "format": "uri",
                                "type": "string"
                              }
                            },
                            "required": [
                              "handoverType",
                              "url"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "info": {
                          "description": "Additional details that could be of interest. Provided to clearly enclose any attribute that is not part of the Beacon specification.",
                          "type": "object"
                        },
                        "meta": {
                          "description": "Information about the response that could be relevant for the Beacon client in order to interpret the results.",
                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                          "properties": {
                            "apiVersion": {
                              "description": "Version of the Beacon API.",
                              "example": "v2.0",
                              "type": "string"
                            },
                            "beaconId": {
                              "description": "Identifier of the beacon instance.",
                              "example": "org.example.beacon.v2",
                              "type": "string"
                            },
                            "receivedRequestSummary": {
                              "description": "Section of the response that summarize the request received as it has been interpreted by the Beacon server.",
                              "$schema": "https://json-schema.org/draft/2020-12/schema",
                              "properties": {
                                "apiVersion": {
                                  "description": "API version expected by the client to be supported by the server and used in the response format.",
                                  "example": "v2.0",
                                  "type": "string"
                                },
                                "filters": {
                                  "description": "Filters as submitted in the request.",
                                  "example": [
                                    "BTO:0000199",
                                    "PATO:0000383"
                                  ],
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "includeResultsetResponses": {
                                  "default": "HIT",
                                  "description": "Indicator of whether responses from every Resultset should be included in the response to this request or just the ones with positive, negative results or no details at all. If null (not specified), the default value of 'HIT' is assumed. This parameter allows for returning boolean/counting results although the Beacon instance is capable to return record level details.",
                                  "enum": [
                                    "ALL",
                                    "HIT",
                                    "MISS",
                                    "NONE"
                                  ],
                                  "examples": [
                                    "ALL",
                                    "HIT",
                                    "MISS",
                                    "NONE"
                                  ],
                                  "type": "string"
                                },
                                "pagination": {
                                  "description": "Pagination as requested for the results.",
                                  "properties": {
                                    "currentPage": {
                                      "description": "Token of the returned page. To be used only in the response to allow the client to check if the returned page is the one requested.",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "limit": {
                                      "default": 10,
                                      "description": "Size of the page. Use `0` to return all the results or the maximum allowed by the Beacon, if there is any.",
                                      "example": 10,
                                      "minimum": 0,
                                      "type": "integer"
                                    },
                                    "nextPage": {
                                      "description": "Token of the next page. Used to navigate forward. If empty, it is assumed that no more pages are available",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "previousPage": {
                                      "description": "Token of the previous page. Used to navigate backwards. If empty, it is assumed that the current page is the first one.",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "skip": {
                                      "default": 0,
                                      "description": "* In the request: number of pages to skip * In the response: number of pages that has been skipped",
                                      "example": 0,
                                      "minimum": 0,
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "requestParameters": {
                                  "description": "Dictionary of request parameters received in the `RequestBody` or as part of a GET request.",
                                  "$schema": "https://json-schema.org/draft/2020-12/schema",
                                  "additionalProperties": {
                                    "type": "object"
                                  },
                                  "properties": {
                                    "$schema": {
                                      "description": "Added here to allow proper validation of the documents.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "requestedGranularity": {
                                  "description": "Requested granularity for the response which may differe from the response's actual granularity.",
                                  "default": "boolean",
                                  "enum": [
                                    "boolean",
                                    "count",
                                    "aggregated",
                                    "record"
                                  ],
                                  "type": "string"
                                },
                                "requestedSchemas": {
                                  "$comment": "TODO: Add the format attribute as a uri.",
                                  "description": "Set of schemas to be used in the response to a request. `minItems: 0` is used to confirm that an empty array is acceptable here.",
                                  "minItems": 0,
                                  "items": {
                                    "description": "Schema to be used for the requested entry type in the response.",
                                    "properties": {
                                      "entityType": {
                                        "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                                        "example": "Individual",
                                        "type": "string"
                                      },
                                      "schema": {
                                        "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                                        "examples": [
                                          "./ga4gh-beacon-dataset-v2.0.0",
                                          "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "testMode": {
                                  "description": "Used for indicating that a request was received in a test context.",
                                  "default": false,
                                  "type": "boolean"
                                }
                              },
                              "required": [
                                "apiVersion",
                                "requestedSchemas",
                                "pagination",
                                "requestedGranularity"
                              ],
                              "type": "object"
                            },
                            "returnedGranularity": {
                              "description": "Granularity of the Beacon response. Targeted Beacon could respond or not with the requested granularity. E.g. record level granularity could be requested, but the Beacon could respond only with boolean or count results.",
                              "default": "boolean",
                              "enum": [
                                "boolean",
                                "count",
                                "aggregated",
                                "record"
                              ],
                              "type": "string"
                            },
                            "returnedSchemas": {
                              "description": "Set of schemas to be used in the response to a request.",
                              "items": {
                                "description": "Schema to be used for the requested entry type in the response.",
                                "properties": {
                                  "entityType": {
                                    "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                                    "example": "Individual",
                                    "type": "string"
                                  },
                                  "schema": {
                                    "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                                    "examples": [
                                      "./ga4gh-beacon-dataset-v2.0.0",
                                      "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                                    ],
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "testMode": {
                              "description": "Used for indicating that a response is returned in a test context. Purposed for compliance testing. Information returned could be fake.",
                              "default": false,
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "beaconId",
                            "apiVersion",
                            "returnedSchemas",
                            "returnedGranularity",
                            "receivedRequestSummary"
                          ],
                          "type": "object"
                        },
                        "responseSummary": {
                          "description": "Response summary, including Boolean and optionally results count.",
                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                          "properties": {
                            "exists": {
                              "description": "Indicator of whether any entry was observed. This should be non-null, unless there was an error, in which case a `beaconErrorResponse` is expected instead of this one.",
                              "examples": [
                                true
                              ],
                              "type": "boolean"
                            },
                            "numTotalResults": {
                              "description": "Total number of results.",
                              "examples": [
                                123
                              ],
                              "minimum": 0,
                              "type": "integer"
                            }
                          },
                          "required": [
                            "exists",
                            "numTotalResults"
                          ],
                          "type": "object"
                        }
                      },
                      "required": [
                        "meta",
                        "responseSummary"
                      ],
                      "type": "object"
                    },
                    {
                      "$schema": "https://json-schema.org/draft/2020-12/schema",
                      "additionalProperties": true,
                      "description": "Beacon response that includes record level details, grouped in Resultsets.",
                      "properties": {
                        "beaconHandovers": {
                          "description": "List of handovers that apply to the whole response, not to any resultset or result in particular.",
                          "items": {
                            "description": "Requested schema to be used for individuals in the response.",
                            "properties": {
                              "handoverType": {
                                "description": "Handover type, as an Ontology_term object with CURIE syntax for the `id` value. Use `CUSTOM` for the `id` when no ontology is available.",
                                "examples": [
                                  {
                                    "id": "EFO:0004157",
                                    "label": "BAM format"
                                  },
                                  {
                                    "id": "CUSTOM",
                                    "label": "download genomic variants in .pgxseg file format"
                                  }
                                ],
                                "$schema": "https://json-schema.org/draft/2020-12/schema",
                                "additionalProperties": true,
                                "properties": {
                                  "id": {
                                    "description": "A CURIE identifier, e.g. as `id` for an ontology term.",
                                    "examples": [
                                      "ga4gh:GA.01234abcde",
                                      "DUO:0000004",
                                      "orcid:0000-0003-3463-0775",
                                      "PMID:15254584"
                                    ],
                                    "pattern": "^\\w[^:]+:.+$",
                                    "type": "string"
                                  },
                                  "label": {
                                    "description": "The text that describes the term. By default it could be the preferred text of the term, but is it acceptable to customize it for a clearer description and understanding of the term in an specific context.",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id"
                                ],
                                "title": "Ontology Term",
                                "type": "object"
                              },
                              "note": {
                                "description": "An optional text including considerations on the handover link provided.",
                                "example": "This handover link provides access to a summarized VCF.",
                                "type": "string"
                              },
                              "url": {
                                "description": "URL endpoint to where the handover process could progress, in RFC3986 format",
                                "example": "https://api.mygenomeservice.org/Handover/9dcc48d7-fc88-11e8-9110-b0c592dbf8c0/",
                                "format": "uri",
                                "type": "string"
                              }
                            },
                            "required": [
                              "handoverType",
                              "url"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "info": {
                          "description": "Additional details that could be of interest. Provided to clearly enclose any attribute that is not part of the Beacon specification.",
                          "type": "object"
                        },
                        "meta": {
                          "description": "Information about the response that could be relevant for the Beacon client in order to interpret the results.",
                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                          "properties": {
                            "apiVersion": {
                              "description": "Version of the Beacon API.",
                              "example": "v2.0",
                              "type": "string"
                            },
                            "beaconId": {
                              "description": "Identifier of the beacon instance.",
                              "example": "org.example.beacon.v2",
                              "type": "string"
                            },
                            "receivedRequestSummary": {
                              "description": "Section of the response that summarize the request received as it has been interpreted by the Beacon server.",
                              "$schema": "https://json-schema.org/draft/2020-12/schema",
                              "properties": {
                                "apiVersion": {
                                  "description": "API version expected by the client to be supported by the server and used in the response format.",
                                  "example": "v2.0",
                                  "type": "string"
                                },
                                "filters": {
                                  "description": "Filters as submitted in the request.",
                                  "example": [
                                    "BTO:0000199",
                                    "PATO:0000383"
                                  ],
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "includeResultsetResponses": {
                                  "default": "HIT",
                                  "description": "Indicator of whether responses from every Resultset should be included in the response to this request or just the ones with positive, negative results or no details at all. If null (not specified), the default value of 'HIT' is assumed. This parameter allows for returning boolean/counting results although the Beacon instance is capable to return record level details.",
                                  "enum": [
                                    "ALL",
                                    "HIT",
                                    "MISS",
                                    "NONE"
                                  ],
                                  "examples": [
                                    "ALL",
                                    "HIT",
                                    "MISS",
                                    "NONE"
                                  ],
                                  "type": "string"
                                },
                                "pagination": {
                                  "description": "Pagination as requested for the results.",
                                  "properties": {
                                    "currentPage": {
                                      "description": "Token of the returned page. To be used only in the response to allow the client to check if the returned page is the one requested.",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "limit": {
                                      "default": 10,
                                      "description": "Size of the page. Use `0` to return all the results or the maximum allowed by the Beacon, if there is any.",
                                      "example": 10,
                                      "minimum": 0,
                                      "type": "integer"
                                    },
                                    "nextPage": {
                                      "description": "Token of the next page. Used to navigate forward. If empty, it is assumed that no more pages are available",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "previousPage": {
                                      "description": "Token of the previous page. Used to navigate backwards. If empty, it is assumed that the current page is the first one.",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "skip": {
                                      "default": 0,
                                      "description": "* In the request: number of pages to skip * In the response: number of pages that has been skipped",
                                      "example": 0,
                                      "minimum": 0,
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "requestParameters": {
                                  "description": "Dictionary of request parameters received in the `RequestBody` or as part of a GET request.",
                                  "$schema": "https://json-schema.org/draft/2020-12/schema",
                                  "additionalProperties": {
                                    "type": "object"
                                  },
                                  "properties": {
                                    "$schema": {
                                      "description": "Added here to allow proper validation of the documents.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "requestedGranularity": {
                                  "description": "Requested granularity for the response which may differe from the response's actual granularity.",
                                  "default": "boolean",
                                  "enum": [
                                    "boolean",
                                    "count",
                                    "aggregated",
                                    "record"
                                  ],
                                  "type": "string"
                                },
                                "requestedSchemas": {
                                  "$comment": "TODO: Add the format attribute as a uri.",
                                  "description": "Set of schemas to be used in the response to a request. `minItems: 0` is used to confirm that an empty array is acceptable here.",
                                  "minItems": 0,
                                  "items": {
                                    "description": "Schema to be used for the requested entry type in the response.",
                                    "properties": {
                                      "entityType": {
                                        "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                                        "example": "Individual",
                                        "type": "string"
                                      },
                                      "schema": {
                                        "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                                        "examples": [
                                          "./ga4gh-beacon-dataset-v2.0.0",
                                          "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "testMode": {
                                  "description": "Used for indicating that a request was received in a test context.",
                                  "default": false,
                                  "type": "boolean"
                                }
                              },
                              "required": [
                                "apiVersion",
                                "requestedSchemas",
                                "pagination",
                                "requestedGranularity"
                              ],
                              "type": "object"
                            },
                            "returnedGranularity": {
                              "description": "Granularity of the Beacon response. Targeted Beacon could respond or not with the requested granularity. E.g. record level granularity could be requested, but the Beacon could respond only with boolean or count results.",
                              "default": "boolean",
                              "enum": [
                                "boolean",
                                "count",
                                "aggregated",
                                "record"
                              ],
                              "type": "string"
                            },
                            "returnedSchemas": {
                              "description": "Set of schemas to be used in the response to a request.",
                              "items": {
                                "description": "Schema to be used for the requested entry type in the response.",
                                "properties": {
                                  "entityType": {
                                    "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                                    "example": "Individual",
                                    "type": "string"
                                  },
                                  "schema": {
                                    "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                                    "examples": [
                                      "./ga4gh-beacon-dataset-v2.0.0",
                                      "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                                    ],
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "testMode": {
                              "description": "Used for indicating that a response is returned in a test context. Purposed for compliance testing. Information returned could be fake.",
                              "default": false,
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "beaconId",
                            "apiVersion",
                            "returnedSchemas",
                            "returnedGranularity",
                            "receivedRequestSummary"
                          ],
                          "type": "object"
                        },
                        "response": {
                          "description": "Response for queries that recovers any result.",
                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                          "additionalProperties": true,
                          "definitions": {
                            "ResultsetInstance": {
                              "additionalProperties": true,
                              "properties": {
                                "exists": {
                                  "type": "boolean"
                                },
                                "id": {
                                  "description": "id of the resultset",
                                  "example": "datasetA",
                                  "type": "string"
                                },
                                "info": {
                                  "description": "Additional details that could be of interest about the Resultset. Provided to clearly enclose any attribute that is not part of the Beacon specification.",
                                  "type": "object"
                                },
                                "results": {
                                  "items": {
                                    "type": "object"
                                  },
                                  "minItems": 0,
                                  "type": "array"
                                },
                                "resultsCount": {
                                  "description": "Number of results in this Resultset.",
                                  "type": "integer"
                                },
                                "resultsHandovers": {
                                  "description": "List of handovers that apply to this resultset, not to the whole Beacon or to a result in particular.",
                                  "items": {
                                    "description": "Requested schema to be used for individuals in the response.",
                                    "properties": {
                                      "handoverType": {
                                        "description": "Handover type, as an Ontology_term object with CURIE syntax for the `id` value. Use `CUSTOM` for the `id` when no ontology is available.",
                                        "examples": [
                                          {
                                            "id": "EFO:0004157",
                                            "label": "BAM format"
                                          },
                                          {
                                            "id": "CUSTOM",
                                            "label": "download genomic variants in .pgxseg file format"
                                          }
                                        ],
                                        "$schema": "https://json-schema.org/draft/2020-12/schema",
                                        "additionalProperties": true,
                                        "properties": {
                                          "id": {
                                            "description": "A CURIE identifier, e.g. as `id` for an ontology term.",
                                            "examples": [
                                              "ga4gh:GA.01234abcde",
                                              "DUO:0000004",
                                              "orcid:0000-0003-3463-0775",
                                              "PMID:15254584"
                                            ],
                                            "pattern": "^\\w[^:]+:.+$",
                                            "type": "string"
                                          },
                                          "label": {
                                            "description": "The text that describes the term. By default it could be the preferred text of the term, but is it acceptable to customize it for a clearer description and understanding of the term in an specific context.",
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "id"
                                        ],
                                        "title": "Ontology Term",
                                        "type": "object"
                                      },
                                      "note": {
                                        "description": "An optional text including considerations on the handover link provided.",
                                        "example": "This handover link provides access to a summarized VCF.",
                                        "type": "string"
                                      },
                                      "url": {
                                        "description": "URL endpoint to where the handover process could progress, in RFC3986 format",
                                        "example": "https://api.mygenomeservice.org/Handover/9dcc48d7-fc88-11e8-9110-b0c592dbf8c0/",
                                        "format": "uri",
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "handoverType",
                                      "url"
                                    ],
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "setType": {
                                  "default": "dataset",
                                  "description": "Entry type of resultSet. It SHOULD MATCH an entry type declared as collection in the Beacon configuration.",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "id",
                                "setType",
                                "exists",
                                "resultsCount",
                                "results"
                              ]
                            }
                          },
                          "properties": {
                            "$schema": {
                              "$comment": "TO REVIEW: adding a `format` or `regex` attribute that validates correctly against a file path (relative).",
                              "description": "Refers to the JSON Schema which describes the set of valid attributes for this particular document type. This attribute is mostly used in schemas that should be tested in Beacon implementations.",
                              "type": "string"
                            },
                            "resultSets": {
                              "items": {
                                "additionalProperties": true,
                                "properties": {
                                  "exists": {
                                    "type": "boolean"
                                  },
                                  "id": {
                                    "description": "id of the resultset",
                                    "example": "datasetA",
                                    "type": "string"
                                  },
                                  "info": {
                                    "description": "Additional details that could be of interest about the Resultset. Provided to clearly enclose any attribute that is not part of the Beacon specification.",
                                    "type": "object"
                                  },
                                  "results": {
                                    "items": {
                                      "type": "object"
                                    },
                                    "minItems": 0,
                                    "type": "array"
                                  },
                                  "resultsCount": {
                                    "description": "Number of results in this Resultset.",
                                    "type": "integer"
                                  },
                                  "resultsHandovers": {
                                    "description": "List of handovers that apply to this resultset, not to the whole Beacon or to a result in particular.",
                                    "items": {
                                      "description": "Requested schema to be used for individuals in the response.",
                                      "properties": {
                                        "handoverType": {
                                          "description": "Handover type, as an Ontology_term object with CURIE syntax for the `id` value. Use `CUSTOM` for the `id` when no ontology is available.",
                                          "examples": [
                                            {
                                              "id": "EFO:0004157",
                                              "label": "BAM format"
                                            },
                                            {
                                              "id": "CUSTOM",
                                              "label": "download genomic variants in .pgxseg file format"
                                            }
                                          ],
                                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                                          "additionalProperties": true,
                                          "properties": {
                                            "id": {
                                              "description": "A CURIE identifier, e.g. as `id` for an ontology term.",
                                              "examples": [
                                                "ga4gh:GA.01234abcde",
                                                "DUO:0000004",
                                                "orcid:0000-0003-3463-0775",
                                                "PMID:15254584"
                                              ],
                                              "pattern": "^\\w[^:]+:.+$",
                                              "type": "string"
                                            },
                                            "label": {
                                              "description": "The text that describes the term. By default it could be the preferred text of the term, but is it acceptable to customize it for a clearer description and understanding of the term in an specific context.",
                                              "type": "string"
                                            }
                                          },
                                          "required": [
                                            "id"
                                          ],
                                          "title": "Ontology Term",
                                          "type": "object"
                                        },
                                        "note": {
                                          "description": "An optional text including considerations on the handover link provided.",
                                          "example": "This handover link provides access to a summarized VCF.",
                                          "type": "string"
                                        },
                                        "url": {
                                          "description": "URL endpoint to where the handover process could progress, in RFC3986 format",
                                          "example": "https://api.mygenomeservice.org/Handover/9dcc48d7-fc88-11e8-9110-b0c592dbf8c0/",
                                          "format": "uri",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "handoverType",
                                        "url"
                                      ],
                                      "type": "object"
                                    },
                                    "type": "array"
                                  },
                                  "setType": {
                                    "default": "dataset",
                                    "description": "Entry type of resultSet. It SHOULD MATCH an entry type declared as collection in the Beacon configuration.",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id",
                                  "setType",
                                  "exists",
                                  "resultsCount",
                                  "results"
                                ]
                              },
                              "minItems": 0,
                              "type": "array"
                            }
                          },
                          "required": [
                            "resultSets"
                          ],
                          "title": "Beacon ResultSet",
                          "type": "object"
                        },
                        "responseSummary": {
                          "description": "Response summary, including Boolean and optionally results count.",
                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                          "properties": {
                            "exists": {
                              "description": "Indicator of whether any entry was observed. This should be non-null, unless there was an error, in which case an error response is expected instead of this one.",
                              "examples": [
                                true
                              ],
                              "type": "boolean"
                            },
                            "numTotalResults": {
                              "description": "Total number of results.",
                              "examples": [
                                123
                              ],
                              "minimum": 0,
                              "type": "integer"
                            }
                          },
                          "required": [
                            "exists"
                          ],
                          "type": "object"
                        }
                      },
                      "required": [
                        "meta",
                        "responseSummary",
                        "response"
                      ],
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Successful operation."
          },
          "default": {
            "description": "An unsuccessful operation",
            "$schema": "https://json-schema.org/draft/2020-12/schema",
            "additionalProperties": true,
            "properties": {
              "error": {
                "description": "Error response",
                "properties": {
                  "errorCode": {
                    "description": "Entry not found",
                    "examples": [
                      "404"
                    ],
                    "format": "int32",
                    "type": "integer"
                  },
                  "errorMessage": {
                    "examples": [
                      "the provided parameters are incomplete. 'xyz' is missing."
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "errorCode"
                ],
                "type": "object"
              },
              "meta": {
                "description": "Information about the response that could be relevant for the Beacon client in order to interpret the results.",
                "$schema": "https://json-schema.org/draft/2020-12/schema",
                "properties": {
                  "apiVersion": {
                    "description": "Version of the Beacon API.",
                    "example": "v2.0",
                    "type": "string"
                  },
                  "beaconId": {
                    "description": "Identifier of the beacon instance.",
                    "example": "org.example.beacon.v2",
                    "type": "string"
                  },
                  "receivedRequestSummary": {
                    "description": "Section of the response that summarize the request received as it has been interpreted by the Beacon server.",
                    "$schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                      "apiVersion": {
                        "description": "API version expected by the client to be supported by the server and used in the response format.",
                        "example": "v2.0",
                        "type": "string"
                      },
                      "filters": {
                        "description": "Filters as submitted in the request.",
                        "example": [
                          "BTO:0000199",
                          "PATO:0000383"
                        ],
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "includeResultsetResponses": {
                        "default": "HIT",
                        "description": "Indicator of whether responses from every Resultset should be included in the response to this request or just the ones with positive, negative results or no details at all. If null (not specified), the default value of 'HIT' is assumed. This parameter allows for returning boolean/counting results although the Beacon instance is capable to return record level details.",
                        "enum": [
                          "ALL",
                          "HIT",
                          "MISS",
                          "NONE"
                        ],
                        "examples": [
                          "ALL",
                          "HIT",
                          "MISS",
                          "NONE"
                        ],
                        "type": "string"
                      },
                      "pagination": {
                        "description": "Pagination as requested for the results.",
                        "properties": {
                          "currentPage": {
                            "description": "Token of the returned page. To be used only in the response to allow the client to check if the returned page is the one requested.",
                            "example": "ab0sc&fe1dd",
                            "type": "string"
                          },
                          "limit": {
                            "default": 10,
                            "description": "Size of the page. Use `0` to return all the results or the maximum allowed by the Beacon, if there is any.",
                            "example": 10,
                            "minimum": 0,
                            "type": "integer"
                          },
                          "nextPage": {
                            "description": "Token of the next page. Used to navigate forward. If empty, it is assumed that no more pages are available",
                            "example": "ab0sc&fe1dd",
                            "type": "string"
                          },
                          "previousPage": {
                            "description": "Token of the previous page. Used to navigate backwards. If empty, it is assumed that the current page is the first one.",
                            "example": "ab0sc&fe1dd",
                            "type": "string"
                          },
                          "skip": {
                            "default": 0,
                            "description": "* In the request: number of pages to skip * In the response: number of pages that has been skipped",
                            "example": 0,
                            "minimum": 0,
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "requestParameters": {
                        "description": "Dictionary of request parameters received in the `RequestBody` or as part of a GET request.",
                        "$schema": "https://json-schema.org/draft/2020-12/schema",
                        "additionalProperties": {
                          "type": "object"
                        },
                        "properties": {
                          "$schema": {
                            "description": "Added here to allow proper validation of the documents.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "requestedGranularity": {
                        "description": "Requested granularity for the response which may differe from the response's actual granularity.",
                        "default": "boolean",
                        "enum": [
                          "boolean",
                          "count",
                          "aggregated",
                          "record"
                        ],
                        "type": "string"
                      },
                      "requestedSchemas": {
                        "$comment": "TODO: Add the format attribute as a uri.",
                        "description": "Set of schemas to be used in the response to a request. `minItems: 0` is used to confirm that an empty array is acceptable here.",
                        "minItems": 0,
                        "items": {
                          "description": "Schema to be used for the requested entry type in the response.",
                          "properties": {
                            "entityType": {
                              "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                              "example": "Individual",
                              "type": "string"
                            },
                            "schema": {
                              "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                              "examples": [
                                "./ga4gh-beacon-dataset-v2.0.0",
                                "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "testMode": {
                        "description": "Used for indicating that a request was received in a test context.",
                        "default": false,
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "apiVersion",
                      "requestedSchemas",
                      "pagination",
                      "requestedGranularity"
                    ],
                    "type": "object"
                  },
                  "returnedGranularity": {
                    "description": "Granularity of the Beacon response. Targeted Beacon could respond or not with the requested granularity. E.g. record level granularity could be requested, but the Beacon could respond only with boolean or count results.",
                    "default": "boolean",
                    "enum": [
                      "boolean",
                      "count",
                      "aggregated",
                      "record"
                    ],
                    "type": "string"
                  },
                  "returnedSchemas": {
                    "description": "Set of schemas to be used in the response to a request.",
                    "items": {
                      "description": "Schema to be used for the requested entry type in the response.",
                      "properties": {
                        "entityType": {
                          "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                          "example": "Individual",
                          "type": "string"
                        },
                        "schema": {
                          "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                          "examples": [
                            "./ga4gh-beacon-dataset-v2.0.0",
                            "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "testMode": {
                    "description": "Used for indicating that a response is returned in a test context. Purposed for compliance testing. Information returned could be fake.",
                    "default": false,
                    "type": "boolean"
                  }
                },
                "required": [
                  "beaconId",
                  "apiVersion",
                  "returnedSchemas",
                  "returnedGranularity",
                  "receivedRequestSummary"
                ],
                "type": "object"
              }
            },
            "required": [
              "meta",
              "error"
            ],
            "type": "object"
          }
        },
        "tags": [
          "GET Endpoints"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Get the biosamples list from one genomic variant, identified by its (unique) 'id'",
        "operationId": "postOneGenomicVariantBiosamples",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$schema": "https://json-schema.org/draft/2020-12/schema",
                "description": "Schema for the Beacon request. It is named `RequestBody` to keep the same nomenclature used by OpenAPI v3, but it actually contains the definition of the whole HTTP POST request payload.",
                "properties": {
                  "$schema": {
                    "$comment": "TO REVIEW: adding a `format` or `regex` attribute that validates correctly against a file path (relative).",
                    "description": "Refers to the JSON Schema which describes the set of valid attributes for this particular document type. This attribute is mostly used in schemas that should be tested in Beacon implementations.",
                    "type": "string"
                  },
                  "meta": {
                    "description": "Information relevant for building the response.",
                    "$schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                      "$schema": {
                        "$comment": "TO REVIEW: adding a `format` or `regex` attribute that validates correctly against a file path (relative).",
                        "description": "Refers to the JSON Schema which describes the set of valid attributes for this particular document type. This attribute is mostly used in schemas that should be tested in Beacon implementations.",
                        "type": "string"
                      },
                      "apiVersion": {
                        "description": "API version expected by the client to be supported by the server and used in the response format.",
                        "example": "v2.0",
                        "type": "string"
                      },
                      "requestedSchemas": {
                        "description": "Set of schemas to be used in the response.",
                        "items": {
                          "description": "Schema to be used for the requested entry type in the response.",
                          "properties": {
                            "entityType": {
                              "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                              "example": "Individual",
                              "type": "string"
                            },
                            "schema": {
                              "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                              "examples": [
                                "./ga4gh-beacon-dataset-v2.0.0",
                                "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "apiVersion"
                    ],
                    "type": "object"
                  },
                  "query": {
                    "description": "Parameters to limit the list of returned results.",
                    "properties": {
                      "filters": {
                        "description": "Ontology based filters. Using CURIE syntax is encouraged.",
                        "$schema": "https://json-schema.org/draft/2020-12/schema",
                        "additionalProperties": true,
                        "definitions": {
                          "AlphanumericFilter": {
                            "description": "Filter results based on operators and values applied to alphanumeric fields.",
                            "properties": {
                              "id": {
                                "description": "Field identfier to be queried.",
                                "example": "age",
                                "type": "string"
                              },
                              "operator": {
                                "default": "=",
                                "description": "Defines how the value relates to the field `id`.",
                                "enum": [
                                  "=",
                                  "<",
                                  ">",
                                  "!",
                                  ">=",
                                  "<="
                                ],
                                "example": ">",
                                "type": "string"
                              },
                              "scope": {
                                "description": "The entry type to which the filter applies",
                                "example": "biosamples",
                                "type": "string"
                              },
                              "value": {
                                "description": "Alphanumeric search term to be used within the query which can contain wildcard characters (%) to denote any number of unknown characters.  Values can be assocatied with units if applicable.",
                                "example": "P70Y",
                                "type": "string"
                              }
                            },
                            "required": [
                              "id",
                              "operator",
                              "value"
                            ],
                            "type": "object"
                          },
                          "CustomFilter": {
                            "description": "Filter results to include records that contain a custom term defined by this Beacon.",
                            "properties": {
                              "id": {
                                "description": "Custom filter terms should contain a unique identifier.",
                                "example": "demographic.ethnicity:asian",
                                "type": "string"
                              },
                              "scope": {
                                "description": "The entry type to which the filter applies",
                                "example": "biosamples",
                                "type": "string"
                              }
                            },
                            "required": [
                              "id"
                            ],
                            "type": "object"
                          },
                          "FilteringTerm": {
                            "anyOf": [
                              {
                                "description": "Filter results to include records that contain a specific ontology term.",
                                "properties": {
                                  "id": {
                                    "description": "Term ID to be queried, using CURIE syntax where possible.",
                                    "example": "HP:0002664",
                                    "type": "string"
                                  },
                                  "includeDescendantTerms": {
                                    "default": true,
                                    "description": "Define if the Beacon should implement the ontology hierarchy, thus query the descendant terms of `id`.",
                                    "type": "boolean"
                                  },
                                  "scope": {
                                    "description": "The entry type to which the filter applies",
                                    "example": "biosamples",
                                    "type": "string"
                                  },
                                  "similarity": {
                                    "default": "exact",
                                    "description": "Allow the Beacon to return results which do not match the filter exactly, but do match to a certain degree of similarity. The Beacon defines the semantic similarity model implemented and how to apply the thresholds of 'high', 'medium' and 'low' similarity.",
                                    "enum": [
                                      "exact",
                                      "high",
                                      "medium",
                                      "low"
                                    ],
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id"
                                ],
                                "type": "object"
                              },
                              {
                                "description": "Filter results based on operators and values applied to alphanumeric fields.",
                                "properties": {
                                  "id": {
                                    "description": "Field identfier to be queried.",
                                    "example": "age",
                                    "type": "string"
                                  },
                                  "operator": {
                                    "default": "=",
                                    "description": "Defines how the value relates to the field `id`.",
                                    "enum": [
                                      "=",
                                      "<",
                                      ">",
                                      "!",
                                      ">=",
                                      "<="
                                    ],
                                    "example": ">",
                                    "type": "string"
                                  },
                                  "scope": {
                                    "description": "The entry type to which the filter applies",
                                    "example": "biosamples",
                                    "type": "string"
                                  },
                                  "value": {
                                    "description": "Alphanumeric search term to be used within the query which can contain wildcard characters (%) to denote any number of unknown characters.  Values can be assocatied with units if applicable.",
                                    "example": "P70Y",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id",
                                  "operator",
                                  "value"
                                ],
                                "type": "object"
                              },
                              {
                                "description": "Filter results to include records that contain a custom term defined by this Beacon.",
                                "properties": {
                                  "id": {
                                    "description": "Custom filter terms should contain a unique identifier.",
                                    "example": "demographic.ethnicity:asian",
                                    "type": "string"
                                  },
                                  "scope": {
                                    "description": "The entry type to which the filter applies",
                                    "example": "biosamples",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id"
                                ],
                                "type": "object"
                              }
                            ]
                          },
                          "OntologyFilter": {
                            "description": "Filter results to include records that contain a specific ontology term.",
                            "properties": {
                              "id": {
                                "description": "Term ID to be queried, using CURIE syntax where possible.",
                                "example": "HP:0002664",
                                "type": "string"
                              },
                              "includeDescendantTerms": {
                                "default": true,
                                "description": "Define if the Beacon should implement the ontology hierarchy, thus query the descendant terms of `id`.",
                                "type": "boolean"
                              },
                              "scope": {
                                "description": "The entry type to which the filter applies",
                                "example": "biosamples",
                                "type": "string"
                              },
                              "similarity": {
                                "default": "exact",
                                "description": "Allow the Beacon to return results which do not match the filter exactly, but do match to a certain degree of similarity. The Beacon defines the semantic similarity model implemented and how to apply the thresholds of 'high', 'medium' and 'low' similarity.",
                                "enum": [
                                  "exact",
                                  "high",
                                  "medium",
                                  "low"
                                ],
                                "type": "string"
                              }
                            },
                            "required": [
                              "id"
                            ],
                            "type": "object"
                          }
                        },
                        "items": {
                          "anyOf": [
                            {
                              "description": "Filter results to include records that contain a specific ontology term.",
                              "properties": {
                                "id": {
                                  "description": "Term ID to be queried, using CURIE syntax where possible.",
                                  "example": "HP:0002664",
                                  "type": "string"
                                },
                                "includeDescendantTerms": {
                                  "default": true,
                                  "description": "Define if the Beacon should implement the ontology hierarchy, thus query the descendant terms of `id`.",
                                  "type": "boolean"
                                },
                                "scope": {
                                  "description": "The entry type to which the filter applies",
                                  "example": "biosamples",
                                  "type": "string"
                                },
                                "similarity": {
                                  "default": "exact",
                                  "description": "Allow the Beacon to return results which do not match the filter exactly, but do match to a certain degree of similarity. The Beacon defines the semantic similarity model implemented and how to apply the thresholds of 'high', 'medium' and 'low' similarity.",
                                  "enum": [
                                    "exact",
                                    "high",
                                    "medium",
                                    "low"
                                  ],
                                  "type": "string"
                                }
                              },
                              "required": [
                                "id"
                              ],
                              "type": "object"
                            },
                            {
                              "description": "Filter results based on operators and values applied to alphanumeric fields.",
                              "properties": {
                                "id": {
                                  "description": "Field identfier to be queried.",
                                  "example": "age",
                                  "type": "string"
                                },
                                "operator": {
                                  "default": "=",
                                  "description": "Defines how the value relates to the field `id`.",
                                  "enum": [
                                    "=",
                                    "<",
                                    ">",
                                    "!",
                                    ">=",
                                    "<="
                                  ],
                                  "example": ">",
                                  "type": "string"
                                },
                                "scope": {
                                  "description": "The entry type to which the filter applies",
                                  "example": "biosamples",
                                  "type": "string"
                                },
                                "value": {
                                  "description": "Alphanumeric search term to be used within the query which can contain wildcard characters (%) to denote any number of unknown characters.  Values can be assocatied with units if applicable.",
                                  "example": "P70Y",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "id",
                                "operator",
                                "value"
                              ],
                              "type": "object"
                            },
                            {
                              "description": "Filter results to include records that contain a custom term defined by this Beacon.",
                              "properties": {
                                "id": {
                                  "description": "Custom filter terms should contain a unique identifier.",
                                  "example": "demographic.ethnicity:asian",
                                  "type": "string"
                                },
                                "scope": {
                                  "description": "The entry type to which the filter applies",
                                  "example": "biosamples",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "id"
                              ],
                              "type": "object"
                            }
                          ]
                        },
                        "title": "Filtering Term Element",
                        "type": "array"
                      },
                      "includeResultsetResponses": {
                        "default": "HIT",
                        "description": "Indicator of whether responses from every Resultset should be included in the response to this request or just the ones with positive, negative results or no details at all. If null (not specified), the default value of 'HIT' is assumed. This parameter allows for returning boolean/counting results although the Beacon instance is capable to return record level details.",
                        "enum": [
                          "ALL",
                          "HIT",
                          "MISS",
                          "NONE"
                        ],
                        "examples": [
                          "ALL",
                          "HIT",
                          "MISS",
                          "NONE"
                        ],
                        "type": "string"
                      },
                      "pagination": {
                        "description": "Pagination parameters applied to response documents, in case of record level granularity.",
                        "properties": {
                          "currentPage": {
                            "description": "Token of the returned page. To be used only in the response to allow the client to check if the returned page is the one requested.",
                            "example": "ab0sc&fe1dd",
                            "type": "string"
                          },
                          "limit": {
                            "default": 10,
                            "description": "Size of the page. Use `0` to return all the results or the maximum allowed by the Beacon, if there is any.",
                            "example": 10,
                            "minimum": 0,
                            "type": "integer"
                          },
                          "nextPage": {
                            "description": "Token of the next page. Used to navigate forward. If empty, it is assumed that no more pages are available",
                            "example": "ab0sc&fe1dd",
                            "type": "string"
                          },
                          "previousPage": {
                            "description": "Token of the previous page. Used to navigate backwards. If empty, it is assumed that the current page is the first one.",
                            "example": "ab0sc&fe1dd",
                            "type": "string"
                          },
                          "skip": {
                            "default": 0,
                            "description": "* In the request: number of pages to skip * In the response: number of pages that has been skipped",
                            "example": 0,
                            "minimum": 0,
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "requestParameters": {
                        "description": "Parameters used for the entry type specific query elements.",
                        "$schema": "https://json-schema.org/draft/2020-12/schema",
                        "additionalProperties": {
                          "type": "object"
                        },
                        "properties": {
                          "$schema": {
                            "description": "Added here to allow proper validation of the documents.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "requestedGranularity": {
                        "description": "Requested granularity for the response. Beacons do not have to respond with the requested granularity, e.g. may respond with count results although record level granularity had been requested but indicate the granularity of the response in the response's metadata.",
                        "default": "boolean",
                        "enum": [
                          "boolean",
                          "count",
                          "aggregated",
                          "record"
                        ],
                        "type": "string"
                      },
                      "testMode": {
                        "description": "Used for indicating that a request or response is done in a test context.",
                        "default": false,
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  }
                },
                "required": [
                  "meta"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$schema": "https://json-schema.org/draft/2020-12/schema",
                      "description": "Complete definition for a minimal response that provides *only* a `Boolean` exists true|false answer.",
                      "properties": {
                        "beaconHandovers": {
                          "description": "List of handovers that apply to the whole response, not to any resultset or result in particular.",
                          "items": {
                            "description": "Requested schema to be used for individuals in the response.",
                            "properties": {
                              "handoverType": {
                                "description": "Handover type, as an Ontology_term object with CURIE syntax for the `id` value. Use `CUSTOM` for the `id` when no ontology is available.",
                                "examples": [
                                  {
                                    "id": "EFO:0004157",
                                    "label": "BAM format"
                                  },
                                  {
                                    "id": "CUSTOM",
                                    "label": "download genomic variants in .pgxseg file format"
                                  }
                                ],
                                "$schema": "https://json-schema.org/draft/2020-12/schema",
                                "additionalProperties": true,
                                "properties": {
                                  "id": {
                                    "description": "A CURIE identifier, e.g. as `id` for an ontology term.",
                                    "examples": [
                                      "ga4gh:GA.01234abcde",
                                      "DUO:0000004",
                                      "orcid:0000-0003-3463-0775",
                                      "PMID:15254584"
                                    ],
                                    "pattern": "^\\w[^:]+:.+$",
                                    "type": "string"
                                  },
                                  "label": {
                                    "description": "The text that describes the term. By default it could be the preferred text of the term, but is it acceptable to customize it for a clearer description and understanding of the term in an specific context.",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id"
                                ],
                                "title": "Ontology Term",
                                "type": "object"
                              },
                              "note": {
                                "description": "An optional text including considerations on the handover link provided.",
                                "example": "This handover link provides access to a summarized VCF.",
                                "type": "string"
                              },
                              "url": {
                                "description": "URL endpoint to where the handover process could progress, in RFC3986 format",
                                "example": "https://api.mygenomeservice.org/Handover/9dcc48d7-fc88-11e8-9110-b0c592dbf8c0/",
                                "format": "uri",
                                "type": "string"
                              }
                            },
                            "required": [
                              "handoverType",
                              "url"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "info": {
                          "description": "Additional details that could be of interest. Provided to clearly enclose any attribute that is not part of the Beacon specification.",
                          "type": "object"
                        },
                        "meta": {
                          "description": "Information about the response that could be relevant for the Beacon client in order to interpret the results.",
                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                          "properties": {
                            "apiVersion": {
                              "description": "Version of the Beacon API.",
                              "example": "v2.0",
                              "type": "string"
                            },
                            "beaconId": {
                              "description": "Identifier of the beacon instance.",
                              "example": "org.example.beacon.v2",
                              "type": "string"
                            },
                            "receivedRequestSummary": {
                              "description": "Section of the response that summarize the request received as it has been interpreted by the Beacon server.",
                              "$schema": "https://json-schema.org/draft/2020-12/schema",
                              "properties": {
                                "apiVersion": {
                                  "description": "API version expected by the client to be supported by the server and used in the response format.",
                                  "example": "v2.0",
                                  "type": "string"
                                },
                                "filters": {
                                  "description": "Filters as submitted in the request.",
                                  "example": [
                                    "BTO:0000199",
                                    "PATO:0000383"
                                  ],
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "includeResultsetResponses": {
                                  "default": "HIT",
                                  "description": "Indicator of whether responses from every Resultset should be included in the response to this request or just the ones with positive, negative results or no details at all. If null (not specified), the default value of 'HIT' is assumed. This parameter allows for returning boolean/counting results although the Beacon instance is capable to return record level details.",
                                  "enum": [
                                    "ALL",
                                    "HIT",
                                    "MISS",
                                    "NONE"
                                  ],
                                  "examples": [
                                    "ALL",
                                    "HIT",
                                    "MISS",
                                    "NONE"
                                  ],
                                  "type": "string"
                                },
                                "pagination": {
                                  "description": "Pagination as requested for the results.",
                                  "properties": {
                                    "currentPage": {
                                      "description": "Token of the returned page. To be used only in the response to allow the client to check if the returned page is the one requested.",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "limit": {
                                      "default": 10,
                                      "description": "Size of the page. Use `0` to return all the results or the maximum allowed by the Beacon, if there is any.",
                                      "example": 10,
                                      "minimum": 0,
                                      "type": "integer"
                                    },
                                    "nextPage": {
                                      "description": "Token of the next page. Used to navigate forward. If empty, it is assumed that no more pages are available",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "previousPage": {
                                      "description": "Token of the previous page. Used to navigate backwards. If empty, it is assumed that the current page is the first one.",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "skip": {
                                      "default": 0,
                                      "description": "* In the request: number of pages to skip * In the response: number of pages that has been skipped",
                                      "example": 0,
                                      "minimum": 0,
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "requestParameters": {
                                  "description": "Dictionary of request parameters received in the `RequestBody` or as part of a GET request.",
                                  "$schema": "https://json-schema.org/draft/2020-12/schema",
                                  "additionalProperties": {
                                    "type": "object"
                                  },
                                  "properties": {
                                    "$schema": {
                                      "description": "Added here to allow proper validation of the documents.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "requestedGranularity": {
                                  "description": "Requested granularity for the response which may differe from the response's actual granularity.",
                                  "default": "boolean",
                                  "enum": [
                                    "boolean",
                                    "count",
                                    "aggregated",
                                    "record"
                                  ],
                                  "type": "string"
                                },
                                "requestedSchemas": {
                                  "$comment": "TODO: Add the format attribute as a uri.",
                                  "description": "Set of schemas to be used in the response to a request. `minItems: 0` is used to confirm that an empty array is acceptable here.",
                                  "minItems": 0,
                                  "items": {
                                    "description": "Schema to be used for the requested entry type in the response.",
                                    "properties": {
                                      "entityType": {
                                        "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                                        "example": "Individual",
                                        "type": "string"
                                      },
                                      "schema": {
                                        "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                                        "examples": [
                                          "./ga4gh-beacon-dataset-v2.0.0",
                                          "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "testMode": {
                                  "description": "Used for indicating that a request was received in a test context.",
                                  "default": false,
                                  "type": "boolean"
                                }
                              },
                              "required": [
                                "apiVersion",
                                "requestedSchemas",
                                "pagination",
                                "requestedGranularity"
                              ],
                              "type": "object"
                            },
                            "returnedGranularity": {
                              "description": "Granularity of the Beacon response. Targeted Beacon could respond or not with the requested granularity. E.g. record level granularity could be requested, but the Beacon could respond only with boolean or count results.",
                              "default": "boolean",
                              "enum": [
                                "boolean",
                                "count",
                                "aggregated",
                                "record"
                              ],
                              "type": "string"
                            },
                            "returnedSchemas": {
                              "description": "Set of schemas to be used in the response to a request.",
                              "items": {
                                "description": "Schema to be used for the requested entry type in the response.",
                                "properties": {
                                  "entityType": {
                                    "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                                    "example": "Individual",
                                    "type": "string"
                                  },
                                  "schema": {
                                    "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                                    "examples": [
                                      "./ga4gh-beacon-dataset-v2.0.0",
                                      "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                                    ],
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "testMode": {
                              "description": "Used for indicating that a response is returned in a test context. Purposed for compliance testing. Information returned could be fake.",
                              "default": false,
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "beaconId",
                            "apiVersion",
                            "returnedSchemas",
                            "returnedGranularity",
                            "receivedRequestSummary"
                          ],
                          "type": "object"
                        },
                        "responseSummary": {
                          "description": "Boolean (true/false) response section.",
                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                          "properties": {
                            "exists": {
                              "description": "Indicator of whether any entry was observed. This should be non-null, unless there was an error, in which case an error response is expected instead of this one.",
                              "examples": [
                                true
                              ],
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "exists"
                          ],
                          "type": "object"
                        }
                      },
                      "required": [
                        "meta",
                        "responseSummary"
                      ],
                      "type": "object"
                    },
                    {
                      "$schema": "https://json-schema.org/draft/2020-12/schema",
                      "description": "Complete definition for a response that does not include record level details but provides `Boolean` and `count` information.",
                      "properties": {
                        "beaconHandovers": {
                          "description": "List of handovers that apply to the whole response, not to any resultset or result in particular.",
                          "items": {
                            "description": "Requested schema to be used for individuals in the response.",
                            "properties": {
                              "handoverType": {
                                "description": "Handover type, as an Ontology_term object with CURIE syntax for the `id` value. Use `CUSTOM` for the `id` when no ontology is available.",
                                "examples": [
                                  {
                                    "id": "EFO:0004157",
                                    "label": "BAM format"
                                  },
                                  {
                                    "id": "CUSTOM",
                                    "label": "download genomic variants in .pgxseg file format"
                                  }
                                ],
                                "$schema": "https://json-schema.org/draft/2020-12/schema",
                                "additionalProperties": true,
                                "properties": {
                                  "id": {
                                    "description": "A CURIE identifier, e.g. as `id` for an ontology term.",
                                    "examples": [
                                      "ga4gh:GA.01234abcde",
                                      "DUO:0000004",
                                      "orcid:0000-0003-3463-0775",
                                      "PMID:15254584"
                                    ],
                                    "pattern": "^\\w[^:]+:.+$",
                                    "type": "string"
                                  },
                                  "label": {
                                    "description": "The text that describes the term. By default it could be the preferred text of the term, but is it acceptable to customize it for a clearer description and understanding of the term in an specific context.",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id"
                                ],
                                "title": "Ontology Term",
                                "type": "object"
                              },
                              "note": {
                                "description": "An optional text including considerations on the handover link provided.",
                                "example": "This handover link provides access to a summarized VCF.",
                                "type": "string"
                              },
                              "url": {
                                "description": "URL endpoint to where the handover process could progress, in RFC3986 format",
                                "example": "https://api.mygenomeservice.org/Handover/9dcc48d7-fc88-11e8-9110-b0c592dbf8c0/",
                                "format": "uri",
                                "type": "string"
                              }
                            },
                            "required": [
                              "handoverType",
                              "url"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "info": {
                          "description": "Additional details that could be of interest. Provided to clearly enclose any attribute that is not part of the Beacon specification.",
                          "type": "object"
                        },
                        "meta": {
                          "description": "Information about the response that could be relevant for the Beacon client in order to interpret the results.",
                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                          "properties": {
                            "apiVersion": {
                              "description": "Version of the Beacon API.",
                              "example": "v2.0",
                              "type": "string"
                            },
                            "beaconId": {
                              "description": "Identifier of the beacon instance.",
                              "example": "org.example.beacon.v2",
                              "type": "string"
                            },
                            "receivedRequestSummary": {
                              "description": "Section of the response that summarize the request received as it has been interpreted by the Beacon server.",
                              "$schema": "https://json-schema.org/draft/2020-12/schema",
                              "properties": {
                                "apiVersion": {
                                  "description": "API version expected by the client to be supported by the server and used in the response format.",
                                  "example": "v2.0",
                                  "type": "string"
                                },
                                "filters": {
                                  "description": "Filters as submitted in the request.",
                                  "example": [
                                    "BTO:0000199",
                                    "PATO:0000383"
                                  ],
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "includeResultsetResponses": {
                                  "default": "HIT",
                                  "description": "Indicator of whether responses from every Resultset should be included in the response to this request or just the ones with positive, negative results or no details at all. If null (not specified), the default value of 'HIT' is assumed. This parameter allows for returning boolean/counting results although the Beacon instance is capable to return record level details.",
                                  "enum": [
                                    "ALL",
                                    "HIT",
                                    "MISS",
                                    "NONE"
                                  ],
                                  "examples": [
                                    "ALL",
                                    "HIT",
                                    "MISS",
                                    "NONE"
                                  ],
                                  "type": "string"
                                },
                                "pagination": {
                                  "description": "Pagination as requested for the results.",
                                  "properties": {
                                    "currentPage": {
                                      "description": "Token of the returned page. To be used only in the response to allow the client to check if the returned page is the one requested.",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "limit": {
                                      "default": 10,
                                      "description": "Size of the page. Use `0` to return all the results or the maximum allowed by the Beacon, if there is any.",
                                      "example": 10,
                                      "minimum": 0,
                                      "type": "integer"
                                    },
                                    "nextPage": {
                                      "description": "Token of the next page. Used to navigate forward. If empty, it is assumed that no more pages are available",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "previousPage": {
                                      "description": "Token of the previous page. Used to navigate backwards. If empty, it is assumed that the current page is the first one.",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "skip": {
                                      "default": 0,
                                      "description": "* In the request: number of pages to skip * In the response: number of pages that has been skipped",
                                      "example": 0,
                                      "minimum": 0,
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "requestParameters": {
                                  "description": "Dictionary of request parameters received in the `RequestBody` or as part of a GET request.",
                                  "$schema": "https://json-schema.org/draft/2020-12/schema",
                                  "additionalProperties": {
                                    "type": "object"
                                  },
                                  "properties": {
                                    "$schema": {
                                      "description": "Added here to allow proper validation of the documents.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "requestedGranularity": {
                                  "description": "Requested granularity for the response which may differe from the response's actual granularity.",
                                  "default": "boolean",
                                  "enum": [
                                    "boolean",
                                    "count",
                                    "aggregated",
                                    "record"
                                  ],
                                  "type": "string"
                                },
                                "requestedSchemas": {
                                  "$comment": "TODO: Add the format attribute as a uri.",
                                  "description": "Set of schemas to be used in the response to a request. `minItems: 0` is used to confirm that an empty array is acceptable here.",
                                  "minItems": 0,
                                  "items": {
                                    "description": "Schema to be used for the requested entry type in the response.",
                                    "properties": {
                                      "entityType": {
                                        "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                                        "example": "Individual",
                                        "type": "string"
                                      },
                                      "schema": {
                                        "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                                        "examples": [
                                          "./ga4gh-beacon-dataset-v2.0.0",
                                          "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "testMode": {
                                  "description": "Used for indicating that a request was received in a test context.",
                                  "default": false,
                                  "type": "boolean"
                                }
                              },
                              "required": [
                                "apiVersion",
                                "requestedSchemas",
                                "pagination",
                                "requestedGranularity"
                              ],
                              "type": "object"
                            },
                            "returnedGranularity": {
                              "description": "Granularity of the Beacon response. Targeted Beacon could respond or not with the requested granularity. E.g. record level granularity could be requested, but the Beacon could respond only with boolean or count results.",
                              "default": "boolean",
                              "enum": [
                                "boolean",
                                "count",
                                "aggregated",
                                "record"
                              ],
                              "type": "string"
                            },
                            "returnedSchemas": {
                              "description": "Set of schemas to be used in the response to a request.",
                              "items": {
                                "description": "Schema to be used for the requested entry type in the response.",
                                "properties": {
                                  "entityType": {
                                    "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                                    "example": "Individual",
                                    "type": "string"
                                  },
                                  "schema": {
                                    "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                                    "examples": [
                                      "./ga4gh-beacon-dataset-v2.0.0",
                                      "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                                    ],
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "testMode": {
                              "description": "Used for indicating that a response is returned in a test context. Purposed for compliance testing. Information returned could be fake.",
                              "default": false,
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "beaconId",
                            "apiVersion",
                            "returnedSchemas",
                            "returnedGranularity",
                            "receivedRequestSummary"
                          ],
                          "type": "object"
                        },
                        "responseSummary": {
                          "description": "Response summary, including Boolean and optionally results count.",
                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                          "properties": {
                            "exists": {
                              "description": "Indicator of whether any entry was observed. This should be non-null, unless there was an error, in which case a `beaconErrorResponse` is expected instead of this one.",
                              "examples": [
                                true
                              ],
                              "type": "boolean"
                            },
                            "numTotalResults": {
                              "description": "Total number of results.",
                              "examples": [
                                123
                              ],
                              "minimum": 0,
                              "type": "integer"
                            }
                          },
                          "required": [
                            "exists",
                            "numTotalResults"
                          ],
                          "type": "object"
                        }
                      },
                      "required": [
                        "meta",
                        "responseSummary"
                      ],
                      "type": "object"
                    },
                    {
                      "$schema": "https://json-schema.org/draft/2020-12/schema",
                      "additionalProperties": true,
                      "description": "Beacon response that includes record level details, grouped in Resultsets.",
                      "properties": {
                        "beaconHandovers": {
                          "description": "List of handovers that apply to the whole response, not to any resultset or result in particular.",
                          "items": {
                            "description": "Requested schema to be used for individuals in the response.",
                            "properties": {
                              "handoverType": {
                                "description": "Handover type, as an Ontology_term object with CURIE syntax for the `id` value. Use `CUSTOM` for the `id` when no ontology is available.",
                                "examples": [
                                  {
                                    "id": "EFO:0004157",
                                    "label": "BAM format"
                                  },
                                  {
                                    "id": "CUSTOM",
                                    "label": "download genomic variants in .pgxseg file format"
                                  }
                                ],
                                "$schema": "https://json-schema.org/draft/2020-12/schema",
                                "additionalProperties": true,
                                "properties": {
                                  "id": {
                                    "description": "A CURIE identifier, e.g. as `id` for an ontology term.",
                                    "examples": [
                                      "ga4gh:GA.01234abcde",
                                      "DUO:0000004",
                                      "orcid:0000-0003-3463-0775",
                                      "PMID:15254584"
                                    ],
                                    "pattern": "^\\w[^:]+:.+$",
                                    "type": "string"
                                  },
                                  "label": {
                                    "description": "The text that describes the term. By default it could be the preferred text of the term, but is it acceptable to customize it for a clearer description and understanding of the term in an specific context.",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id"
                                ],
                                "title": "Ontology Term",
                                "type": "object"
                              },
                              "note": {
                                "description": "An optional text including considerations on the handover link provided.",
                                "example": "This handover link provides access to a summarized VCF.",
                                "type": "string"
                              },
                              "url": {
                                "description": "URL endpoint to where the handover process could progress, in RFC3986 format",
                                "example": "https://api.mygenomeservice.org/Handover/9dcc48d7-fc88-11e8-9110-b0c592dbf8c0/",
                                "format": "uri",
                                "type": "string"
                              }
                            },
                            "required": [
                              "handoverType",
                              "url"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "info": {
                          "description": "Additional details that could be of interest. Provided to clearly enclose any attribute that is not part of the Beacon specification.",
                          "type": "object"
                        },
                        "meta": {
                          "description": "Information about the response that could be relevant for the Beacon client in order to interpret the results.",
                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                          "properties": {
                            "apiVersion": {
                              "description": "Version of the Beacon API.",
                              "example": "v2.0",
                              "type": "string"
                            },
                            "beaconId": {
                              "description": "Identifier of the beacon instance.",
                              "example": "org.example.beacon.v2",
                              "type": "string"
                            },
                            "receivedRequestSummary": {
                              "description": "Section of the response that summarize the request received as it has been interpreted by the Beacon server.",
                              "$schema": "https://json-schema.org/draft/2020-12/schema",
                              "properties": {
                                "apiVersion": {
                                  "description": "API version expected by the client to be supported by the server and used in the response format.",
                                  "example": "v2.0",
                                  "type": "string"
                                },
                                "filters": {
                                  "description": "Filters as submitted in the request.",
                                  "example": [
                                    "BTO:0000199",
                                    "PATO:0000383"
                                  ],
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "includeResultsetResponses": {
                                  "default": "HIT",
                                  "description": "Indicator of whether responses from every Resultset should be included in the response to this request or just the ones with positive, negative results or no details at all. If null (not specified), the default value of 'HIT' is assumed. This parameter allows for returning boolean/counting results although the Beacon instance is capable to return record level details.",
                                  "enum": [
                                    "ALL",
                                    "HIT",
                                    "MISS",
                                    "NONE"
                                  ],
                                  "examples": [
                                    "ALL",
                                    "HIT",
                                    "MISS",
                                    "NONE"
                                  ],
                                  "type": "string"
                                },
                                "pagination": {
                                  "description": "Pagination as requested for the results.",
                                  "properties": {
                                    "currentPage": {
                                      "description": "Token of the returned page. To be used only in the response to allow the client to check if the returned page is the one requested.",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "limit": {
                                      "default": 10,
                                      "description": "Size of the page. Use `0` to return all the results or the maximum allowed by the Beacon, if there is any.",
                                      "example": 10,
                                      "minimum": 0,
                                      "type": "integer"
                                    },
                                    "nextPage": {
                                      "description": "Token of the next page. Used to navigate forward. If empty, it is assumed that no more pages are available",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "previousPage": {
                                      "description": "Token of the previous page. Used to navigate backwards. If empty, it is assumed that the current page is the first one.",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "skip": {
                                      "default": 0,
                                      "description": "* In the request: number of pages to skip * In the response: number of pages that has been skipped",
                                      "example": 0,
                                      "minimum": 0,
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "requestParameters": {
                                  "description": "Dictionary of request parameters received in the `RequestBody` or as part of a GET request.",
                                  "$schema": "https://json-schema.org/draft/2020-12/schema",
                                  "additionalProperties": {
                                    "type": "object"
                                  },
                                  "properties": {
                                    "$schema": {
                                      "description": "Added here to allow proper validation of the documents.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "requestedGranularity": {
                                  "description": "Requested granularity for the response which may differe from the response's actual granularity.",
                                  "default": "boolean",
                                  "enum": [
                                    "boolean",
                                    "count",
                                    "aggregated",
                                    "record"
                                  ],
                                  "type": "string"
                                },
                                "requestedSchemas": {
                                  "$comment": "TODO: Add the format attribute as a uri.",
                                  "description": "Set of schemas to be used in the response to a request. `minItems: 0` is used to confirm that an empty array is acceptable here.",
                                  "minItems": 0,
                                  "items": {
                                    "description": "Schema to be used for the requested entry type in the response.",
                                    "properties": {
                                      "entityType": {
                                        "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                                        "example": "Individual",
                                        "type": "string"
                                      },
                                      "schema": {
                                        "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                                        "examples": [
                                          "./ga4gh-beacon-dataset-v2.0.0",
                                          "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "testMode": {
                                  "description": "Used for indicating that a request was received in a test context.",
                                  "default": false,
                                  "type": "boolean"
                                }
                              },
                              "required": [
                                "apiVersion",
                                "requestedSchemas",
                                "pagination",
                                "requestedGranularity"
                              ],
                              "type": "object"
                            },
                            "returnedGranularity": {
                              "description": "Granularity of the Beacon response. Targeted Beacon could respond or not with the requested granularity. E.g. record level granularity could be requested, but the Beacon could respond only with boolean or count results.",
                              "default": "boolean",
                              "enum": [
                                "boolean",
                                "count",
                                "aggregated",
                                "record"
                              ],
                              "type": "string"
                            },
                            "returnedSchemas": {
                              "description": "Set of schemas to be used in the response to a request.",
                              "items": {
                                "description": "Schema to be used for the requested entry type in the response.",
                                "properties": {
                                  "entityType": {
                                    "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                                    "example": "Individual",
                                    "type": "string"
                                  },
                                  "schema": {
                                    "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                                    "examples": [
                                      "./ga4gh-beacon-dataset-v2.0.0",
                                      "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                                    ],
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "testMode": {
                              "description": "Used for indicating that a response is returned in a test context. Purposed for compliance testing. Information returned could be fake.",
                              "default": false,
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "beaconId",
                            "apiVersion",
                            "returnedSchemas",
                            "returnedGranularity",
                            "receivedRequestSummary"
                          ],
                          "type": "object"
                        },
                        "response": {
                          "description": "Response for queries that recovers any result.",
                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                          "additionalProperties": true,
                          "definitions": {
                            "ResultsetInstance": {
                              "additionalProperties": true,
                              "properties": {
                                "exists": {
                                  "type": "boolean"
                                },
                                "id": {
                                  "description": "id of the resultset",
                                  "example": "datasetA",
                                  "type": "string"
                                },
                                "info": {
                                  "description": "Additional details that could be of interest about the Resultset. Provided to clearly enclose any attribute that is not part of the Beacon specification.",
                                  "type": "object"
                                },
                                "results": {
                                  "items": {
                                    "type": "object"
                                  },
                                  "minItems": 0,
                                  "type": "array"
                                },
                                "resultsCount": {
                                  "description": "Number of results in this Resultset.",
                                  "type": "integer"
                                },
                                "resultsHandovers": {
                                  "description": "List of handovers that apply to this resultset, not to the whole Beacon or to a result in particular.",
                                  "items": {
                                    "description": "Requested schema to be used for individuals in the response.",
                                    "properties": {
                                      "handoverType": {
                                        "description": "Handover type, as an Ontology_term object with CURIE syntax for the `id` value. Use `CUSTOM` for the `id` when no ontology is available.",
                                        "examples": [
                                          {
                                            "id": "EFO:0004157",
                                            "label": "BAM format"
                                          },
                                          {
                                            "id": "CUSTOM",
                                            "label": "download genomic variants in .pgxseg file format"
                                          }
                                        ],
                                        "$schema": "https://json-schema.org/draft/2020-12/schema",
                                        "additionalProperties": true,
                                        "properties": {
                                          "id": {
                                            "description": "A CURIE identifier, e.g. as `id` for an ontology term.",
                                            "examples": [
                                              "ga4gh:GA.01234abcde",
                                              "DUO:0000004",
                                              "orcid:0000-0003-3463-0775",
                                              "PMID:15254584"
                                            ],
                                            "pattern": "^\\w[^:]+:.+$",
                                            "type": "string"
                                          },
                                          "label": {
                                            "description": "The text that describes the term. By default it could be the preferred text of the term, but is it acceptable to customize it for a clearer description and understanding of the term in an specific context.",
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "id"
                                        ],
                                        "title": "Ontology Term",
                                        "type": "object"
                                      },
                                      "note": {
                                        "description": "An optional text including considerations on the handover link provided.",
                                        "example": "This handover link provides access to a summarized VCF.",
                                        "type": "string"
                                      },
                                      "url": {
                                        "description": "URL endpoint to where the handover process could progress, in RFC3986 format",
                                        "example": "https://api.mygenomeservice.org/Handover/9dcc48d7-fc88-11e8-9110-b0c592dbf8c0/",
                                        "format": "uri",
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "handoverType",
                                      "url"
                                    ],
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "setType": {
                                  "default": "dataset",
                                  "description": "Entry type of resultSet. It SHOULD MATCH an entry type declared as collection in the Beacon configuration.",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "id",
                                "setType",
                                "exists",
                                "resultsCount",
                                "results"
                              ]
                            }
                          },
                          "properties": {
                            "$schema": {
                              "$comment": "TO REVIEW: adding a `format` or `regex` attribute that validates correctly against a file path (relative).",
                              "description": "Refers to the JSON Schema which describes the set of valid attributes for this particular document type. This attribute is mostly used in schemas that should be tested in Beacon implementations.",
                              "type": "string"
                            },
                            "resultSets": {
                              "items": {
                                "additionalProperties": true,
                                "properties": {
                                  "exists": {
                                    "type": "boolean"
                                  },
                                  "id": {
                                    "description": "id of the resultset",
                                    "example": "datasetA",
                                    "type": "string"
                                  },
                                  "info": {
                                    "description": "Additional details that could be of interest about the Resultset. Provided to clearly enclose any attribute that is not part of the Beacon specification.",
                                    "type": "object"
                                  },
                                  "results": {
                                    "items": {
                                      "type": "object"
                                    },
                                    "minItems": 0,
                                    "type": "array"
                                  },
                                  "resultsCount": {
                                    "description": "Number of results in this Resultset.",
                                    "type": "integer"
                                  },
                                  "resultsHandovers": {
                                    "description": "List of handovers that apply to this resultset, not to the whole Beacon or to a result in particular.",
                                    "items": {
                                      "description": "Requested schema to be used for individuals in the response.",
                                      "properties": {
                                        "handoverType": {
                                          "description": "Handover type, as an Ontology_term object with CURIE syntax for the `id` value. Use `CUSTOM` for the `id` when no ontology is available.",
                                          "examples": [
                                            {
                                              "id": "EFO:0004157",
                                              "label": "BAM format"
                                            },
                                            {
                                              "id": "CUSTOM",
                                              "label": "download genomic variants in .pgxseg file format"
                                            }
                                          ],
                                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                                          "additionalProperties": true,
                                          "properties": {
                                            "id": {
                                              "description": "A CURIE identifier, e.g. as `id` for an ontology term.",
                                              "examples": [
                                                "ga4gh:GA.01234abcde",
                                                "DUO:0000004",
                                                "orcid:0000-0003-3463-0775",
                                                "PMID:15254584"
                                              ],
                                              "pattern": "^\\w[^:]+:.+$",
                                              "type": "string"
                                            },
                                            "label": {
                                              "description": "The text that describes the term. By default it could be the preferred text of the term, but is it acceptable to customize it for a clearer description and understanding of the term in an specific context.",
                                              "type": "string"
                                            }
                                          },
                                          "required": [
                                            "id"
                                          ],
                                          "title": "Ontology Term",
                                          "type": "object"
                                        },
                                        "note": {
                                          "description": "An optional text including considerations on the handover link provided.",
                                          "example": "This handover link provides access to a summarized VCF.",
                                          "type": "string"
                                        },
                                        "url": {
                                          "description": "URL endpoint to where the handover process could progress, in RFC3986 format",
                                          "example": "https://api.mygenomeservice.org/Handover/9dcc48d7-fc88-11e8-9110-b0c592dbf8c0/",
                                          "format": "uri",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "handoverType",
                                        "url"
                                      ],
                                      "type": "object"
                                    },
                                    "type": "array"
                                  },
                                  "setType": {
                                    "default": "dataset",
                                    "description": "Entry type of resultSet. It SHOULD MATCH an entry type declared as collection in the Beacon configuration.",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id",
                                  "setType",
                                  "exists",
                                  "resultsCount",
                                  "results"
                                ]
                              },
                              "minItems": 0,
                              "type": "array"
                            }
                          },
                          "required": [
                            "resultSets"
                          ],
                          "title": "Beacon ResultSet",
                          "type": "object"
                        },
                        "responseSummary": {
                          "description": "Response summary, including Boolean and optionally results count.",
                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                          "properties": {
                            "exists": {
                              "description": "Indicator of whether any entry was observed. This should be non-null, unless there was an error, in which case an error response is expected instead of this one.",
                              "examples": [
                                true
                              ],
                              "type": "boolean"
                            },
                            "numTotalResults": {
                              "description": "Total number of results.",
                              "examples": [
                                123
                              ],
                              "minimum": 0,
                              "type": "integer"
                            }
                          },
                          "required": [
                            "exists"
                          ],
                          "type": "object"
                        }
                      },
                      "required": [
                        "meta",
                        "responseSummary",
                        "response"
                      ],
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Successful operation."
          },
          "default": {
            "description": "An unsuccessful operation",
            "$schema": "https://json-schema.org/draft/2020-12/schema",
            "additionalProperties": true,
            "properties": {
              "error": {
                "description": "Error response",
                "properties": {
                  "errorCode": {
                    "description": "Entry not found",
                    "examples": [
                      "404"
                    ],
                    "format": "int32",
                    "type": "integer"
                  },
                  "errorMessage": {
                    "examples": [
                      "the provided parameters are incomplete. 'xyz' is missing."
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "errorCode"
                ],
                "type": "object"
              },
              "meta": {
                "description": "Information about the response that could be relevant for the Beacon client in order to interpret the results.",
                "$schema": "https://json-schema.org/draft/2020-12/schema",
                "properties": {
                  "apiVersion": {
                    "description": "Version of the Beacon API.",
                    "example": "v2.0",
                    "type": "string"
                  },
                  "beaconId": {
                    "description": "Identifier of the beacon instance.",
                    "example": "org.example.beacon.v2",
                    "type": "string"
                  },
                  "receivedRequestSummary": {
                    "description": "Section of the response that summarize the request received as it has been interpreted by the Beacon server.",
                    "$schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                      "apiVersion": {
                        "description": "API version expected by the client to be supported by the server and used in the response format.",
                        "example": "v2.0",
                        "type": "string"
                      },
                      "filters": {
                        "description": "Filters as submitted in the request.",
                        "example": [
                          "BTO:0000199",
                          "PATO:0000383"
                        ],
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "includeResultsetResponses": {
                        "default": "HIT",
                        "description": "Indicator of whether responses from every Resultset should be included in the response to this request or just the ones with positive, negative results or no details at all. If null (not specified), the default value of 'HIT' is assumed. This parameter allows for returning boolean/counting results although the Beacon instance is capable to return record level details.",
                        "enum": [
                          "ALL",
                          "HIT",
                          "MISS",
                          "NONE"
                        ],
                        "examples": [
                          "ALL",
                          "HIT",
                          "MISS",
                          "NONE"
                        ],
                        "type": "string"
                      },
                      "pagination": {
                        "description": "Pagination as requested for the results.",
                        "properties": {
                          "currentPage": {
                            "description": "Token of the returned page. To be used only in the response to allow the client to check if the returned page is the one requested.",
                            "example": "ab0sc&fe1dd",
                            "type": "string"
                          },
                          "limit": {
                            "default": 10,
                            "description": "Size of the page. Use `0` to return all the results or the maximum allowed by the Beacon, if there is any.",
                            "example": 10,
                            "minimum": 0,
                            "type": "integer"
                          },
                          "nextPage": {
                            "description": "Token of the next page. Used to navigate forward. If empty, it is assumed that no more pages are available",
                            "example": "ab0sc&fe1dd",
                            "type": "string"
                          },
                          "previousPage": {
                            "description": "Token of the previous page. Used to navigate backwards. If empty, it is assumed that the current page is the first one.",
                            "example": "ab0sc&fe1dd",
                            "type": "string"
                          },
                          "skip": {
                            "default": 0,
                            "description": "* In the request: number of pages to skip * In the response: number of pages that has been skipped",
                            "example": 0,
                            "minimum": 0,
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "requestParameters": {
                        "description": "Dictionary of request parameters received in the `RequestBody` or as part of a GET request.",
                        "$schema": "https://json-schema.org/draft/2020-12/schema",
                        "additionalProperties": {
                          "type": "object"
                        },
                        "properties": {
                          "$schema": {
                            "description": "Added here to allow proper validation of the documents.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "requestedGranularity": {
                        "description": "Requested granularity for the response which may differe from the response's actual granularity.",
                        "default": "boolean",
                        "enum": [
                          "boolean",
                          "count",
                          "aggregated",
                          "record"
                        ],
                        "type": "string"
                      },
                      "requestedSchemas": {
                        "$comment": "TODO: Add the format attribute as a uri.",
                        "description": "Set of schemas to be used in the response to a request. `minItems: 0` is used to confirm that an empty array is acceptable here.",
                        "minItems": 0,
                        "items": {
                          "description": "Schema to be used for the requested entry type in the response.",
                          "properties": {
                            "entityType": {
                              "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                              "example": "Individual",
                              "type": "string"
                            },
                            "schema": {
                              "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                              "examples": [
                                "./ga4gh-beacon-dataset-v2.0.0",
                                "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "testMode": {
                        "description": "Used for indicating that a request was received in a test context.",
                        "default": false,
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "apiVersion",
                      "requestedSchemas",
                      "pagination",
                      "requestedGranularity"
                    ],
                    "type": "object"
                  },
                  "returnedGranularity": {
                    "description": "Granularity of the Beacon response. Targeted Beacon could respond or not with the requested granularity. E.g. record level granularity could be requested, but the Beacon could respond only with boolean or count results.",
                    "default": "boolean",
                    "enum": [
                      "boolean",
                      "count",
                      "aggregated",
                      "record"
                    ],
                    "type": "string"
                  },
                  "returnedSchemas": {
                    "description": "Set of schemas to be used in the response to a request.",
                    "items": {
                      "description": "Schema to be used for the requested entry type in the response.",
                      "properties": {
                        "entityType": {
                          "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                          "example": "Individual",
                          "type": "string"
                        },
                        "schema": {
                          "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                          "examples": [
                            "./ga4gh-beacon-dataset-v2.0.0",
                            "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "testMode": {
                    "description": "Used for indicating that a response is returned in a test context. Purposed for compliance testing. Information returned could be fake.",
                    "default": false,
                    "type": "boolean"
                  }
                },
                "required": [
                  "beaconId",
                  "apiVersion",
                  "returnedSchemas",
                  "returnedGranularity",
                  "receivedRequestSummary"
                ],
                "type": "object"
              }
            },
            "required": [
              "meta",
              "error"
            ],
            "type": "object"
          }
        },
        "tags": [
          "POST Endpoints"
        ]
      }
    },
    "/g_variants/{id}/individuals": {
      "get": {
        "description": "Get the individuals list from one genomic variant, identified by its (unique) 'id'",
        "operationId": "getOneGenomicVariantIndividuals",
        "parameters": [
          {
            "description": "Schema to be used to format the `result` field in the response. The response will use Beacon format.",
            "example": "ga4gh-service-info-v1.0",
            "in": "query",
            "name": "requestedSchema",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "skip",
            "schema": {
              "default": 0,
              "description": "* In the request: number of pages to skip * In the response: number of pages that has been skipped",
              "example": 0,
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 10,
              "description": "Size of the page. Use `0` to return all the results or the maximum allowed by the Beacon, if there is any.",
              "example": 10,
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$schema": "https://json-schema.org/draft/2020-12/schema",
                      "description": "Complete definition for a minimal response that provides *only* a `Boolean` exists true|false answer.",
                      "properties": {
                        "beaconHandovers": {
                          "description": "List of handovers that apply to the whole response, not to any resultset or result in particular.",
                          "items": {
                            "description": "Requested schema to be used for individuals in the response.",
                            "properties": {
                              "handoverType": {
                                "description": "Handover type, as an Ontology_term object with CURIE syntax for the `id` value. Use `CUSTOM` for the `id` when no ontology is available.",
                                "examples": [
                                  {
                                    "id": "EFO:0004157",
                                    "label": "BAM format"
                                  },
                                  {
                                    "id": "CUSTOM",
                                    "label": "download genomic variants in .pgxseg file format"
                                  }
                                ],
                                "$schema": "https://json-schema.org/draft/2020-12/schema",
                                "additionalProperties": true,
                                "properties": {
                                  "id": {
                                    "description": "A CURIE identifier, e.g. as `id` for an ontology term.",
                                    "examples": [
                                      "ga4gh:GA.01234abcde",
                                      "DUO:0000004",
                                      "orcid:0000-0003-3463-0775",
                                      "PMID:15254584"
                                    ],
                                    "pattern": "^\\w[^:]+:.+$",
                                    "type": "string"
                                  },
                                  "label": {
                                    "description": "The text that describes the term. By default it could be the preferred text of the term, but is it acceptable to customize it for a clearer description and understanding of the term in an specific context.",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id"
                                ],
                                "title": "Ontology Term",
                                "type": "object"
                              },
                              "note": {
                                "description": "An optional text including considerations on the handover link provided.",
                                "example": "This handover link provides access to a summarized VCF.",
                                "type": "string"
                              },
                              "url": {
                                "description": "URL endpoint to where the handover process could progress, in RFC3986 format",
                                "example": "https://api.mygenomeservice.org/Handover/9dcc48d7-fc88-11e8-9110-b0c592dbf8c0/",
                                "format": "uri",
                                "type": "string"
                              }
                            },
                            "required": [
                              "handoverType",
                              "url"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "info": {
                          "description": "Additional details that could be of interest. Provided to clearly enclose any attribute that is not part of the Beacon specification.",
                          "type": "object"
                        },
                        "meta": {
                          "description": "Information about the response that could be relevant for the Beacon client in order to interpret the results.",
                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                          "properties": {
                            "apiVersion": {
                              "description": "Version of the Beacon API.",
                              "example": "v2.0",
                              "type": "string"
                            },
                            "beaconId": {
                              "description": "Identifier of the beacon instance.",
                              "example": "org.example.beacon.v2",
                              "type": "string"
                            },
                            "receivedRequestSummary": {
                              "description": "Section of the response that summarize the request received as it has been interpreted by the Beacon server.",
                              "$schema": "https://json-schema.org/draft/2020-12/schema",
                              "properties": {
                                "apiVersion": {
                                  "description": "API version expected by the client to be supported by the server and used in the response format.",
                                  "example": "v2.0",
                                  "type": "string"
                                },
                                "filters": {
                                  "description": "Filters as submitted in the request.",
                                  "example": [
                                    "BTO:0000199",
                                    "PATO:0000383"
                                  ],
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "includeResultsetResponses": {
                                  "default": "HIT",
                                  "description": "Indicator of whether responses from every Resultset should be included in the response to this request or just the ones with positive, negative results or no details at all. If null (not specified), the default value of 'HIT' is assumed. This parameter allows for returning boolean/counting results although the Beacon instance is capable to return record level details.",
                                  "enum": [
                                    "ALL",
                                    "HIT",
                                    "MISS",
                                    "NONE"
                                  ],
                                  "examples": [
                                    "ALL",
                                    "HIT",
                                    "MISS",
                                    "NONE"
                                  ],
                                  "type": "string"
                                },
                                "pagination": {
                                  "description": "Pagination as requested for the results.",
                                  "properties": {
                                    "currentPage": {
                                      "description": "Token of the returned page. To be used only in the response to allow the client to check if the returned page is the one requested.",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "limit": {
                                      "default": 10,
                                      "description": "Size of the page. Use `0` to return all the results or the maximum allowed by the Beacon, if there is any.",
                                      "example": 10,
                                      "minimum": 0,
                                      "type": "integer"
                                    },
                                    "nextPage": {
                                      "description": "Token of the next page. Used to navigate forward. If empty, it is assumed that no more pages are available",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "previousPage": {
                                      "description": "Token of the previous page. Used to navigate backwards. If empty, it is assumed that the current page is the first one.",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "skip": {
                                      "default": 0,
                                      "description": "* In the request: number of pages to skip * In the response: number of pages that has been skipped",
                                      "example": 0,
                                      "minimum": 0,
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "requestParameters": {
                                  "description": "Dictionary of request parameters received in the `RequestBody` or as part of a GET request.",
                                  "$schema": "https://json-schema.org/draft/2020-12/schema",
                                  "additionalProperties": {
                                    "type": "object"
                                  },
                                  "properties": {
                                    "$schema": {
                                      "description": "Added here to allow proper validation of the documents.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "requestedGranularity": {
                                  "description": "Requested granularity for the response which may differe from the response's actual granularity.",
                                  "default": "boolean",
                                  "enum": [
                                    "boolean",
                                    "count",
                                    "aggregated",
                                    "record"
                                  ],
                                  "type": "string"
                                },
                                "requestedSchemas": {
                                  "$comment": "TODO: Add the format attribute as a uri.",
                                  "description": "Set of schemas to be used in the response to a request. `minItems: 0` is used to confirm that an empty array is acceptable here.",
                                  "minItems": 0,
                                  "items": {
                                    "description": "Schema to be used for the requested entry type in the response.",
                                    "properties": {
                                      "entityType": {
                                        "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                                        "example": "Individual",
                                        "type": "string"
                                      },
                                      "schema": {
                                        "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                                        "examples": [
                                          "./ga4gh-beacon-dataset-v2.0.0",
                                          "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "testMode": {
                                  "description": "Used for indicating that a request was received in a test context.",
                                  "default": false,
                                  "type": "boolean"
                                }
                              },
                              "required": [
                                "apiVersion",
                                "requestedSchemas",
                                "pagination",
                                "requestedGranularity"
                              ],
                              "type": "object"
                            },
                            "returnedGranularity": {
                              "description": "Granularity of the Beacon response. Targeted Beacon could respond or not with the requested granularity. E.g. record level granularity could be requested, but the Beacon could respond only with boolean or count results.",
                              "default": "boolean",
                              "enum": [
                                "boolean",
                                "count",
                                "aggregated",
                                "record"
                              ],
                              "type": "string"
                            },
                            "returnedSchemas": {
                              "description": "Set of schemas to be used in the response to a request.",
                              "items": {
                                "description": "Schema to be used for the requested entry type in the response.",
                                "properties": {
                                  "entityType": {
                                    "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                                    "example": "Individual",
                                    "type": "string"
                                  },
                                  "schema": {
                                    "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                                    "examples": [
                                      "./ga4gh-beacon-dataset-v2.0.0",
                                      "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                                    ],
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "testMode": {
                              "description": "Used for indicating that a response is returned in a test context. Purposed for compliance testing. Information returned could be fake.",
                              "default": false,
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "beaconId",
                            "apiVersion",
                            "returnedSchemas",
                            "returnedGranularity",
                            "receivedRequestSummary"
                          ],
                          "type": "object"
                        },
                        "responseSummary": {
                          "description": "Boolean (true/false) response section.",
                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                          "properties": {
                            "exists": {
                              "description": "Indicator of whether any entry was observed. This should be non-null, unless there was an error, in which case an error response is expected instead of this one.",
                              "examples": [
                                true
                              ],
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "exists"
                          ],
                          "type": "object"
                        }
                      },
                      "required": [
                        "meta",
                        "responseSummary"
                      ],
                      "type": "object"
                    },
                    {
                      "$schema": "https://json-schema.org/draft/2020-12/schema",
                      "description": "Complete definition for a response that does not include record level details but provides `Boolean` and `count` information.",
                      "properties": {
                        "beaconHandovers": {
                          "description": "List of handovers that apply to the whole response, not to any resultset or result in particular.",
                          "items": {
                            "description": "Requested schema to be used for individuals in the response.",
                            "properties": {
                              "handoverType": {
                                "description": "Handover type, as an Ontology_term object with CURIE syntax for the `id` value. Use `CUSTOM` for the `id` when no ontology is available.",
                                "examples": [
                                  {
                                    "id": "EFO:0004157",
                                    "label": "BAM format"
                                  },
                                  {
                                    "id": "CUSTOM",
                                    "label": "download genomic variants in .pgxseg file format"
                                  }
                                ],
                                "$schema": "https://json-schema.org/draft/2020-12/schema",
                                "additionalProperties": true,
                                "properties": {
                                  "id": {
                                    "description": "A CURIE identifier, e.g. as `id` for an ontology term.",
                                    "examples": [
                                      "ga4gh:GA.01234abcde",
                                      "DUO:0000004",
                                      "orcid:0000-0003-3463-0775",
                                      "PMID:15254584"
                                    ],
                                    "pattern": "^\\w[^:]+:.+$",
                                    "type": "string"
                                  },
                                  "label": {
                                    "description": "The text that describes the term. By default it could be the preferred text of the term, but is it acceptable to customize it for a clearer description and understanding of the term in an specific context.",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id"
                                ],
                                "title": "Ontology Term",
                                "type": "object"
                              },
                              "note": {
                                "description": "An optional text including considerations on the handover link provided.",
                                "example": "This handover link provides access to a summarized VCF.",
                                "type": "string"
                              },
                              "url": {
                                "description": "URL endpoint to where the handover process could progress, in RFC3986 format",
                                "example": "https://api.mygenomeservice.org/Handover/9dcc48d7-fc88-11e8-9110-b0c592dbf8c0/",
                                "format": "uri",
                                "type": "string"
                              }
                            },
                            "required": [
                              "handoverType",
                              "url"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "info": {
                          "description": "Additional details that could be of interest. Provided to clearly enclose any attribute that is not part of the Beacon specification.",
                          "type": "object"
                        },
                        "meta": {
                          "description": "Information about the response that could be relevant for the Beacon client in order to interpret the results.",
                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                          "properties": {
                            "apiVersion": {
                              "description": "Version of the Beacon API.",
                              "example": "v2.0",
                              "type": "string"
                            },
                            "beaconId": {
                              "description": "Identifier of the beacon instance.",
                              "example": "org.example.beacon.v2",
                              "type": "string"
                            },
                            "receivedRequestSummary": {
                              "description": "Section of the response that summarize the request received as it has been interpreted by the Beacon server.",
                              "$schema": "https://json-schema.org/draft/2020-12/schema",
                              "properties": {
                                "apiVersion": {
                                  "description": "API version expected by the client to be supported by the server and used in the response format.",
                                  "example": "v2.0",
                                  "type": "string"
                                },
                                "filters": {
                                  "description": "Filters as submitted in the request.",
                                  "example": [
                                    "BTO:0000199",
                                    "PATO:0000383"
                                  ],
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "includeResultsetResponses": {
                                  "default": "HIT",
                                  "description": "Indicator of whether responses from every Resultset should be included in the response to this request or just the ones with positive, negative results or no details at all. If null (not specified), the default value of 'HIT' is assumed. This parameter allows for returning boolean/counting results although the Beacon instance is capable to return record level details.",
                                  "enum": [
                                    "ALL",
                                    "HIT",
                                    "MISS",
                                    "NONE"
                                  ],
                                  "examples": [
                                    "ALL",
                                    "HIT",
                                    "MISS",
                                    "NONE"
                                  ],
                                  "type": "string"
                                },
                                "pagination": {
                                  "description": "Pagination as requested for the results.",
                                  "properties": {
                                    "currentPage": {
                                      "description": "Token of the returned page. To be used only in the response to allow the client to check if the returned page is the one requested.",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "limit": {
                                      "default": 10,
                                      "description": "Size of the page. Use `0` to return all the results or the maximum allowed by the Beacon, if there is any.",
                                      "example": 10,
                                      "minimum": 0,
                                      "type": "integer"
                                    },
                                    "nextPage": {
                                      "description": "Token of the next page. Used to navigate forward. If empty, it is assumed that no more pages are available",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "previousPage": {
                                      "description": "Token of the previous page. Used to navigate backwards. If empty, it is assumed that the current page is the first one.",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "skip": {
                                      "default": 0,
                                      "description": "* In the request: number of pages to skip * In the response: number of pages that has been skipped",
                                      "example": 0,
                                      "minimum": 0,
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "requestParameters": {
                                  "description": "Dictionary of request parameters received in the `RequestBody` or as part of a GET request.",
                                  "$schema": "https://json-schema.org/draft/2020-12/schema",
                                  "additionalProperties": {
                                    "type": "object"
                                  },
                                  "properties": {
                                    "$schema": {
                                      "description": "Added here to allow proper validation of the documents.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "requestedGranularity": {
                                  "description": "Requested granularity for the response which may differe from the response's actual granularity.",
                                  "default": "boolean",
                                  "enum": [
                                    "boolean",
                                    "count",
                                    "aggregated",
                                    "record"
                                  ],
                                  "type": "string"
                                },
                                "requestedSchemas": {
                                  "$comment": "TODO: Add the format attribute as a uri.",
                                  "description": "Set of schemas to be used in the response to a request. `minItems: 0` is used to confirm that an empty array is acceptable here.",
                                  "minItems": 0,
                                  "items": {
                                    "description": "Schema to be used for the requested entry type in the response.",
                                    "properties": {
                                      "entityType": {
                                        "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                                        "example": "Individual",
                                        "type": "string"
                                      },
                                      "schema": {
                                        "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                                        "examples": [
                                          "./ga4gh-beacon-dataset-v2.0.0",
                                          "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "testMode": {
                                  "description": "Used for indicating that a request was received in a test context.",
                                  "default": false,
                                  "type": "boolean"
                                }
                              },
                              "required": [
                                "apiVersion",
                                "requestedSchemas",
                                "pagination",
                                "requestedGranularity"
                              ],
                              "type": "object"
                            },
                            "returnedGranularity": {
                              "description": "Granularity of the Beacon response. Targeted Beacon could respond or not with the requested granularity. E.g. record level granularity could be requested, but the Beacon could respond only with boolean or count results.",
                              "default": "boolean",
                              "enum": [
                                "boolean",
                                "count",
                                "aggregated",
                                "record"
                              ],
                              "type": "string"
                            },
                            "returnedSchemas": {
                              "description": "Set of schemas to be used in the response to a request.",
                              "items": {
                                "description": "Schema to be used for the requested entry type in the response.",
                                "properties": {
                                  "entityType": {
                                    "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                                    "example": "Individual",
                                    "type": "string"
                                  },
                                  "schema": {
                                    "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                                    "examples": [
                                      "./ga4gh-beacon-dataset-v2.0.0",
                                      "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                                    ],
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "testMode": {
                              "description": "Used for indicating that a response is returned in a test context. Purposed for compliance testing. Information returned could be fake.",
                              "default": false,
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "beaconId",
                            "apiVersion",
                            "returnedSchemas",
                            "returnedGranularity",
                            "receivedRequestSummary"
                          ],
                          "type": "object"
                        },
                        "responseSummary": {
                          "description": "Response summary, including Boolean and optionally results count.",
                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                          "properties": {
                            "exists": {
                              "description": "Indicator of whether any entry was observed. This should be non-null, unless there was an error, in which case a `beaconErrorResponse` is expected instead of this one.",
                              "examples": [
                                true
                              ],
                              "type": "boolean"
                            },
                            "numTotalResults": {
                              "description": "Total number of results.",
                              "examples": [
                                123
                              ],
                              "minimum": 0,
                              "type": "integer"
                            }
                          },
                          "required": [
                            "exists",
                            "numTotalResults"
                          ],
                          "type": "object"
                        }
                      },
                      "required": [
                        "meta",
                        "responseSummary"
                      ],
                      "type": "object"
                    },
                    {
                      "$schema": "https://json-schema.org/draft/2020-12/schema",
                      "additionalProperties": true,
                      "description": "Beacon response that includes record level details, grouped in Resultsets.",
                      "properties": {
                        "beaconHandovers": {
                          "description": "List of handovers that apply to the whole response, not to any resultset or result in particular.",
                          "items": {
                            "description": "Requested schema to be used for individuals in the response.",
                            "properties": {
                              "handoverType": {
                                "description": "Handover type, as an Ontology_term object with CURIE syntax for the `id` value. Use `CUSTOM` for the `id` when no ontology is available.",
                                "examples": [
                                  {
                                    "id": "EFO:0004157",
                                    "label": "BAM format"
                                  },
                                  {
                                    "id": "CUSTOM",
                                    "label": "download genomic variants in .pgxseg file format"
                                  }
                                ],
                                "$schema": "https://json-schema.org/draft/2020-12/schema",
                                "additionalProperties": true,
                                "properties": {
                                  "id": {
                                    "description": "A CURIE identifier, e.g. as `id` for an ontology term.",
                                    "examples": [
                                      "ga4gh:GA.01234abcde",
                                      "DUO:0000004",
                                      "orcid:0000-0003-3463-0775",
                                      "PMID:15254584"
                                    ],
                                    "pattern": "^\\w[^:]+:.+$",
                                    "type": "string"
                                  },
                                  "label": {
                                    "description": "The text that describes the term. By default it could be the preferred text of the term, but is it acceptable to customize it for a clearer description and understanding of the term in an specific context.",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id"
                                ],
                                "title": "Ontology Term",
                                "type": "object"
                              },
                              "note": {
                                "description": "An optional text including considerations on the handover link provided.",
                                "example": "This handover link provides access to a summarized VCF.",
                                "type": "string"
                              },
                              "url": {
                                "description": "URL endpoint to where the handover process could progress, in RFC3986 format",
                                "example": "https://api.mygenomeservice.org/Handover/9dcc48d7-fc88-11e8-9110-b0c592dbf8c0/",
                                "format": "uri",
                                "type": "string"
                              }
                            },
                            "required": [
                              "handoverType",
                              "url"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "info": {
                          "description": "Additional details that could be of interest. Provided to clearly enclose any attribute that is not part of the Beacon specification.",
                          "type": "object"
                        },
                        "meta": {
                          "description": "Information about the response that could be relevant for the Beacon client in order to interpret the results.",
                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                          "properties": {
                            "apiVersion": {
                              "description": "Version of the Beacon API.",
                              "example": "v2.0",
                              "type": "string"
                            },
                            "beaconId": {
                              "description": "Identifier of the beacon instance.",
                              "example": "org.example.beacon.v2",
                              "type": "string"
                            },
                            "receivedRequestSummary": {
                              "description": "Section of the response that summarize the request received as it has been interpreted by the Beacon server.",
                              "$schema": "https://json-schema.org/draft/2020-12/schema",
                              "properties": {
                                "apiVersion": {
                                  "description": "API version expected by the client to be supported by the server and used in the response format.",
                                  "example": "v2.0",
                                  "type": "string"
                                },
                                "filters": {
                                  "description": "Filters as submitted in the request.",
                                  "example": [
                                    "BTO:0000199",
                                    "PATO:0000383"
                                  ],
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "includeResultsetResponses": {
                                  "default": "HIT",
                                  "description": "Indicator of whether responses from every Resultset should be included in the response to this request or just the ones with positive, negative results or no details at all. If null (not specified), the default value of 'HIT' is assumed. This parameter allows for returning boolean/counting results although the Beacon instance is capable to return record level details.",
                                  "enum": [
                                    "ALL",
                                    "HIT",
                                    "MISS",
                                    "NONE"
                                  ],
                                  "examples": [
                                    "ALL",
                                    "HIT",
                                    "MISS",
                                    "NONE"
                                  ],
                                  "type": "string"
                                },
                                "pagination": {
                                  "description": "Pagination as requested for the results.",
                                  "properties": {
                                    "currentPage": {
                                      "description": "Token of the returned page. To be used only in the response to allow the client to check if the returned page is the one requested.",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "limit": {
                                      "default": 10,
                                      "description": "Size of the page. Use `0` to return all the results or the maximum allowed by the Beacon, if there is any.",
                                      "example": 10,
                                      "minimum": 0,
                                      "type": "integer"
                                    },
                                    "nextPage": {
                                      "description": "Token of the next page. Used to navigate forward. If empty, it is assumed that no more pages are available",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "previousPage": {
                                      "description": "Token of the previous page. Used to navigate backwards. If empty, it is assumed that the current page is the first one.",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "skip": {
                                      "default": 0,
                                      "description": "* In the request: number of pages to skip * In the response: number of pages that has been skipped",
                                      "example": 0,
                                      "minimum": 0,
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "requestParameters": {
                                  "description": "Dictionary of request parameters received in the `RequestBody` or as part of a GET request.",
                                  "$schema": "https://json-schema.org/draft/2020-12/schema",
                                  "additionalProperties": {
                                    "type": "object"
                                  },
                                  "properties": {
                                    "$schema": {
                                      "description": "Added here to allow proper validation of the documents.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "requestedGranularity": {
                                  "description": "Requested granularity for the response which may differe from the response's actual granularity.",
                                  "default": "boolean",
                                  "enum": [
                                    "boolean",
                                    "count",
                                    "aggregated",
                                    "record"
                                  ],
                                  "type": "string"
                                },
                                "requestedSchemas": {
                                  "$comment": "TODO: Add the format attribute as a uri.",
                                  "description": "Set of schemas to be used in the response to a request. `minItems: 0` is used to confirm that an empty array is acceptable here.",
                                  "minItems": 0,
                                  "items": {
                                    "description": "Schema to be used for the requested entry type in the response.",
                                    "properties": {
                                      "entityType": {
                                        "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                                        "example": "Individual",
                                        "type": "string"
                                      },
                                      "schema": {
                                        "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                                        "examples": [
                                          "./ga4gh-beacon-dataset-v2.0.0",
                                          "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "testMode": {
                                  "description": "Used for indicating that a request was received in a test context.",
                                  "default": false,
                                  "type": "boolean"
                                }
                              },
                              "required": [
                                "apiVersion",
                                "requestedSchemas",
                                "pagination",
                                "requestedGranularity"
                              ],
                              "type": "object"
                            },
                            "returnedGranularity": {
                              "description": "Granularity of the Beacon response. Targeted Beacon could respond or not with the requested granularity. E.g. record level granularity could be requested, but the Beacon could respond only with boolean or count results.",
                              "default": "boolean",
                              "enum": [
                                "boolean",
                                "count",
                                "aggregated",
                                "record"
                              ],
                              "type": "string"
                            },
                            "returnedSchemas": {
                              "description": "Set of schemas to be used in the response to a request.",
                              "items": {
                                "description": "Schema to be used for the requested entry type in the response.",
                                "properties": {
                                  "entityType": {
                                    "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                                    "example": "Individual",
                                    "type": "string"
                                  },
                                  "schema": {
                                    "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                                    "examples": [
                                      "./ga4gh-beacon-dataset-v2.0.0",
                                      "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                                    ],
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "testMode": {
                              "description": "Used for indicating that a response is returned in a test context. Purposed for compliance testing. Information returned could be fake.",
                              "default": false,
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "beaconId",
                            "apiVersion",
                            "returnedSchemas",
                            "returnedGranularity",
                            "receivedRequestSummary"
                          ],
                          "type": "object"
                        },
                        "response": {
                          "description": "Response for queries that recovers any result.",
                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                          "additionalProperties": true,
                          "definitions": {
                            "ResultsetInstance": {
                              "additionalProperties": true,
                              "properties": {
                                "exists": {
                                  "type": "boolean"
                                },
                                "id": {
                                  "description": "id of the resultset",
                                  "example": "datasetA",
                                  "type": "string"
                                },
                                "info": {
                                  "description": "Additional details that could be of interest about the Resultset. Provided to clearly enclose any attribute that is not part of the Beacon specification.",
                                  "type": "object"
                                },
                                "results": {
                                  "items": {
                                    "type": "object"
                                  },
                                  "minItems": 0,
                                  "type": "array"
                                },
                                "resultsCount": {
                                  "description": "Number of results in this Resultset.",
                                  "type": "integer"
                                },
                                "resultsHandovers": {
                                  "description": "List of handovers that apply to this resultset, not to the whole Beacon or to a result in particular.",
                                  "items": {
                                    "description": "Requested schema to be used for individuals in the response.",
                                    "properties": {
                                      "handoverType": {
                                        "description": "Handover type, as an Ontology_term object with CURIE syntax for the `id` value. Use `CUSTOM` for the `id` when no ontology is available.",
                                        "examples": [
                                          {
                                            "id": "EFO:0004157",
                                            "label": "BAM format"
                                          },
                                          {
                                            "id": "CUSTOM",
                                            "label": "download genomic variants in .pgxseg file format"
                                          }
                                        ],
                                        "$schema": "https://json-schema.org/draft/2020-12/schema",
                                        "additionalProperties": true,
                                        "properties": {
                                          "id": {
                                            "description": "A CURIE identifier, e.g. as `id` for an ontology term.",
                                            "examples": [
                                              "ga4gh:GA.01234abcde",
                                              "DUO:0000004",
                                              "orcid:0000-0003-3463-0775",
                                              "PMID:15254584"
                                            ],
                                            "pattern": "^\\w[^:]+:.+$",
                                            "type": "string"
                                          },
                                          "label": {
                                            "description": "The text that describes the term. By default it could be the preferred text of the term, but is it acceptable to customize it for a clearer description and understanding of the term in an specific context.",
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "id"
                                        ],
                                        "title": "Ontology Term",
                                        "type": "object"
                                      },
                                      "note": {
                                        "description": "An optional text including considerations on the handover link provided.",
                                        "example": "This handover link provides access to a summarized VCF.",
                                        "type": "string"
                                      },
                                      "url": {
                                        "description": "URL endpoint to where the handover process could progress, in RFC3986 format",
                                        "example": "https://api.mygenomeservice.org/Handover/9dcc48d7-fc88-11e8-9110-b0c592dbf8c0/",
                                        "format": "uri",
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "handoverType",
                                      "url"
                                    ],
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "setType": {
                                  "default": "dataset",
                                  "description": "Entry type of resultSet. It SHOULD MATCH an entry type declared as collection in the Beacon configuration.",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "id",
                                "setType",
                                "exists",
                                "resultsCount",
                                "results"
                              ]
                            }
                          },
                          "properties": {
                            "$schema": {
                              "$comment": "TO REVIEW: adding a `format` or `regex` attribute that validates correctly against a file path (relative).",
                              "description": "Refers to the JSON Schema which describes the set of valid attributes for this particular document type. This attribute is mostly used in schemas that should be tested in Beacon implementations.",
                              "type": "string"
                            },
                            "resultSets": {
                              "items": {
                                "additionalProperties": true,
                                "properties": {
                                  "exists": {
                                    "type": "boolean"
                                  },
                                  "id": {
                                    "description": "id of the resultset",
                                    "example": "datasetA",
                                    "type": "string"
                                  },
                                  "info": {
                                    "description": "Additional details that could be of interest about the Resultset. Provided to clearly enclose any attribute that is not part of the Beacon specification.",
                                    "type": "object"
                                  },
                                  "results": {
                                    "items": {
                                      "type": "object"
                                    },
                                    "minItems": 0,
                                    "type": "array"
                                  },
                                  "resultsCount": {
                                    "description": "Number of results in this Resultset.",
                                    "type": "integer"
                                  },
                                  "resultsHandovers": {
                                    "description": "List of handovers that apply to this resultset, not to the whole Beacon or to a result in particular.",
                                    "items": {
                                      "description": "Requested schema to be used for individuals in the response.",
                                      "properties": {
                                        "handoverType": {
                                          "description": "Handover type, as an Ontology_term object with CURIE syntax for the `id` value. Use `CUSTOM` for the `id` when no ontology is available.",
                                          "examples": [
                                            {
                                              "id": "EFO:0004157",
                                              "label": "BAM format"
                                            },
                                            {
                                              "id": "CUSTOM",
                                              "label": "download genomic variants in .pgxseg file format"
                                            }
                                          ],
                                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                                          "additionalProperties": true,
                                          "properties": {
                                            "id": {
                                              "description": "A CURIE identifier, e.g. as `id` for an ontology term.",
                                              "examples": [
                                                "ga4gh:GA.01234abcde",
                                                "DUO:0000004",
                                                "orcid:0000-0003-3463-0775",
                                                "PMID:15254584"
                                              ],
                                              "pattern": "^\\w[^:]+:.+$",
                                              "type": "string"
                                            },
                                            "label": {
                                              "description": "The text that describes the term. By default it could be the preferred text of the term, but is it acceptable to customize it for a clearer description and understanding of the term in an specific context.",
                                              "type": "string"
                                            }
                                          },
                                          "required": [
                                            "id"
                                          ],
                                          "title": "Ontology Term",
                                          "type": "object"
                                        },
                                        "note": {
                                          "description": "An optional text including considerations on the handover link provided.",
                                          "example": "This handover link provides access to a summarized VCF.",
                                          "type": "string"
                                        },
                                        "url": {
                                          "description": "URL endpoint to where the handover process could progress, in RFC3986 format",
                                          "example": "https://api.mygenomeservice.org/Handover/9dcc48d7-fc88-11e8-9110-b0c592dbf8c0/",
                                          "format": "uri",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "handoverType",
                                        "url"
                                      ],
                                      "type": "object"
                                    },
                                    "type": "array"
                                  },
                                  "setType": {
                                    "default": "dataset",
                                    "description": "Entry type of resultSet. It SHOULD MATCH an entry type declared as collection in the Beacon configuration.",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id",
                                  "setType",
                                  "exists",
                                  "resultsCount",
                                  "results"
                                ]
                              },
                              "minItems": 0,
                              "type": "array"
                            }
                          },
                          "required": [
                            "resultSets"
                          ],
                          "title": "Beacon ResultSet",
                          "type": "object"
                        },
                        "responseSummary": {
                          "description": "Response summary, including Boolean and optionally results count.",
                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                          "properties": {
                            "exists": {
                              "description": "Indicator of whether any entry was observed. This should be non-null, unless there was an error, in which case an error response is expected instead of this one.",
                              "examples": [
                                true
                              ],
                              "type": "boolean"
                            },
                            "numTotalResults": {
                              "description": "Total number of results.",
                              "examples": [
                                123
                              ],
                              "minimum": 0,
                              "type": "integer"
                            }
                          },
                          "required": [
                            "exists"
                          ],
                          "type": "object"
                        }
                      },
                      "required": [
                        "meta",
                        "responseSummary",
                        "response"
                      ],
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Successful operation."
          },
          "default": {
            "description": "An unsuccessful operation",
            "$schema": "https://json-schema.org/draft/2020-12/schema",
            "additionalProperties": true,
            "properties": {
              "error": {
                "description": "Error response",
                "properties": {
                  "errorCode": {
                    "description": "Entry not found",
                    "examples": [
                      "404"
                    ],
                    "format": "int32",
                    "type": "integer"
                  },
                  "errorMessage": {
                    "examples": [
                      "the provided parameters are incomplete. 'xyz' is missing."
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "errorCode"
                ],
                "type": "object"
              },
              "meta": {
                "description": "Information about the response that could be relevant for the Beacon client in order to interpret the results.",
                "$schema": "https://json-schema.org/draft/2020-12/schema",
                "properties": {
                  "apiVersion": {
                    "description": "Version of the Beacon API.",
                    "example": "v2.0",
                    "type": "string"
                  },
                  "beaconId": {
                    "description": "Identifier of the beacon instance.",
                    "example": "org.example.beacon.v2",
                    "type": "string"
                  },
                  "receivedRequestSummary": {
                    "description": "Section of the response that summarize the request received as it has been interpreted by the Beacon server.",
                    "$schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                      "apiVersion": {
                        "description": "API version expected by the client to be supported by the server and used in the response format.",
                        "example": "v2.0",
                        "type": "string"
                      },
                      "filters": {
                        "description": "Filters as submitted in the request.",
                        "example": [
                          "BTO:0000199",
                          "PATO:0000383"
                        ],
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "includeResultsetResponses": {
                        "default": "HIT",
                        "description": "Indicator of whether responses from every Resultset should be included in the response to this request or just the ones with positive, negative results or no details at all. If null (not specified), the default value of 'HIT' is assumed. This parameter allows for returning boolean/counting results although the Beacon instance is capable to return record level details.",
                        "enum": [
                          "ALL",
                          "HIT",
                          "MISS",
                          "NONE"
                        ],
                        "examples": [
                          "ALL",
                          "HIT",
                          "MISS",
                          "NONE"
                        ],
                        "type": "string"
                      },
                      "pagination": {
                        "description": "Pagination as requested for the results.",
                        "properties": {
                          "currentPage": {
                            "description": "Token of the returned page. To be used only in the response to allow the client to check if the returned page is the one requested.",
                            "example": "ab0sc&fe1dd",
                            "type": "string"
                          },
                          "limit": {
                            "default": 10,
                            "description": "Size of the page. Use `0` to return all the results or the maximum allowed by the Beacon, if there is any.",
                            "example": 10,
                            "minimum": 0,
                            "type": "integer"
                          },
                          "nextPage": {
                            "description": "Token of the next page. Used to navigate forward. If empty, it is assumed that no more pages are available",
                            "example": "ab0sc&fe1dd",
                            "type": "string"
                          },
                          "previousPage": {
                            "description": "Token of the previous page. Used to navigate backwards. If empty, it is assumed that the current page is the first one.",
                            "example": "ab0sc&fe1dd",
                            "type": "string"
                          },
                          "skip": {
                            "default": 0,
                            "description": "* In the request: number of pages to skip * In the response: number of pages that has been skipped",
                            "example": 0,
                            "minimum": 0,
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "requestParameters": {
                        "description": "Dictionary of request parameters received in the `RequestBody` or as part of a GET request.",
                        "$schema": "https://json-schema.org/draft/2020-12/schema",
                        "additionalProperties": {
                          "type": "object"
                        },
                        "properties": {
                          "$schema": {
                            "description": "Added here to allow proper validation of the documents.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "requestedGranularity": {
                        "description": "Requested granularity for the response which may differe from the response's actual granularity.",
                        "default": "boolean",
                        "enum": [
                          "boolean",
                          "count",
                          "aggregated",
                          "record"
                        ],
                        "type": "string"
                      },
                      "requestedSchemas": {
                        "$comment": "TODO: Add the format attribute as a uri.",
                        "description": "Set of schemas to be used in the response to a request. `minItems: 0` is used to confirm that an empty array is acceptable here.",
                        "minItems": 0,
                        "items": {
                          "description": "Schema to be used for the requested entry type in the response.",
                          "properties": {
                            "entityType": {
                              "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                              "example": "Individual",
                              "type": "string"
                            },
                            "schema": {
                              "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                              "examples": [
                                "./ga4gh-beacon-dataset-v2.0.0",
                                "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "testMode": {
                        "description": "Used for indicating that a request was received in a test context.",
                        "default": false,
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "apiVersion",
                      "requestedSchemas",
                      "pagination",
                      "requestedGranularity"
                    ],
                    "type": "object"
                  },
                  "returnedGranularity": {
                    "description": "Granularity of the Beacon response. Targeted Beacon could respond or not with the requested granularity. E.g. record level granularity could be requested, but the Beacon could respond only with boolean or count results.",
                    "default": "boolean",
                    "enum": [
                      "boolean",
                      "count",
                      "aggregated",
                      "record"
                    ],
                    "type": "string"
                  },
                  "returnedSchemas": {
                    "description": "Set of schemas to be used in the response to a request.",
                    "items": {
                      "description": "Schema to be used for the requested entry type in the response.",
                      "properties": {
                        "entityType": {
                          "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                          "example": "Individual",
                          "type": "string"
                        },
                        "schema": {
                          "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                          "examples": [
                            "./ga4gh-beacon-dataset-v2.0.0",
                            "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "testMode": {
                    "description": "Used for indicating that a response is returned in a test context. Purposed for compliance testing. Information returned could be fake.",
                    "default": false,
                    "type": "boolean"
                  }
                },
                "required": [
                  "beaconId",
                  "apiVersion",
                  "returnedSchemas",
                  "returnedGranularity",
                  "receivedRequestSummary"
                ],
                "type": "object"
              }
            },
            "required": [
              "meta",
              "error"
            ],
            "type": "object"
          }
        },
        "tags": [
          "GET Endpoints"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "Get the biosamples list from one genomic variant, identified by its (unique) 'id'",
        "operationId": "postOneGenomicVariantIndividuals",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$schema": "https://json-schema.org/draft/2020-12/schema",
                "description": "Schema for the Beacon request. It is named `RequestBody` to keep the same nomenclature used by OpenAPI v3, but it actually contains the definition of the whole HTTP POST request payload.",
                "properties": {
                  "$schema": {
                    "$comment": "TO REVIEW: adding a `format` or `regex` attribute that validates correctly against a file path (relative).",
                    "description": "Refers to the JSON Schema which describes the set of valid attributes for this particular document type. This attribute is mostly used in schemas that should be tested in Beacon implementations.",
                    "type": "string"
                  },
                  "meta": {
                    "description": "Information relevant for building the response.",
                    "$schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                      "$schema": {
                        "$comment": "TO REVIEW: adding a `format` or `regex` attribute that validates correctly against a file path (relative).",
                        "description": "Refers to the JSON Schema which describes the set of valid attributes for this particular document type. This attribute is mostly used in schemas that should be tested in Beacon implementations.",
                        "type": "string"
                      },
                      "apiVersion": {
                        "description": "API version expected by the client to be supported by the server and used in the response format.",
                        "example": "v2.0",
                        "type": "string"
                      },
                      "requestedSchemas": {
                        "description": "Set of schemas to be used in the response.",
                        "items": {
                          "description": "Schema to be used for the requested entry type in the response.",
                          "properties": {
                            "entityType": {
                              "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                              "example": "Individual",
                              "type": "string"
                            },
                            "schema": {
                              "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                              "examples": [
                                "./ga4gh-beacon-dataset-v2.0.0",
                                "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    },
                    "required": [
                      "apiVersion"
                    ],
                    "type": "object"
                  },
                  "query": {
                    "description": "Parameters to limit the list of returned results.",
                    "properties": {
                      "filters": {
                        "description": "Ontology based filters. Using CURIE syntax is encouraged.",
                        "$schema": "https://json-schema.org/draft/2020-12/schema",
                        "additionalProperties": true,
                        "definitions": {
                          "AlphanumericFilter": {
                            "description": "Filter results based on operators and values applied to alphanumeric fields.",
                            "properties": {
                              "id": {
                                "description": "Field identfier to be queried.",
                                "example": "age",
                                "type": "string"
                              },
                              "operator": {
                                "default": "=",
                                "description": "Defines how the value relates to the field `id`.",
                                "enum": [
                                  "=",
                                  "<",
                                  ">",
                                  "!",
                                  ">=",
                                  "<="
                                ],
                                "example": ">",
                                "type": "string"
                              },
                              "scope": {
                                "description": "The entry type to which the filter applies",
                                "example": "biosamples",
                                "type": "string"
                              },
                              "value": {
                                "description": "Alphanumeric search term to be used within the query which can contain wildcard characters (%) to denote any number of unknown characters.  Values can be assocatied with units if applicable.",
                                "example": "P70Y",
                                "type": "string"
                              }
                            },
                            "required": [
                              "id",
                              "operator",
                              "value"
                            ],
                            "type": "object"
                          },
                          "CustomFilter": {
                            "description": "Filter results to include records that contain a custom term defined by this Beacon.",
                            "properties": {
                              "id": {
                                "description": "Custom filter terms should contain a unique identifier.",
                                "example": "demographic.ethnicity:asian",
                                "type": "string"
                              },
                              "scope": {
                                "description": "The entry type to which the filter applies",
                                "example": "biosamples",
                                "type": "string"
                              }
                            },
                            "required": [
                              "id"
                            ],
                            "type": "object"
                          },
                          "FilteringTerm": {
                            "anyOf": [
                              {
                                "description": "Filter results to include records that contain a specific ontology term.",
                                "properties": {
                                  "id": {
                                    "description": "Term ID to be queried, using CURIE syntax where possible.",
                                    "example": "HP:0002664",
                                    "type": "string"
                                  },
                                  "includeDescendantTerms": {
                                    "default": true,
                                    "description": "Define if the Beacon should implement the ontology hierarchy, thus query the descendant terms of `id`.",
                                    "type": "boolean"
                                  },
                                  "scope": {
                                    "description": "The entry type to which the filter applies",
                                    "example": "biosamples",
                                    "type": "string"
                                  },
                                  "similarity": {
                                    "default": "exact",
                                    "description": "Allow the Beacon to return results which do not match the filter exactly, but do match to a certain degree of similarity. The Beacon defines the semantic similarity model implemented and how to apply the thresholds of 'high', 'medium' and 'low' similarity.",
                                    "enum": [
                                      "exact",
                                      "high",
                                      "medium",
                                      "low"
                                    ],
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id"
                                ],
                                "type": "object"
                              },
                              {
                                "description": "Filter results based on operators and values applied to alphanumeric fields.",
                                "properties": {
                                  "id": {
                                    "description": "Field identfier to be queried.",
                                    "example": "age",
                                    "type": "string"
                                  },
                                  "operator": {
                                    "default": "=",
                                    "description": "Defines how the value relates to the field `id`.",
                                    "enum": [
                                      "=",
                                      "<",
                                      ">",
                                      "!",
                                      ">=",
                                      "<="
                                    ],
                                    "example": ">",
                                    "type": "string"
                                  },
                                  "scope": {
                                    "description": "The entry type to which the filter applies",
                                    "example": "biosamples",
                                    "type": "string"
                                  },
                                  "value": {
                                    "description": "Alphanumeric search term to be used within the query which can contain wildcard characters (%) to denote any number of unknown characters.  Values can be assocatied with units if applicable.",
                                    "example": "P70Y",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id",
                                  "operator",
                                  "value"
                                ],
                                "type": "object"
                              },
                              {
                                "description": "Filter results to include records that contain a custom term defined by this Beacon.",
                                "properties": {
                                  "id": {
                                    "description": "Custom filter terms should contain a unique identifier.",
                                    "example": "demographic.ethnicity:asian",
                                    "type": "string"
                                  },
                                  "scope": {
                                    "description": "The entry type to which the filter applies",
                                    "example": "biosamples",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id"
                                ],
                                "type": "object"
                              }
                            ]
                          },
                          "OntologyFilter": {
                            "description": "Filter results to include records that contain a specific ontology term.",
                            "properties": {
                              "id": {
                                "description": "Term ID to be queried, using CURIE syntax where possible.",
                                "example": "HP:0002664",
                                "type": "string"
                              },
                              "includeDescendantTerms": {
                                "default": true,
                                "description": "Define if the Beacon should implement the ontology hierarchy, thus query the descendant terms of `id`.",
                                "type": "boolean"
                              },
                              "scope": {
                                "description": "The entry type to which the filter applies",
                                "example": "biosamples",
                                "type": "string"
                              },
                              "similarity": {
                                "default": "exact",
                                "description": "Allow the Beacon to return results which do not match the filter exactly, but do match to a certain degree of similarity. The Beacon defines the semantic similarity model implemented and how to apply the thresholds of 'high', 'medium' and 'low' similarity.",
                                "enum": [
                                  "exact",
                                  "high",
                                  "medium",
                                  "low"
                                ],
                                "type": "string"
                              }
                            },
                            "required": [
                              "id"
                            ],
                            "type": "object"
                          }
                        },
                        "items": {
                          "anyOf": [
                            {
                              "description": "Filter results to include records that contain a specific ontology term.",
                              "properties": {
                                "id": {
                                  "description": "Term ID to be queried, using CURIE syntax where possible.",
                                  "example": "HP:0002664",
                                  "type": "string"
                                },
                                "includeDescendantTerms": {
                                  "default": true,
                                  "description": "Define if the Beacon should implement the ontology hierarchy, thus query the descendant terms of `id`.",
                                  "type": "boolean"
                                },
                                "scope": {
                                  "description": "The entry type to which the filter applies",
                                  "example": "biosamples",
                                  "type": "string"
                                },
                                "similarity": {
                                  "default": "exact",
                                  "description": "Allow the Beacon to return results which do not match the filter exactly, but do match to a certain degree of similarity. The Beacon defines the semantic similarity model implemented and how to apply the thresholds of 'high', 'medium' and 'low' similarity.",
                                  "enum": [
                                    "exact",
                                    "high",
                                    "medium",
                                    "low"
                                  ],
                                  "type": "string"
                                }
                              },
                              "required": [
                                "id"
                              ],
                              "type": "object"
                            },
                            {
                              "description": "Filter results based on operators and values applied to alphanumeric fields.",
                              "properties": {
                                "id": {
                                  "description": "Field identfier to be queried.",
                                  "example": "age",
                                  "type": "string"
                                },
                                "operator": {
                                  "default": "=",
                                  "description": "Defines how the value relates to the field `id`.",
                                  "enum": [
                                    "=",
                                    "<",
                                    ">",
                                    "!",
                                    ">=",
                                    "<="
                                  ],
                                  "example": ">",
                                  "type": "string"
                                },
                                "scope": {
                                  "description": "The entry type to which the filter applies",
                                  "example": "biosamples",
                                  "type": "string"
                                },
                                "value": {
                                  "description": "Alphanumeric search term to be used within the query which can contain wildcard characters (%) to denote any number of unknown characters.  Values can be assocatied with units if applicable.",
                                  "example": "P70Y",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "id",
                                "operator",
                                "value"
                              ],
                              "type": "object"
                            },
                            {
                              "description": "Filter results to include records that contain a custom term defined by this Beacon.",
                              "properties": {
                                "id": {
                                  "description": "Custom filter terms should contain a unique identifier.",
                                  "example": "demographic.ethnicity:asian",
                                  "type": "string"
                                },
                                "scope": {
                                  "description": "The entry type to which the filter applies",
                                  "example": "biosamples",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "id"
                              ],
                              "type": "object"
                            }
                          ]
                        },
                        "title": "Filtering Term Element",
                        "type": "array"
                      },
                      "includeResultsetResponses": {
                        "default": "HIT",
                        "description": "Indicator of whether responses from every Resultset should be included in the response to this request or just the ones with positive, negative results or no details at all. If null (not specified), the default value of 'HIT' is assumed. This parameter allows for returning boolean/counting results although the Beacon instance is capable to return record level details.",
                        "enum": [
                          "ALL",
                          "HIT",
                          "MISS",
                          "NONE"
                        ],
                        "examples": [
                          "ALL",
                          "HIT",
                          "MISS",
                          "NONE"
                        ],
                        "type": "string"
                      },
                      "pagination": {
                        "description": "Pagination parameters applied to response documents, in case of record level granularity.",
                        "properties": {
                          "currentPage": {
                            "description": "Token of the returned page. To be used only in the response to allow the client to check if the returned page is the one requested.",
                            "example": "ab0sc&fe1dd",
                            "type": "string"
                          },
                          "limit": {
                            "default": 10,
                            "description": "Size of the page. Use `0` to return all the results or the maximum allowed by the Beacon, if there is any.",
                            "example": 10,
                            "minimum": 0,
                            "type": "integer"
                          },
                          "nextPage": {
                            "description": "Token of the next page. Used to navigate forward. If empty, it is assumed that no more pages are available",
                            "example": "ab0sc&fe1dd",
                            "type": "string"
                          },
                          "previousPage": {
                            "description": "Token of the previous page. Used to navigate backwards. If empty, it is assumed that the current page is the first one.",
                            "example": "ab0sc&fe1dd",
                            "type": "string"
                          },
                          "skip": {
                            "default": 0,
                            "description": "* In the request: number of pages to skip * In the response: number of pages that has been skipped",
                            "example": 0,
                            "minimum": 0,
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "requestParameters": {
                        "description": "Parameters used for the entry type specific query elements.",
                        "$schema": "https://json-schema.org/draft/2020-12/schema",
                        "additionalProperties": {
                          "type": "object"
                        },
                        "properties": {
                          "$schema": {
                            "description": "Added here to allow proper validation of the documents.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "requestedGranularity": {
                        "description": "Requested granularity for the response. Beacons do not have to respond with the requested granularity, e.g. may respond with count results although record level granularity had been requested but indicate the granularity of the response in the response's metadata.",
                        "default": "boolean",
                        "enum": [
                          "boolean",
                          "count",
                          "aggregated",
                          "record"
                        ],
                        "type": "string"
                      },
                      "testMode": {
                        "description": "Used for indicating that a request or response is done in a test context.",
                        "default": false,
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  }
                },
                "required": [
                  "meta"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$schema": "https://json-schema.org/draft/2020-12/schema",
                      "description": "Complete definition for a minimal response that provides *only* a `Boolean` exists true|false answer.",
                      "properties": {
                        "beaconHandovers": {
                          "description": "List of handovers that apply to the whole response, not to any resultset or result in particular.",
                          "items": {
                            "description": "Requested schema to be used for individuals in the response.",
                            "properties": {
                              "handoverType": {
                                "description": "Handover type, as an Ontology_term object with CURIE syntax for the `id` value. Use `CUSTOM` for the `id` when no ontology is available.",
                                "examples": [
                                  {
                                    "id": "EFO:0004157",
                                    "label": "BAM format"
                                  },
                                  {
                                    "id": "CUSTOM",
                                    "label": "download genomic variants in .pgxseg file format"
                                  }
                                ],
                                "$schema": "https://json-schema.org/draft/2020-12/schema",
                                "additionalProperties": true,
                                "properties": {
                                  "id": {
                                    "description": "A CURIE identifier, e.g. as `id` for an ontology term.",
                                    "examples": [
                                      "ga4gh:GA.01234abcde",
                                      "DUO:0000004",
                                      "orcid:0000-0003-3463-0775",
                                      "PMID:15254584"
                                    ],
                                    "pattern": "^\\w[^:]+:.+$",
                                    "type": "string"
                                  },
                                  "label": {
                                    "description": "The text that describes the term. By default it could be the preferred text of the term, but is it acceptable to customize it for a clearer description and understanding of the term in an specific context.",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id"
                                ],
                                "title": "Ontology Term",
                                "type": "object"
                              },
                              "note": {
                                "description": "An optional text including considerations on the handover link provided.",
                                "example": "This handover link provides access to a summarized VCF.",
                                "type": "string"
                              },
                              "url": {
                                "description": "URL endpoint to where the handover process could progress, in RFC3986 format",
                                "example": "https://api.mygenomeservice.org/Handover/9dcc48d7-fc88-11e8-9110-b0c592dbf8c0/",
                                "format": "uri",
                                "type": "string"
                              }
                            },
                            "required": [
                              "handoverType",
                              "url"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "info": {
                          "description": "Additional details that could be of interest. Provided to clearly enclose any attribute that is not part of the Beacon specification.",
                          "type": "object"
                        },
                        "meta": {
                          "description": "Information about the response that could be relevant for the Beacon client in order to interpret the results.",
                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                          "properties": {
                            "apiVersion": {
                              "description": "Version of the Beacon API.",
                              "example": "v2.0",
                              "type": "string"
                            },
                            "beaconId": {
                              "description": "Identifier of the beacon instance.",
                              "example": "org.example.beacon.v2",
                              "type": "string"
                            },
                            "receivedRequestSummary": {
                              "description": "Section of the response that summarize the request received as it has been interpreted by the Beacon server.",
                              "$schema": "https://json-schema.org/draft/2020-12/schema",
                              "properties": {
                                "apiVersion": {
                                  "description": "API version expected by the client to be supported by the server and used in the response format.",
                                  "example": "v2.0",
                                  "type": "string"
                                },
                                "filters": {
                                  "description": "Filters as submitted in the request.",
                                  "example": [
                                    "BTO:0000199",
                                    "PATO:0000383"
                                  ],
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "includeResultsetResponses": {
                                  "default": "HIT",
                                  "description": "Indicator of whether responses from every Resultset should be included in the response to this request or just the ones with positive, negative results or no details at all. If null (not specified), the default value of 'HIT' is assumed. This parameter allows for returning boolean/counting results although the Beacon instance is capable to return record level details.",
                                  "enum": [
                                    "ALL",
                                    "HIT",
                                    "MISS",
                                    "NONE"
                                  ],
                                  "examples": [
                                    "ALL",
                                    "HIT",
                                    "MISS",
                                    "NONE"
                                  ],
                                  "type": "string"
                                },
                                "pagination": {
                                  "description": "Pagination as requested for the results.",
                                  "properties": {
                                    "currentPage": {
                                      "description": "Token of the returned page. To be used only in the response to allow the client to check if the returned page is the one requested.",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "limit": {
                                      "default": 10,
                                      "description": "Size of the page. Use `0` to return all the results or the maximum allowed by the Beacon, if there is any.",
                                      "example": 10,
                                      "minimum": 0,
                                      "type": "integer"
                                    },
                                    "nextPage": {
                                      "description": "Token of the next page. Used to navigate forward. If empty, it is assumed that no more pages are available",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "previousPage": {
                                      "description": "Token of the previous page. Used to navigate backwards. If empty, it is assumed that the current page is the first one.",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "skip": {
                                      "default": 0,
                                      "description": "* In the request: number of pages to skip * In the response: number of pages that has been skipped",
                                      "example": 0,
                                      "minimum": 0,
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "requestParameters": {
                                  "description": "Dictionary of request parameters received in the `RequestBody` or as part of a GET request.",
                                  "$schema": "https://json-schema.org/draft/2020-12/schema",
                                  "additionalProperties": {
                                    "type": "object"
                                  },
                                  "properties": {
                                    "$schema": {
                                      "description": "Added here to allow proper validation of the documents.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "requestedGranularity": {
                                  "description": "Requested granularity for the response which may differe from the response's actual granularity.",
                                  "default": "boolean",
                                  "enum": [
                                    "boolean",
                                    "count",
                                    "aggregated",
                                    "record"
                                  ],
                                  "type": "string"
                                },
                                "requestedSchemas": {
                                  "$comment": "TODO: Add the format attribute as a uri.",
                                  "description": "Set of schemas to be used in the response to a request. `minItems: 0` is used to confirm that an empty array is acceptable here.",
                                  "minItems": 0,
                                  "items": {
                                    "description": "Schema to be used for the requested entry type in the response.",
                                    "properties": {
                                      "entityType": {
                                        "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                                        "example": "Individual",
                                        "type": "string"
                                      },
                                      "schema": {
                                        "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                                        "examples": [
                                          "./ga4gh-beacon-dataset-v2.0.0",
                                          "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "testMode": {
                                  "description": "Used for indicating that a request was received in a test context.",
                                  "default": false,
                                  "type": "boolean"
                                }
                              },
                              "required": [
                                "apiVersion",
                                "requestedSchemas",
                                "pagination",
                                "requestedGranularity"
                              ],
                              "type": "object"
                            },
                            "returnedGranularity": {
                              "description": "Granularity of the Beacon response. Targeted Beacon could respond or not with the requested granularity. E.g. record level granularity could be requested, but the Beacon could respond only with boolean or count results.",
                              "default": "boolean",
                              "enum": [
                                "boolean",
                                "count",
                                "aggregated",
                                "record"
                              ],
                              "type": "string"
                            },
                            "returnedSchemas": {
                              "description": "Set of schemas to be used in the response to a request.",
                              "items": {
                                "description": "Schema to be used for the requested entry type in the response.",
                                "properties": {
                                  "entityType": {
                                    "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                                    "example": "Individual",
                                    "type": "string"
                                  },
                                  "schema": {
                                    "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                                    "examples": [
                                      "./ga4gh-beacon-dataset-v2.0.0",
                                      "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                                    ],
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "testMode": {
                              "description": "Used for indicating that a response is returned in a test context. Purposed for compliance testing. Information returned could be fake.",
                              "default": false,
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "beaconId",
                            "apiVersion",
                            "returnedSchemas",
                            "returnedGranularity",
                            "receivedRequestSummary"
                          ],
                          "type": "object"
                        },
                        "responseSummary": {
                          "description": "Boolean (true/false) response section.",
                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                          "properties": {
                            "exists": {
                              "description": "Indicator of whether any entry was observed. This should be non-null, unless there was an error, in which case an error response is expected instead of this one.",
                              "examples": [
                                true
                              ],
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "exists"
                          ],
                          "type": "object"
                        }
                      },
                      "required": [
                        "meta",
                        "responseSummary"
                      ],
                      "type": "object"
                    },
                    {
                      "$schema": "https://json-schema.org/draft/2020-12/schema",
                      "description": "Complete definition for a response that does not include record level details but provides `Boolean` and `count` information.",
                      "properties": {
                        "beaconHandovers": {
                          "description": "List of handovers that apply to the whole response, not to any resultset or result in particular.",
                          "items": {
                            "description": "Requested schema to be used for individuals in the response.",
                            "properties": {
                              "handoverType": {
                                "description": "Handover type, as an Ontology_term object with CURIE syntax for the `id` value. Use `CUSTOM` for the `id` when no ontology is available.",
                                "examples": [
                                  {
                                    "id": "EFO:0004157",
                                    "label": "BAM format"
                                  },
                                  {
                                    "id": "CUSTOM",
                                    "label": "download genomic variants in .pgxseg file format"
                                  }
                                ],
                                "$schema": "https://json-schema.org/draft/2020-12/schema",
                                "additionalProperties": true,
                                "properties": {
                                  "id": {
                                    "description": "A CURIE identifier, e.g. as `id` for an ontology term.",
                                    "examples": [
                                      "ga4gh:GA.01234abcde",
                                      "DUO:0000004",
                                      "orcid:0000-0003-3463-0775",
                                      "PMID:15254584"
                                    ],
                                    "pattern": "^\\w[^:]+:.+$",
                                    "type": "string"
                                  },
                                  "label": {
                                    "description": "The text that describes the term. By default it could be the preferred text of the term, but is it acceptable to customize it for a clearer description and understanding of the term in an specific context.",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id"
                                ],
                                "title": "Ontology Term",
                                "type": "object"
                              },
                              "note": {
                                "description": "An optional text including considerations on the handover link provided.",
                                "example": "This handover link provides access to a summarized VCF.",
                                "type": "string"
                              },
                              "url": {
                                "description": "URL endpoint to where the handover process could progress, in RFC3986 format",
                                "example": "https://api.mygenomeservice.org/Handover/9dcc48d7-fc88-11e8-9110-b0c592dbf8c0/",
                                "format": "uri",
                                "type": "string"
                              }
                            },
                            "required": [
                              "handoverType",
                              "url"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "info": {
                          "description": "Additional details that could be of interest. Provided to clearly enclose any attribute that is not part of the Beacon specification.",
                          "type": "object"
                        },
                        "meta": {
                          "description": "Information about the response that could be relevant for the Beacon client in order to interpret the results.",
                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                          "properties": {
                            "apiVersion": {
                              "description": "Version of the Beacon API.",
                              "example": "v2.0",
                              "type": "string"
                            },
                            "beaconId": {
                              "description": "Identifier of the beacon instance.",
                              "example": "org.example.beacon.v2",
                              "type": "string"
                            },
                            "receivedRequestSummary": {
                              "description": "Section of the response that summarize the request received as it has been interpreted by the Beacon server.",
                              "$schema": "https://json-schema.org/draft/2020-12/schema",
                              "properties": {
                                "apiVersion": {
                                  "description": "API version expected by the client to be supported by the server and used in the response format.",
                                  "example": "v2.0",
                                  "type": "string"
                                },
                                "filters": {
                                  "description": "Filters as submitted in the request.",
                                  "example": [
                                    "BTO:0000199",
                                    "PATO:0000383"
                                  ],
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "includeResultsetResponses": {
                                  "default": "HIT",
                                  "description": "Indicator of whether responses from every Resultset should be included in the response to this request or just the ones with positive, negative results or no details at all. If null (not specified), the default value of 'HIT' is assumed. This parameter allows for returning boolean/counting results although the Beacon instance is capable to return record level details.",
                                  "enum": [
                                    "ALL",
                                    "HIT",
                                    "MISS",
                                    "NONE"
                                  ],
                                  "examples": [
                                    "ALL",
                                    "HIT",
                                    "MISS",
                                    "NONE"
                                  ],
                                  "type": "string"
                                },
                                "pagination": {
                                  "description": "Pagination as requested for the results.",
                                  "properties": {
                                    "currentPage": {
                                      "description": "Token of the returned page. To be used only in the response to allow the client to check if the returned page is the one requested.",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "limit": {
                                      "default": 10,
                                      "description": "Size of the page. Use `0` to return all the results or the maximum allowed by the Beacon, if there is any.",
                                      "example": 10,
                                      "minimum": 0,
                                      "type": "integer"
                                    },
                                    "nextPage": {
                                      "description": "Token of the next page. Used to navigate forward. If empty, it is assumed that no more pages are available",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "previousPage": {
                                      "description": "Token of the previous page. Used to navigate backwards. If empty, it is assumed that the current page is the first one.",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "skip": {
                                      "default": 0,
                                      "description": "* In the request: number of pages to skip * In the response: number of pages that has been skipped",
                                      "example": 0,
                                      "minimum": 0,
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "requestParameters": {
                                  "description": "Dictionary of request parameters received in the `RequestBody` or as part of a GET request.",
                                  "$schema": "https://json-schema.org/draft/2020-12/schema",
                                  "additionalProperties": {
                                    "type": "object"
                                  },
                                  "properties": {
                                    "$schema": {
                                      "description": "Added here to allow proper validation of the documents.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "requestedGranularity": {
                                  "description": "Requested granularity for the response which may differe from the response's actual granularity.",
                                  "default": "boolean",
                                  "enum": [
                                    "boolean",
                                    "count",
                                    "aggregated",
                                    "record"
                                  ],
                                  "type": "string"
                                },
                                "requestedSchemas": {
                                  "$comment": "TODO: Add the format attribute as a uri.",
                                  "description": "Set of schemas to be used in the response to a request. `minItems: 0` is used to confirm that an empty array is acceptable here.",
                                  "minItems": 0,
                                  "items": {
                                    "description": "Schema to be used for the requested entry type in the response.",
                                    "properties": {
                                      "entityType": {
                                        "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                                        "example": "Individual",
                                        "type": "string"
                                      },
                                      "schema": {
                                        "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                                        "examples": [
                                          "./ga4gh-beacon-dataset-v2.0.0",
                                          "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "testMode": {
                                  "description": "Used for indicating that a request was received in a test context.",
                                  "default": false,
                                  "type": "boolean"
                                }
                              },
                              "required": [
                                "apiVersion",
                                "requestedSchemas",
                                "pagination",
                                "requestedGranularity"
                              ],
                              "type": "object"
                            },
                            "returnedGranularity": {
                              "description": "Granularity of the Beacon response. Targeted Beacon could respond or not with the requested granularity. E.g. record level granularity could be requested, but the Beacon could respond only with boolean or count results.",
                              "default": "boolean",
                              "enum": [
                                "boolean",
                                "count",
                                "aggregated",
                                "record"
                              ],
                              "type": "string"
                            },
                            "returnedSchemas": {
                              "description": "Set of schemas to be used in the response to a request.",
                              "items": {
                                "description": "Schema to be used for the requested entry type in the response.",
                                "properties": {
                                  "entityType": {
                                    "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                                    "example": "Individual",
                                    "type": "string"
                                  },
                                  "schema": {
                                    "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                                    "examples": [
                                      "./ga4gh-beacon-dataset-v2.0.0",
                                      "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                                    ],
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "testMode": {
                              "description": "Used for indicating that a response is returned in a test context. Purposed for compliance testing. Information returned could be fake.",
                              "default": false,
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "beaconId",
                            "apiVersion",
                            "returnedSchemas",
                            "returnedGranularity",
                            "receivedRequestSummary"
                          ],
                          "type": "object"
                        },
                        "responseSummary": {
                          "description": "Response summary, including Boolean and optionally results count.",
                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                          "properties": {
                            "exists": {
                              "description": "Indicator of whether any entry was observed. This should be non-null, unless there was an error, in which case a `beaconErrorResponse` is expected instead of this one.",
                              "examples": [
                                true
                              ],
                              "type": "boolean"
                            },
                            "numTotalResults": {
                              "description": "Total number of results.",
                              "examples": [
                                123
                              ],
                              "minimum": 0,
                              "type": "integer"
                            }
                          },
                          "required": [
                            "exists",
                            "numTotalResults"
                          ],
                          "type": "object"
                        }
                      },
                      "required": [
                        "meta",
                        "responseSummary"
                      ],
                      "type": "object"
                    },
                    {
                      "$schema": "https://json-schema.org/draft/2020-12/schema",
                      "additionalProperties": true,
                      "description": "Beacon response that includes record level details, grouped in Resultsets.",
                      "properties": {
                        "beaconHandovers": {
                          "description": "List of handovers that apply to the whole response, not to any resultset or result in particular.",
                          "items": {
                            "description": "Requested schema to be used for individuals in the response.",
                            "properties": {
                              "handoverType": {
                                "description": "Handover type, as an Ontology_term object with CURIE syntax for the `id` value. Use `CUSTOM` for the `id` when no ontology is available.",
                                "examples": [
                                  {
                                    "id": "EFO:0004157",
                                    "label": "BAM format"
                                  },
                                  {
                                    "id": "CUSTOM",
                                    "label": "download genomic variants in .pgxseg file format"
                                  }
                                ],
                                "$schema": "https://json-schema.org/draft/2020-12/schema",
                                "additionalProperties": true,
                                "properties": {
                                  "id": {
                                    "description": "A CURIE identifier, e.g. as `id` for an ontology term.",
                                    "examples": [
                                      "ga4gh:GA.01234abcde",
                                      "DUO:0000004",
                                      "orcid:0000-0003-3463-0775",
                                      "PMID:15254584"
                                    ],
                                    "pattern": "^\\w[^:]+:.+$",
                                    "type": "string"
                                  },
                                  "label": {
                                    "description": "The text that describes the term. By default it could be the preferred text of the term, but is it acceptable to customize it for a clearer description and understanding of the term in an specific context.",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id"
                                ],
                                "title": "Ontology Term",
                                "type": "object"
                              },
                              "note": {
                                "description": "An optional text including considerations on the handover link provided.",
                                "example": "This handover link provides access to a summarized VCF.",
                                "type": "string"
                              },
                              "url": {
                                "description": "URL endpoint to where the handover process could progress, in RFC3986 format",
                                "example": "https://api.mygenomeservice.org/Handover/9dcc48d7-fc88-11e8-9110-b0c592dbf8c0/",
                                "format": "uri",
                                "type": "string"
                              }
                            },
                            "required": [
                              "handoverType",
                              "url"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "info": {
                          "description": "Additional details that could be of interest. Provided to clearly enclose any attribute that is not part of the Beacon specification.",
                          "type": "object"
                        },
                        "meta": {
                          "description": "Information about the response that could be relevant for the Beacon client in order to interpret the results.",
                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                          "properties": {
                            "apiVersion": {
                              "description": "Version of the Beacon API.",
                              "example": "v2.0",
                              "type": "string"
                            },
                            "beaconId": {
                              "description": "Identifier of the beacon instance.",
                              "example": "org.example.beacon.v2",
                              "type": "string"
                            },
                            "receivedRequestSummary": {
                              "description": "Section of the response that summarize the request received as it has been interpreted by the Beacon server.",
                              "$schema": "https://json-schema.org/draft/2020-12/schema",
                              "properties": {
                                "apiVersion": {
                                  "description": "API version expected by the client to be supported by the server and used in the response format.",
                                  "example": "v2.0",
                                  "type": "string"
                                },
                                "filters": {
                                  "description": "Filters as submitted in the request.",
                                  "example": [
                                    "BTO:0000199",
                                    "PATO:0000383"
                                  ],
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "includeResultsetResponses": {
                                  "default": "HIT",
                                  "description": "Indicator of whether responses from every Resultset should be included in the response to this request or just the ones with positive, negative results or no details at all. If null (not specified), the default value of 'HIT' is assumed. This parameter allows for returning boolean/counting results although the Beacon instance is capable to return record level details.",
                                  "enum": [
                                    "ALL",
                                    "HIT",
                                    "MISS",
                                    "NONE"
                                  ],
                                  "examples": [
                                    "ALL",
                                    "HIT",
                                    "MISS",
                                    "NONE"
                                  ],
                                  "type": "string"
                                },
                                "pagination": {
                                  "description": "Pagination as requested for the results.",
                                  "properties": {
                                    "currentPage": {
                                      "description": "Token of the returned page. To be used only in the response to allow the client to check if the returned page is the one requested.",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "limit": {
                                      "default": 10,
                                      "description": "Size of the page. Use `0` to return all the results or the maximum allowed by the Beacon, if there is any.",
                                      "example": 10,
                                      "minimum": 0,
                                      "type": "integer"
                                    },
                                    "nextPage": {
                                      "description": "Token of the next page. Used to navigate forward. If empty, it is assumed that no more pages are available",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "previousPage": {
                                      "description": "Token of the previous page. Used to navigate backwards. If empty, it is assumed that the current page is the first one.",
                                      "example": "ab0sc&fe1dd",
                                      "type": "string"
                                    },
                                    "skip": {
                                      "default": 0,
                                      "description": "* In the request: number of pages to skip * In the response: number of pages that has been skipped",
                                      "example": 0,
                                      "minimum": 0,
                                      "type": "integer"
                                    }
                                  },
                                  "type": "object"
                                },
                                "requestParameters": {
                                  "description": "Dictionary of request parameters received in the `RequestBody` or as part of a GET request.",
                                  "$schema": "https://json-schema.org/draft/2020-12/schema",
                                  "additionalProperties": {
                                    "type": "object"
                                  },
                                  "properties": {
                                    "$schema": {
                                      "description": "Added here to allow proper validation of the documents.",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "requestedGranularity": {
                                  "description": "Requested granularity for the response which may differe from the response's actual granularity.",
                                  "default": "boolean",
                                  "enum": [
                                    "boolean",
                                    "count",
                                    "aggregated",
                                    "record"
                                  ],
                                  "type": "string"
                                },
                                "requestedSchemas": {
                                  "$comment": "TODO: Add the format attribute as a uri.",
                                  "description": "Set of schemas to be used in the response to a request. `minItems: 0` is used to confirm that an empty array is acceptable here.",
                                  "minItems": 0,
                                  "items": {
                                    "description": "Schema to be used for the requested entry type in the response.",
                                    "properties": {
                                      "entityType": {
                                        "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                                        "example": "Individual",
                                        "type": "string"
                                      },
                                      "schema": {
                                        "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                                        "examples": [
                                          "./ga4gh-beacon-dataset-v2.0.0",
                                          "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "testMode": {
                                  "description": "Used for indicating that a request was received in a test context.",
                                  "default": false,
                                  "type": "boolean"
                                }
                              },
                              "required": [
                                "apiVersion",
                                "requestedSchemas",
                                "pagination",
                                "requestedGranularity"
                              ],
                              "type": "object"
                            },
                            "returnedGranularity": {
                              "description": "Granularity of the Beacon response. Targeted Beacon could respond or not with the requested granularity. E.g. record level granularity could be requested, but the Beacon could respond only with boolean or count results.",
                              "default": "boolean",
                              "enum": [
                                "boolean",
                                "count",
                                "aggregated",
                                "record"
                              ],
                              "type": "string"
                            },
                            "returnedSchemas": {
                              "description": "Set of schemas to be used in the response to a request.",
                              "items": {
                                "description": "Schema to be used for the requested entry type in the response.",
                                "properties": {
                                  "entityType": {
                                    "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                                    "example": "Individual",
                                    "type": "string"
                                  },
                                  "schema": {
                                    "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                                    "examples": [
                                      "./ga4gh-beacon-dataset-v2.0.0",
                                      "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                                    ],
                                    "type": "string"
                                  }
                                },
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "testMode": {
                              "description": "Used for indicating that a response is returned in a test context. Purposed for compliance testing. Information returned could be fake.",
                              "default": false,
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "beaconId",
                            "apiVersion",
                            "returnedSchemas",
                            "returnedGranularity",
                            "receivedRequestSummary"
                          ],
                          "type": "object"
                        },
                        "response": {
                          "description": "Response for queries that recovers any result.",
                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                          "additionalProperties": true,
                          "definitions": {
                            "ResultsetInstance": {
                              "additionalProperties": true,
                              "properties": {
                                "exists": {
                                  "type": "boolean"
                                },
                                "id": {
                                  "description": "id of the resultset",
                                  "example": "datasetA",
                                  "type": "string"
                                },
                                "info": {
                                  "description": "Additional details that could be of interest about the Resultset. Provided to clearly enclose any attribute that is not part of the Beacon specification.",
                                  "type": "object"
                                },
                                "results": {
                                  "items": {
                                    "type": "object"
                                  },
                                  "minItems": 0,
                                  "type": "array"
                                },
                                "resultsCount": {
                                  "description": "Number of results in this Resultset.",
                                  "type": "integer"
                                },
                                "resultsHandovers": {
                                  "description": "List of handovers that apply to this resultset, not to the whole Beacon or to a result in particular.",
                                  "items": {
                                    "description": "Requested schema to be used for individuals in the response.",
                                    "properties": {
                                      "handoverType": {
                                        "description": "Handover type, as an Ontology_term object with CURIE syntax for the `id` value. Use `CUSTOM` for the `id` when no ontology is available.",
                                        "examples": [
                                          {
                                            "id": "EFO:0004157",
                                            "label": "BAM format"
                                          },
                                          {
                                            "id": "CUSTOM",
                                            "label": "download genomic variants in .pgxseg file format"
                                          }
                                        ],
                                        "$schema": "https://json-schema.org/draft/2020-12/schema",
                                        "additionalProperties": true,
                                        "properties": {
                                          "id": {
                                            "description": "A CURIE identifier, e.g. as `id` for an ontology term.",
                                            "examples": [
                                              "ga4gh:GA.01234abcde",
                                              "DUO:0000004",
                                              "orcid:0000-0003-3463-0775",
                                              "PMID:15254584"
                                            ],
                                            "pattern": "^\\w[^:]+:.+$",
                                            "type": "string"
                                          },
                                          "label": {
                                            "description": "The text that describes the term. By default it could be the preferred text of the term, but is it acceptable to customize it for a clearer description and understanding of the term in an specific context.",
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "id"
                                        ],
                                        "title": "Ontology Term",
                                        "type": "object"
                                      },
                                      "note": {
                                        "description": "An optional text including considerations on the handover link provided.",
                                        "example": "This handover link provides access to a summarized VCF.",
                                        "type": "string"
                                      },
                                      "url": {
                                        "description": "URL endpoint to where the handover process could progress, in RFC3986 format",
                                        "example": "https://api.mygenomeservice.org/Handover/9dcc48d7-fc88-11e8-9110-b0c592dbf8c0/",
                                        "format": "uri",
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "handoverType",
                                      "url"
                                    ],
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "setType": {
                                  "default": "dataset",
                                  "description": "Entry type of resultSet. It SHOULD MATCH an entry type declared as collection in the Beacon configuration.",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "id",
                                "setType",
                                "exists",
                                "resultsCount",
                                "results"
                              ]
                            }
                          },
                          "properties": {
                            "$schema": {
                              "$comment": "TO REVIEW: adding a `format` or `regex` attribute that validates correctly against a file path (relative).",
                              "description": "Refers to the JSON Schema which describes the set of valid attributes for this particular document type. This attribute is mostly used in schemas that should be tested in Beacon implementations.",
                              "type": "string"
                            },
                            "resultSets": {
                              "items": {
                                "additionalProperties": true,
                                "properties": {
                                  "exists": {
                                    "type": "boolean"
                                  },
                                  "id": {
                                    "description": "id of the resultset",
                                    "example": "datasetA",
                                    "type": "string"
                                  },
                                  "info": {
                                    "description": "Additional details that could be of interest about the Resultset. Provided to clearly enclose any attribute that is not part of the Beacon specification.",
                                    "type": "object"
                                  },
                                  "results": {
                                    "items": {
                                      "type": "object"
                                    },
                                    "minItems": 0,
                                    "type": "array"
                                  },
                                  "resultsCount": {
                                    "description": "Number of results in this Resultset.",
                                    "type": "integer"
                                  },
                                  "resultsHandovers": {
                                    "description": "List of handovers that apply to this resultset, not to the whole Beacon or to a result in particular.",
                                    "items": {
                                      "description": "Requested schema to be used for individuals in the response.",
                                      "properties": {
                                        "handoverType": {
                                          "description": "Handover type, as an Ontology_term object with CURIE syntax for the `id` value. Use `CUSTOM` for the `id` when no ontology is available.",
                                          "examples": [
                                            {
                                              "id": "EFO:0004157",
                                              "label": "BAM format"
                                            },
                                            {
                                              "id": "CUSTOM",
                                              "label": "download genomic variants in .pgxseg file format"
                                            }
                                          ],
                                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                                          "additionalProperties": true,
                                          "properties": {
                                            "id": {
                                              "description": "A CURIE identifier, e.g. as `id` for an ontology term.",
                                              "examples": [
                                                "ga4gh:GA.01234abcde",
                                                "DUO:0000004",
                                                "orcid:0000-0003-3463-0775",
                                                "PMID:15254584"
                                              ],
                                              "pattern": "^\\w[^:]+:.+$",
                                              "type": "string"
                                            },
                                            "label": {
                                              "description": "The text that describes the term. By default it could be the preferred text of the term, but is it acceptable to customize it for a clearer description and understanding of the term in an specific context.",
                                              "type": "string"
                                            }
                                          },
                                          "required": [
                                            "id"
                                          ],
                                          "title": "Ontology Term",
                                          "type": "object"
                                        },
                                        "note": {
                                          "description": "An optional text including considerations on the handover link provided.",
                                          "example": "This handover link provides access to a summarized VCF.",
                                          "type": "string"
                                        },
                                        "url": {
                                          "description": "URL endpoint to where the handover process could progress, in RFC3986 format",
                                          "example": "https://api.mygenomeservice.org/Handover/9dcc48d7-fc88-11e8-9110-b0c592dbf8c0/",
                                          "format": "uri",
                                          "type": "string"
                                        }
                                      },
                                      "required": [
                                        "handoverType",
                                        "url"
                                      ],
                                      "type": "object"
                                    },
                                    "type": "array"
                                  },
                                  "setType": {
                                    "default": "dataset",
                                    "description": "Entry type of resultSet. It SHOULD MATCH an entry type declared as collection in the Beacon configuration.",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id",
                                  "setType",
                                  "exists",
                                  "resultsCount",
                                  "results"
                                ]
                              },
                              "minItems": 0,
                              "type": "array"
                            }
                          },
                          "required": [
                            "resultSets"
                          ],
                          "title": "Beacon ResultSet",
                          "type": "object"
                        },
                        "responseSummary": {
                          "description": "Response summary, including Boolean and optionally results count.",
                          "$schema": "https://json-schema.org/draft/2020-12/schema",
                          "properties": {
                            "exists": {
                              "description": "Indicator of whether any entry was observed. This should be non-null, unless there was an error, in which case an error response is expected instead of this one.",
                              "examples": [
                                true
                              ],
                              "type": "boolean"
                            },
                            "numTotalResults": {
                              "description": "Total number of results.",
                              "examples": [
                                123
                              ],
                              "minimum": 0,
                              "type": "integer"
                            }
                          },
                          "required": [
                            "exists"
                          ],
                          "type": "object"
                        }
                      },
                      "required": [
                        "meta",
                        "responseSummary",
                        "response"
                      ],
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Successful operation."
          },
          "default": {
            "description": "An unsuccessful operation",
            "$schema": "https://json-schema.org/draft/2020-12/schema",
            "additionalProperties": true,
            "properties": {
              "error": {
                "description": "Error response",
                "properties": {
                  "errorCode": {
                    "description": "Entry not found",
                    "examples": [
                      "404"
                    ],
                    "format": "int32",
                    "type": "integer"
                  },
                  "errorMessage": {
                    "examples": [
                      "the provided parameters are incomplete. 'xyz' is missing."
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "errorCode"
                ],
                "type": "object"
              },
              "meta": {
                "description": "Information about the response that could be relevant for the Beacon client in order to interpret the results.",
                "$schema": "https://json-schema.org/draft/2020-12/schema",
                "properties": {
                  "apiVersion": {
                    "description": "Version of the Beacon API.",
                    "example": "v2.0",
                    "type": "string"
                  },
                  "beaconId": {
                    "description": "Identifier of the beacon instance.",
                    "example": "org.example.beacon.v2",
                    "type": "string"
                  },
                  "receivedRequestSummary": {
                    "description": "Section of the response that summarize the request received as it has been interpreted by the Beacon server.",
                    "$schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                      "apiVersion": {
                        "description": "API version expected by the client to be supported by the server and used in the response format.",
                        "example": "v2.0",
                        "type": "string"
                      },
                      "filters": {
                        "description": "Filters as submitted in the request.",
                        "example": [
                          "BTO:0000199",
                          "PATO:0000383"
                        ],
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "includeResultsetResponses": {
                        "default": "HIT",
                        "description": "Indicator of whether responses from every Resultset should be included in the response to this request or just the ones with positive, negative results or no details at all. If null (not specified), the default value of 'HIT' is assumed. This parameter allows for returning boolean/counting results although the Beacon instance is capable to return record level details.",
                        "enum": [
                          "ALL",
                          "HIT",
                          "MISS",
                          "NONE"
                        ],
                        "examples": [
                          "ALL",
                          "HIT",
                          "MISS",
                          "NONE"
                        ],
                        "type": "string"
                      },
                      "pagination": {
                        "description": "Pagination as requested for the results.",
                        "properties": {
                          "currentPage": {
                            "description": "Token of the returned page. To be used only in the response to allow the client to check if the returned page is the one requested.",
                            "example": "ab0sc&fe1dd",
                            "type": "string"
                          },
                          "limit": {
                            "default": 10,
                            "description": "Size of the page. Use `0` to return all the results or the maximum allowed by the Beacon, if there is any.",
                            "example": 10,
                            "minimum": 0,
                            "type": "integer"
                          },
                          "nextPage": {
                            "description": "Token of the next page. Used to navigate forward. If empty, it is assumed that no more pages are available",
                            "example": "ab0sc&fe1dd",
                            "type": "string"
                          },
                          "previousPage": {
                            "description": "Token of the previous page. Used to navigate backwards. If empty, it is assumed that the current page is the first one.",
                            "example": "ab0sc&fe1dd",
                            "type": "string"
                          },
                          "skip": {
                            "default": 0,
                            "description": "* In the request: number of pages to skip * In the response: number of pages that has been skipped",
                            "example": 0,
                            "minimum": 0,
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "requestParameters": {
                        "description": "Dictionary of request parameters received in the `RequestBody` or as part of a GET request.",
                        "$schema": "https://json-schema.org/draft/2020-12/schema",
                        "additionalProperties": {
                          "type": "object"
                        },
                        "properties": {
                          "$schema": {
                            "description": "Added here to allow proper validation of the documents.",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "requestedGranularity": {
                        "description": "Requested granularity for the response which may differe from the response's actual granularity.",
                        "default": "boolean",
                        "enum": [
                          "boolean",
                          "count",
                          "aggregated",
                          "record"
                        ],
                        "type": "string"
                      },
                      "requestedSchemas": {
                        "$comment": "TODO: Add the format attribute as a uri.",
                        "description": "Set of schemas to be used in the response to a request. `minItems: 0` is used to confirm that an empty array is acceptable here.",
                        "minItems": 0,
                        "items": {
                          "description": "Schema to be used for the requested entry type in the response.",
                          "properties": {
                            "entityType": {
                              "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                              "example": "Individual",
                              "type": "string"
                            },
                            "schema": {
                              "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                              "examples": [
                                "./ga4gh-beacon-dataset-v2.0.0",
                                "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "testMode": {
                        "description": "Used for indicating that a request was received in a test context.",
                        "default": false,
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "apiVersion",
                      "requestedSchemas",
                      "pagination",
                      "requestedGranularity"
                    ],
                    "type": "object"
                  },
                  "returnedGranularity": {
                    "description": "Granularity of the Beacon response. Targeted Beacon could respond or not with the requested granularity. E.g. record level granularity could be requested, but the Beacon could respond only with boolean or count results.",
                    "default": "boolean",
                    "enum": [
                      "boolean",
                      "count",
                      "aggregated",
                      "record"
                    ],
                    "type": "string"
                  },
                  "returnedSchemas": {
                    "description": "Set of schemas to be used in the response to a request.",
                    "items": {
                      "description": "Schema to be used for the requested entry type in the response.",
                      "properties": {
                        "entityType": {
                          "$comment": "TO REVIEW: Should that refer to a concept d? or would that include an undesired dependency to the configuration?",
                          "example": "Individual",
                          "type": "string"
                        },
                        "schema": {
                          "$comment": "TO DO: Add the correct format as 'uri' or 'regex'",
                          "examples": [
                            "./ga4gh-beacon-dataset-v2.0.0",
                            "https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json"
                          ],
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "testMode": {
                    "description": "Used for indicating that a response is returned in a test context. Purposed for compliance testing. Information returned could be fake.",
                    "default": false,
                    "type": "boolean"
                  }
                },
                "required": [
                  "beaconId",
                  "apiVersion",
                  "returnedSchemas",
                  "returnedGranularity",
                  "receivedRequestSummary"
                ],
                "type": "object"
              }
            },
            "required": [
              "meta",
              "error"
            ],
            "type": "object"
          }
        },
        "tags": [
          "POST Endpoints"
        ]
      }
    }
  },
  "servers": []
}
